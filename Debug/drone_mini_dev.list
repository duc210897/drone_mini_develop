
drone_mini_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072b8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080073c8  080073c8  000083c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c0  080074c0  00009098  2**0
                  CONTENTS
  4 .ARM          00000008  080074c0  080074c0  000084c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074c8  080074c8  00009098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074c8  080074c8  000084c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074cc  080074cc  000084cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  080074d0  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  20000098  08007568  00009098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  08007568  00009884  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f012  00000000  00000000  000090c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f53  00000000  00000000  000180d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  0001a028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c0e  00000000  00000000  0001af50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018156  00000000  00000000  0001bb5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011da5  00000000  00000000  00033cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d8a0  00000000  00000000  00045a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d32f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004af4  00000000  00000000  000d333c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000d7e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	080073b0 	.word	0x080073b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	080073b0 	.word	0x080073b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	@ 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d46:	2afd      	cmp	r2, #253	@ 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	@ 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__gesf2>:
 8000f94:	f04f 3cff 	mov.w	ip, #4294967295
 8000f98:	e006      	b.n	8000fa8 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__lesf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	e002      	b.n	8000fa8 <__cmpsf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__cmpsf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	bf18      	it	ne
 8000fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fbe:	d011      	beq.n	8000fe4 <__cmpsf2+0x40>
 8000fc0:	b001      	add	sp, #4
 8000fc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc6:	bf18      	it	ne
 8000fc8:	ea90 0f01 	teqne	r0, r1
 8000fcc:	bf58      	it	pl
 8000fce:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd2:	bf88      	it	hi
 8000fd4:	17c8      	asrhi	r0, r1, #31
 8000fd6:	bf38      	it	cc
 8000fd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fdc:	bf18      	it	ne
 8000fde:	f040 0001 	orrne.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__cmpsf2+0x4c>
 8000fea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fee:	d105      	bne.n	8000ffc <__cmpsf2+0x58>
 8000ff0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff4:	d1e4      	bne.n	8000fc0 <__cmpsf2+0x1c>
 8000ff6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffa:	d0e1      	beq.n	8000fc0 <__cmpsf2+0x1c>
 8000ffc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_cfrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4661      	mov	r1, ip
 800100a:	e7ff      	b.n	800100c <__aeabi_cfcmpeq>

0800100c <__aeabi_cfcmpeq>:
 800100c:	b50f      	push	{r0, r1, r2, r3, lr}
 800100e:	f7ff ffc9 	bl	8000fa4 <__cmpsf2>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf48      	it	mi
 8001016:	f110 0f00 	cmnmi.w	r0, #0
 800101a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800101c <__aeabi_fcmpeq>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff fff4 	bl	800100c <__aeabi_cfcmpeq>
 8001024:	bf0c      	ite	eq
 8001026:	2001      	moveq	r0, #1
 8001028:	2000      	movne	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmplt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffea 	bl	800100c <__aeabi_cfcmpeq>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmple>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffe0 	bl	800100c <__aeabi_cfcmpeq>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpge>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffd2 	bl	8001004 <__aeabi_cfrcmple>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpgt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffc8 	bl	8001004 <__aeabi_cfrcmple>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_f2iz>:
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001088:	d30f      	bcc.n	80010aa <__aeabi_f2iz+0x2a>
 800108a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800108e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001092:	d90d      	bls.n	80010b0 <__aeabi_f2iz+0x30>
 8001094:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001098:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800109c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010a0:	fa23 f002 	lsr.w	r0, r3, r2
 80010a4:	bf18      	it	ne
 80010a6:	4240      	negne	r0, r0
 80010a8:	4770      	bx	lr
 80010aa:	f04f 0000 	mov.w	r0, #0
 80010ae:	4770      	bx	lr
 80010b0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010b4:	d101      	bne.n	80010ba <__aeabi_f2iz+0x3a>
 80010b6:	0242      	lsls	r2, r0, #9
 80010b8:	d105      	bne.n	80010c6 <__aeabi_f2iz+0x46>
 80010ba:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010be:	bf08      	it	eq
 80010c0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010c4:	4770      	bx	lr
 80010c6:	f04f 0000 	mov.w	r0, #0
 80010ca:	4770      	bx	lr

080010cc <__aeabi_f2uiz>:
 80010cc:	0042      	lsls	r2, r0, #1
 80010ce:	d20e      	bcs.n	80010ee <__aeabi_f2uiz+0x22>
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d4:	d30b      	bcc.n	80010ee <__aeabi_f2uiz+0x22>
 80010d6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d409      	bmi.n	80010f4 <__aeabi_f2uiz+0x28>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010e8:	fa23 f002 	lsr.w	r0, r3, r2
 80010ec:	4770      	bx	lr
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	4770      	bx	lr
 80010f4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010f8:	d101      	bne.n	80010fe <__aeabi_f2uiz+0x32>
 80010fa:	0242      	lsls	r2, r0, #9
 80010fc:	d102      	bne.n	8001104 <__aeabi_f2uiz+0x38>
 80010fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001102:	4770      	bx	lr
 8001104:	f04f 0000 	mov.w	r0, #0
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop

0800110c <calculate_pid>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void calculate_pid()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	if(throtle > 1150)
 8001112:	4b7f      	ldr	r3, [pc, #508]	@ (8001310 <calculate_pid+0x204>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f240 427e 	movw	r2, #1150	@ 0x47e
 800111a:	4293      	cmp	r3, r2
 800111c:	f240 8337 	bls.w	800178e <calculate_pid+0x682>
	{
		pid_roll_error  = Roll_filter - roll_desire;
 8001120:	4b7c      	ldr	r3, [pc, #496]	@ (8001314 <calculate_pid+0x208>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a7c      	ldr	r2, [pc, #496]	@ (8001318 <calculate_pid+0x20c>)
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fcd8 	bl	8000ae0 <__aeabi_fsub>
 8001130:	4603      	mov	r3, r0
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ffa4 	bl	8001080 <__aeabi_f2iz>
 8001138:	4603      	mov	r3, r0
 800113a:	4a78      	ldr	r2, [pc, #480]	@ (800131c <calculate_pid+0x210>)
 800113c:	6013      	str	r3, [r2, #0]
		pid_pitch_error = Pitch_filter - pitch_desire;
 800113e:	4b78      	ldr	r3, [pc, #480]	@ (8001320 <calculate_pid+0x214>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a78      	ldr	r2, [pc, #480]	@ (8001324 <calculate_pid+0x218>)
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fcc9 	bl	8000ae0 <__aeabi_fsub>
 800114e:	4603      	mov	r3, r0
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff95 	bl	8001080 <__aeabi_f2iz>
 8001156:	4603      	mov	r3, r0
 8001158:	4a73      	ldr	r2, [pc, #460]	@ (8001328 <calculate_pid+0x21c>)
 800115a:	6013      	str	r3, [r2, #0]
		pid_yaw_error   = Yaw_filter - yaw_desire;
 800115c:	4b73      	ldr	r3, [pc, #460]	@ (800132c <calculate_pid+0x220>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a73      	ldr	r2, [pc, #460]	@ (8001330 <calculate_pid+0x224>)
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fcba 	bl	8000ae0 <__aeabi_fsub>
 800116c:	4603      	mov	r3, r0
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff86 	bl	8001080 <__aeabi_f2iz>
 8001174:	4603      	mov	r3, r0
 8001176:	4a6f      	ldr	r2, [pc, #444]	@ (8001334 <calculate_pid+0x228>)
 8001178:	6013      	str	r3, [r2, #0]
//		{
//			kp_pitch = 0.07;
//			ki_pitch = 0.001;
//			kd_pitch = 0.05;
//		}
		 if((-1 <= pid_pitch_error) && (pid_pitch_error <= 1))
 800117a:	4b6b      	ldr	r3, [pc, #428]	@ (8001328 <calculate_pid+0x21c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001182:	db0d      	blt.n	80011a0 <calculate_pid+0x94>
 8001184:	4b68      	ldr	r3, [pc, #416]	@ (8001328 <calculate_pid+0x21c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	dc09      	bgt.n	80011a0 <calculate_pid+0x94>
		{
			kp_pitch = 0.1;
 800118c:	4b6a      	ldr	r3, [pc, #424]	@ (8001338 <calculate_pid+0x22c>)
 800118e:	4a6b      	ldr	r2, [pc, #428]	@ (800133c <calculate_pid+0x230>)
 8001190:	601a      	str	r2, [r3, #0]
			ki_pitch = 0.002;
 8001192:	4b6b      	ldr	r3, [pc, #428]	@ (8001340 <calculate_pid+0x234>)
 8001194:	4a6b      	ldr	r2, [pc, #428]	@ (8001344 <calculate_pid+0x238>)
 8001196:	601a      	str	r2, [r3, #0]
			kd_pitch = 0.05;
 8001198:	4b6b      	ldr	r3, [pc, #428]	@ (8001348 <calculate_pid+0x23c>)
 800119a:	4a6c      	ldr	r2, [pc, #432]	@ (800134c <calculate_pid+0x240>)
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e07e      	b.n	800129e <calculate_pid+0x192>
		}
		else if((-2 <= pid_pitch_error) && (pid_pitch_error <= 2))
 80011a0:	4b61      	ldr	r3, [pc, #388]	@ (8001328 <calculate_pid+0x21c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f113 0f02 	cmn.w	r3, #2
 80011a8:	db0d      	blt.n	80011c6 <calculate_pid+0xba>
 80011aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001328 <calculate_pid+0x21c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	dc09      	bgt.n	80011c6 <calculate_pid+0xba>
		{
			kp_pitch = 0.3;
 80011b2:	4b61      	ldr	r3, [pc, #388]	@ (8001338 <calculate_pid+0x22c>)
 80011b4:	4a66      	ldr	r2, [pc, #408]	@ (8001350 <calculate_pid+0x244>)
 80011b6:	601a      	str	r2, [r3, #0]
			ki_pitch = 0.005;
 80011b8:	4b61      	ldr	r3, [pc, #388]	@ (8001340 <calculate_pid+0x234>)
 80011ba:	4a66      	ldr	r2, [pc, #408]	@ (8001354 <calculate_pid+0x248>)
 80011bc:	601a      	str	r2, [r3, #0]
			kd_pitch = 0.15;
 80011be:	4b62      	ldr	r3, [pc, #392]	@ (8001348 <calculate_pid+0x23c>)
 80011c0:	4a65      	ldr	r2, [pc, #404]	@ (8001358 <calculate_pid+0x24c>)
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e06b      	b.n	800129e <calculate_pid+0x192>
		}
		else if((-3 <= pid_pitch_error) && (pid_pitch_error <= 3))
 80011c6:	4b58      	ldr	r3, [pc, #352]	@ (8001328 <calculate_pid+0x21c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f113 0f03 	cmn.w	r3, #3
 80011ce:	db0d      	blt.n	80011ec <calculate_pid+0xe0>
 80011d0:	4b55      	ldr	r3, [pc, #340]	@ (8001328 <calculate_pid+0x21c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	dc09      	bgt.n	80011ec <calculate_pid+0xe0>
		{
			kp_pitch = 0.35;
 80011d8:	4b57      	ldr	r3, [pc, #348]	@ (8001338 <calculate_pid+0x22c>)
 80011da:	4a60      	ldr	r2, [pc, #384]	@ (800135c <calculate_pid+0x250>)
 80011dc:	601a      	str	r2, [r3, #0]
			ki_pitch = 0.07;
 80011de:	4b58      	ldr	r3, [pc, #352]	@ (8001340 <calculate_pid+0x234>)
 80011e0:	4a5f      	ldr	r2, [pc, #380]	@ (8001360 <calculate_pid+0x254>)
 80011e2:	601a      	str	r2, [r3, #0]
			kd_pitch = 0.15;
 80011e4:	4b58      	ldr	r3, [pc, #352]	@ (8001348 <calculate_pid+0x23c>)
 80011e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001358 <calculate_pid+0x24c>)
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e058      	b.n	800129e <calculate_pid+0x192>
		}
		else if((-4 <= pid_pitch_error) && (pid_pitch_error <= 4))
 80011ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001328 <calculate_pid+0x21c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f113 0f04 	cmn.w	r3, #4
 80011f4:	db0d      	blt.n	8001212 <calculate_pid+0x106>
 80011f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001328 <calculate_pid+0x21c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	dc09      	bgt.n	8001212 <calculate_pid+0x106>
		{
			kp_pitch = 0.4;
 80011fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001338 <calculate_pid+0x22c>)
 8001200:	4a58      	ldr	r2, [pc, #352]	@ (8001364 <calculate_pid+0x258>)
 8001202:	601a      	str	r2, [r3, #0]
			ki_pitch = 0.01;
 8001204:	4b4e      	ldr	r3, [pc, #312]	@ (8001340 <calculate_pid+0x234>)
 8001206:	4a58      	ldr	r2, [pc, #352]	@ (8001368 <calculate_pid+0x25c>)
 8001208:	601a      	str	r2, [r3, #0]
			kd_pitch = 0.2;
 800120a:	4b4f      	ldr	r3, [pc, #316]	@ (8001348 <calculate_pid+0x23c>)
 800120c:	4a57      	ldr	r2, [pc, #348]	@ (800136c <calculate_pid+0x260>)
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e045      	b.n	800129e <calculate_pid+0x192>
		}
		else if((-8 <= pid_pitch_error) && (pid_pitch_error <= 8))
 8001212:	4b45      	ldr	r3, [pc, #276]	@ (8001328 <calculate_pid+0x21c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f113 0f08 	cmn.w	r3, #8
 800121a:	db0d      	blt.n	8001238 <calculate_pid+0x12c>
 800121c:	4b42      	ldr	r3, [pc, #264]	@ (8001328 <calculate_pid+0x21c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b08      	cmp	r3, #8
 8001222:	dc09      	bgt.n	8001238 <calculate_pid+0x12c>
		{
			kp_pitch = 0.4;
 8001224:	4b44      	ldr	r3, [pc, #272]	@ (8001338 <calculate_pid+0x22c>)
 8001226:	4a4f      	ldr	r2, [pc, #316]	@ (8001364 <calculate_pid+0x258>)
 8001228:	601a      	str	r2, [r3, #0]
			ki_pitch = 0.015;
 800122a:	4b45      	ldr	r3, [pc, #276]	@ (8001340 <calculate_pid+0x234>)
 800122c:	4a50      	ldr	r2, [pc, #320]	@ (8001370 <calculate_pid+0x264>)
 800122e:	601a      	str	r2, [r3, #0]
			kd_roll = 0.2;
 8001230:	4b50      	ldr	r3, [pc, #320]	@ (8001374 <calculate_pid+0x268>)
 8001232:	4a4e      	ldr	r2, [pc, #312]	@ (800136c <calculate_pid+0x260>)
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e032      	b.n	800129e <calculate_pid+0x192>
		}
		else if((-10 <= pid_pitch_error) && (pid_pitch_error <= 10))
 8001238:	4b3b      	ldr	r3, [pc, #236]	@ (8001328 <calculate_pid+0x21c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f113 0f0a 	cmn.w	r3, #10
 8001240:	db0f      	blt.n	8001262 <calculate_pid+0x156>
 8001242:	4b39      	ldr	r3, [pc, #228]	@ (8001328 <calculate_pid+0x21c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dc0b      	bgt.n	8001262 <calculate_pid+0x156>
		{
			kp_pitch = 0.5;
 800124a:	4b3b      	ldr	r3, [pc, #236]	@ (8001338 <calculate_pid+0x22c>)
 800124c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001250:	601a      	str	r2, [r3, #0]
			ki_pitch = 0.02;
 8001252:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <calculate_pid+0x234>)
 8001254:	4a48      	ldr	r2, [pc, #288]	@ (8001378 <calculate_pid+0x26c>)
 8001256:	601a      	str	r2, [r3, #0]
			kd_pitch = 0.25;
 8001258:	4b3b      	ldr	r3, [pc, #236]	@ (8001348 <calculate_pid+0x23c>)
 800125a:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e01d      	b.n	800129e <calculate_pid+0x192>
		}
		else if((-20 <= pid_pitch_error) && (pid_pitch_error <= 20))
 8001262:	4b31      	ldr	r3, [pc, #196]	@ (8001328 <calculate_pid+0x21c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f113 0f14 	cmn.w	r3, #20
 800126a:	db0e      	blt.n	800128a <calculate_pid+0x17e>
 800126c:	4b2e      	ldr	r3, [pc, #184]	@ (8001328 <calculate_pid+0x21c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b14      	cmp	r3, #20
 8001272:	dc0a      	bgt.n	800128a <calculate_pid+0x17e>
		{
			kp_pitch = 0.55;
 8001274:	4b30      	ldr	r3, [pc, #192]	@ (8001338 <calculate_pid+0x22c>)
 8001276:	4a41      	ldr	r2, [pc, #260]	@ (800137c <calculate_pid+0x270>)
 8001278:	601a      	str	r2, [r3, #0]
			ki_pitch = 0.025;
 800127a:	4b31      	ldr	r3, [pc, #196]	@ (8001340 <calculate_pid+0x234>)
 800127c:	4a40      	ldr	r2, [pc, #256]	@ (8001380 <calculate_pid+0x274>)
 800127e:	601a      	str	r2, [r3, #0]
			kd_pitch = 0.25;
 8001280:	4b31      	ldr	r3, [pc, #196]	@ (8001348 <calculate_pid+0x23c>)
 8001282:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e009      	b.n	800129e <calculate_pid+0x192>
		}
		else
		{
			kp_pitch = 0.55;
 800128a:	4b2b      	ldr	r3, [pc, #172]	@ (8001338 <calculate_pid+0x22c>)
 800128c:	4a3b      	ldr	r2, [pc, #236]	@ (800137c <calculate_pid+0x270>)
 800128e:	601a      	str	r2, [r3, #0]
			ki_pitch = 0.03;
 8001290:	4b2b      	ldr	r3, [pc, #172]	@ (8001340 <calculate_pid+0x234>)
 8001292:	4a3c      	ldr	r2, [pc, #240]	@ (8001384 <calculate_pid+0x278>)
 8001294:	601a      	str	r2, [r3, #0]
			kd_pitch = 0.25;
 8001296:	4b2c      	ldr	r3, [pc, #176]	@ (8001348 <calculate_pid+0x23c>)
 8001298:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800129c:	601a      	str	r2, [r3, #0]
		}


		if((-1 <= pid_yaw_error) && (pid_yaw_error <= 1))
 800129e:	4b25      	ldr	r3, [pc, #148]	@ (8001334 <calculate_pid+0x228>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a6:	db0d      	blt.n	80012c4 <calculate_pid+0x1b8>
 80012a8:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <calculate_pid+0x228>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	dc09      	bgt.n	80012c4 <calculate_pid+0x1b8>
		{
			kp_yaw = 0.1;
 80012b0:	4b35      	ldr	r3, [pc, #212]	@ (8001388 <calculate_pid+0x27c>)
 80012b2:	4a22      	ldr	r2, [pc, #136]	@ (800133c <calculate_pid+0x230>)
 80012b4:	601a      	str	r2, [r3, #0]
			ki_yaw = 0.003;
 80012b6:	4b35      	ldr	r3, [pc, #212]	@ (800138c <calculate_pid+0x280>)
 80012b8:	4a35      	ldr	r2, [pc, #212]	@ (8001390 <calculate_pid+0x284>)
 80012ba:	601a      	str	r2, [r3, #0]
			kd_yaw = 0.05;
 80012bc:	4b35      	ldr	r3, [pc, #212]	@ (8001394 <calculate_pid+0x288>)
 80012be:	4a23      	ldr	r2, [pc, #140]	@ (800134c <calculate_pid+0x240>)
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e0ae      	b.n	8001422 <calculate_pid+0x316>
		}
		else if((-2 <= pid_yaw_error) && (pid_yaw_error <= 2))
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <calculate_pid+0x228>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f113 0f02 	cmn.w	r3, #2
 80012cc:	db0d      	blt.n	80012ea <calculate_pid+0x1de>
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <calculate_pid+0x228>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	dc09      	bgt.n	80012ea <calculate_pid+0x1de>
		{
			kp_yaw = 0.3;
 80012d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001388 <calculate_pid+0x27c>)
 80012d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001350 <calculate_pid+0x244>)
 80012da:	601a      	str	r2, [r3, #0]
			ki_yaw = 0.005;
 80012dc:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <calculate_pid+0x280>)
 80012de:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <calculate_pid+0x248>)
 80012e0:	601a      	str	r2, [r3, #0]
			kd_yaw = 0.15;
 80012e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001394 <calculate_pid+0x288>)
 80012e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001358 <calculate_pid+0x24c>)
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e09b      	b.n	8001422 <calculate_pid+0x316>
		}
		else if((-3 <= pid_yaw_error) && (pid_yaw_error <= 3))
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <calculate_pid+0x228>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f113 0f03 	cmn.w	r3, #3
 80012f2:	db51      	blt.n	8001398 <calculate_pid+0x28c>
 80012f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <calculate_pid+0x228>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	dc4d      	bgt.n	8001398 <calculate_pid+0x28c>
		{
			kp_yaw = 0.35;
 80012fc:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <calculate_pid+0x27c>)
 80012fe:	4a17      	ldr	r2, [pc, #92]	@ (800135c <calculate_pid+0x250>)
 8001300:	601a      	str	r2, [r3, #0]
			ki_yaw = 0.005;
 8001302:	4b22      	ldr	r3, [pc, #136]	@ (800138c <calculate_pid+0x280>)
 8001304:	4a13      	ldr	r2, [pc, #76]	@ (8001354 <calculate_pid+0x248>)
 8001306:	601a      	str	r2, [r3, #0]
			kd_yaw = 0.15;
 8001308:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <calculate_pid+0x288>)
 800130a:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <calculate_pid+0x24c>)
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	e088      	b.n	8001422 <calculate_pid+0x316>
 8001310:	20000024 	.word	0x20000024
 8001314:	200000cc 	.word	0x200000cc
 8001318:	200000e8 	.word	0x200000e8
 800131c:	20000128 	.word	0x20000128
 8001320:	200000d0 	.word	0x200000d0
 8001324:	200000ec 	.word	0x200000ec
 8001328:	20000130 	.word	0x20000130
 800132c:	200000d4 	.word	0x200000d4
 8001330:	200000f0 	.word	0x200000f0
 8001334:	20000138 	.word	0x20000138
 8001338:	2000000c 	.word	0x2000000c
 800133c:	3dcccccd 	.word	0x3dcccccd
 8001340:	20000010 	.word	0x20000010
 8001344:	3b03126f 	.word	0x3b03126f
 8001348:	20000014 	.word	0x20000014
 800134c:	3d4ccccd 	.word	0x3d4ccccd
 8001350:	3e99999a 	.word	0x3e99999a
 8001354:	3ba3d70a 	.word	0x3ba3d70a
 8001358:	3e19999a 	.word	0x3e19999a
 800135c:	3eb33333 	.word	0x3eb33333
 8001360:	3d8f5c29 	.word	0x3d8f5c29
 8001364:	3ecccccd 	.word	0x3ecccccd
 8001368:	3c23d70a 	.word	0x3c23d70a
 800136c:	3e4ccccd 	.word	0x3e4ccccd
 8001370:	3c75c28f 	.word	0x3c75c28f
 8001374:	20000008 	.word	0x20000008
 8001378:	3ca3d70a 	.word	0x3ca3d70a
 800137c:	3f0ccccd 	.word	0x3f0ccccd
 8001380:	3ccccccd 	.word	0x3ccccccd
 8001384:	3cf5c28f 	.word	0x3cf5c28f
 8001388:	20000018 	.word	0x20000018
 800138c:	2000001c 	.word	0x2000001c
 8001390:	3b449ba6 	.word	0x3b449ba6
 8001394:	20000020 	.word	0x20000020
		}
		else if((-4 <= pid_yaw_error) && (pid_yaw_error <= 4))
 8001398:	4b82      	ldr	r3, [pc, #520]	@ (80015a4 <calculate_pid+0x498>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f113 0f04 	cmn.w	r3, #4
 80013a0:	db0d      	blt.n	80013be <calculate_pid+0x2b2>
 80013a2:	4b80      	ldr	r3, [pc, #512]	@ (80015a4 <calculate_pid+0x498>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	dc09      	bgt.n	80013be <calculate_pid+0x2b2>
		{
			kp_yaw = 0.4;
 80013aa:	4b7f      	ldr	r3, [pc, #508]	@ (80015a8 <calculate_pid+0x49c>)
 80013ac:	4a7f      	ldr	r2, [pc, #508]	@ (80015ac <calculate_pid+0x4a0>)
 80013ae:	601a      	str	r2, [r3, #0]
			ki_yaw = 0.005;
 80013b0:	4b7f      	ldr	r3, [pc, #508]	@ (80015b0 <calculate_pid+0x4a4>)
 80013b2:	4a80      	ldr	r2, [pc, #512]	@ (80015b4 <calculate_pid+0x4a8>)
 80013b4:	601a      	str	r2, [r3, #0]
			kd_yaw = 0.2;
 80013b6:	4b80      	ldr	r3, [pc, #512]	@ (80015b8 <calculate_pid+0x4ac>)
 80013b8:	4a80      	ldr	r2, [pc, #512]	@ (80015bc <calculate_pid+0x4b0>)
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	e031      	b.n	8001422 <calculate_pid+0x316>
		}
		else if((-8 <= pid_yaw_error) && (pid_yaw_error <= 8))
 80013be:	4b79      	ldr	r3, [pc, #484]	@ (80015a4 <calculate_pid+0x498>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f113 0f08 	cmn.w	r3, #8
 80013c6:	db0d      	blt.n	80013e4 <calculate_pid+0x2d8>
 80013c8:	4b76      	ldr	r3, [pc, #472]	@ (80015a4 <calculate_pid+0x498>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	dc09      	bgt.n	80013e4 <calculate_pid+0x2d8>
		{
			kp_yaw = 0.4;
 80013d0:	4b75      	ldr	r3, [pc, #468]	@ (80015a8 <calculate_pid+0x49c>)
 80013d2:	4a76      	ldr	r2, [pc, #472]	@ (80015ac <calculate_pid+0x4a0>)
 80013d4:	601a      	str	r2, [r3, #0]
			ki_yaw = 0.005;
 80013d6:	4b76      	ldr	r3, [pc, #472]	@ (80015b0 <calculate_pid+0x4a4>)
 80013d8:	4a76      	ldr	r2, [pc, #472]	@ (80015b4 <calculate_pid+0x4a8>)
 80013da:	601a      	str	r2, [r3, #0]
			kd_yaw = 0.2;
 80013dc:	4b76      	ldr	r3, [pc, #472]	@ (80015b8 <calculate_pid+0x4ac>)
 80013de:	4a77      	ldr	r2, [pc, #476]	@ (80015bc <calculate_pid+0x4b0>)
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e01e      	b.n	8001422 <calculate_pid+0x316>
		}
		else if((-10 <= pid_yaw_error) && (pid_yaw_error <= 10))
 80013e4:	4b6f      	ldr	r3, [pc, #444]	@ (80015a4 <calculate_pid+0x498>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f113 0f0a 	cmn.w	r3, #10
 80013ec:	db0f      	blt.n	800140e <calculate_pid+0x302>
 80013ee:	4b6d      	ldr	r3, [pc, #436]	@ (80015a4 <calculate_pid+0x498>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b0a      	cmp	r3, #10
 80013f4:	dc0b      	bgt.n	800140e <calculate_pid+0x302>
		{
			kp_yaw = 0.5;
 80013f6:	4b6c      	ldr	r3, [pc, #432]	@ (80015a8 <calculate_pid+0x49c>)
 80013f8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80013fc:	601a      	str	r2, [r3, #0]
			ki_yaw = 0.005;
 80013fe:	4b6c      	ldr	r3, [pc, #432]	@ (80015b0 <calculate_pid+0x4a4>)
 8001400:	4a6c      	ldr	r2, [pc, #432]	@ (80015b4 <calculate_pid+0x4a8>)
 8001402:	601a      	str	r2, [r3, #0]
			kd_yaw = 0.25;
 8001404:	4b6c      	ldr	r3, [pc, #432]	@ (80015b8 <calculate_pid+0x4ac>)
 8001406:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	e009      	b.n	8001422 <calculate_pid+0x316>
		}
		else
		{
			kp_yaw = 0.55;
 800140e:	4b66      	ldr	r3, [pc, #408]	@ (80015a8 <calculate_pid+0x49c>)
 8001410:	4a6b      	ldr	r2, [pc, #428]	@ (80015c0 <calculate_pid+0x4b4>)
 8001412:	601a      	str	r2, [r3, #0]
			ki_yaw = 0.005;
 8001414:	4b66      	ldr	r3, [pc, #408]	@ (80015b0 <calculate_pid+0x4a4>)
 8001416:	4a67      	ldr	r2, [pc, #412]	@ (80015b4 <calculate_pid+0x4a8>)
 8001418:	601a      	str	r2, [r3, #0]
			kd_yaw = 0.25;
 800141a:	4b67      	ldr	r3, [pc, #412]	@ (80015b8 <calculate_pid+0x4ac>)
 800141c:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 8001420:	601a      	str	r2, [r3, #0]
		}

		pid_roll_p  = kp_roll * pid_roll_error;
 8001422:	4b68      	ldr	r3, [pc, #416]	@ (80015c4 <calculate_pid+0x4b8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fc10 	bl	8000c4c <__aeabi_i2f>
 800142c:	4602      	mov	r2, r0
 800142e:	4b66      	ldr	r3, [pc, #408]	@ (80015c8 <calculate_pid+0x4bc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	4610      	mov	r0, r2
 8001436:	f7ff fc5d 	bl	8000cf4 <__aeabi_fmul>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b63      	ldr	r3, [pc, #396]	@ (80015cc <calculate_pid+0x4c0>)
 8001440:	601a      	str	r2, [r3, #0]
		pid_pitch_p = kp_pitch * pid_pitch_error;
 8001442:	4b63      	ldr	r3, [pc, #396]	@ (80015d0 <calculate_pid+0x4c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fc00 	bl	8000c4c <__aeabi_i2f>
 800144c:	4602      	mov	r2, r0
 800144e:	4b61      	ldr	r3, [pc, #388]	@ (80015d4 <calculate_pid+0x4c8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	4610      	mov	r0, r2
 8001456:	f7ff fc4d 	bl	8000cf4 <__aeabi_fmul>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	4b5e      	ldr	r3, [pc, #376]	@ (80015d8 <calculate_pid+0x4cc>)
 8001460:	601a      	str	r2, [r3, #0]
		pid_yaw_p   = kp_yaw * pid_yaw_error;
 8001462:	4b50      	ldr	r3, [pc, #320]	@ (80015a4 <calculate_pid+0x498>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fbf0 	bl	8000c4c <__aeabi_i2f>
 800146c:	4602      	mov	r2, r0
 800146e:	4b4e      	ldr	r3, [pc, #312]	@ (80015a8 <calculate_pid+0x49c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4619      	mov	r1, r3
 8001474:	4610      	mov	r0, r2
 8001476:	f7ff fc3d 	bl	8000cf4 <__aeabi_fmul>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	4b57      	ldr	r3, [pc, #348]	@ (80015dc <calculate_pid+0x4d0>)
 8001480:	601a      	str	r2, [r3, #0]


	   float old_pid_roll_i = pid_roll_i;
 8001482:	4b57      	ldr	r3, [pc, #348]	@ (80015e0 <calculate_pid+0x4d4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	607b      	str	r3, [r7, #4]
	   pid_roll_i = pid_roll_i+(ki_roll*pid_roll_error);
 8001488:	4b4e      	ldr	r3, [pc, #312]	@ (80015c4 <calculate_pid+0x4b8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fbdd 	bl	8000c4c <__aeabi_i2f>
 8001492:	4602      	mov	r2, r0
 8001494:	4b53      	ldr	r3, [pc, #332]	@ (80015e4 <calculate_pid+0x4d8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	4610      	mov	r0, r2
 800149c:	f7ff fc2a 	bl	8000cf4 <__aeabi_fmul>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b4e      	ldr	r3, [pc, #312]	@ (80015e0 <calculate_pid+0x4d4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4610      	mov	r0, r2
 80014ac:	f7ff fb1a 	bl	8000ae4 <__addsf3>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b4a      	ldr	r3, [pc, #296]	@ (80015e0 <calculate_pid+0x4d4>)
 80014b6:	601a      	str	r2, [r3, #0]
	   if(pid_roll_i > 0)
 80014b8:	4b49      	ldr	r3, [pc, #292]	@ (80015e0 <calculate_pid+0x4d4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f04f 0100 	mov.w	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fdd3 	bl	800106c <__aeabi_fcmpgt>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d017      	beq.n	80014fc <calculate_pid+0x3f0>
	   {
		   if((throtle + pid_roll_i) > 2000)
 80014cc:	4b46      	ldr	r3, [pc, #280]	@ (80015e8 <calculate_pid+0x4dc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fbb7 	bl	8000c44 <__aeabi_ui2f>
 80014d6:	4602      	mov	r2, r0
 80014d8:	4b41      	ldr	r3, [pc, #260]	@ (80015e0 <calculate_pid+0x4d4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	4610      	mov	r0, r2
 80014e0:	f7ff fb00 	bl	8000ae4 <__addsf3>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4941      	ldr	r1, [pc, #260]	@ (80015ec <calculate_pid+0x4e0>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fdbf 	bl	800106c <__aeabi_fcmpgt>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01a      	beq.n	800152a <calculate_pid+0x41e>
		   {
			   pid_roll_i = old_pid_roll_i;
 80014f4:	4a3a      	ldr	r2, [pc, #232]	@ (80015e0 <calculate_pid+0x4d4>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e016      	b.n	800152a <calculate_pid+0x41e>
		   }
	   }
	   else
	   {
		   if((throtle - pid_roll_i) < 1150)
 80014fc:	4b3a      	ldr	r3, [pc, #232]	@ (80015e8 <calculate_pid+0x4dc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fb9f 	bl	8000c44 <__aeabi_ui2f>
 8001506:	4602      	mov	r2, r0
 8001508:	4b35      	ldr	r3, [pc, #212]	@ (80015e0 <calculate_pid+0x4d4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	4610      	mov	r0, r2
 8001510:	f7ff fae6 	bl	8000ae0 <__aeabi_fsub>
 8001514:	4603      	mov	r3, r0
 8001516:	4936      	ldr	r1, [pc, #216]	@ (80015f0 <calculate_pid+0x4e4>)
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fd89 	bl	8001030 <__aeabi_fcmplt>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <calculate_pid+0x41e>
		   {
			   pid_roll_i = old_pid_roll_i;
 8001524:	4a2e      	ldr	r2, [pc, #184]	@ (80015e0 <calculate_pid+0x4d4>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
		   }
	   }

	   float old_pid_pitch_i = pid_pitch_i;
 800152a:	4b32      	ldr	r3, [pc, #200]	@ (80015f4 <calculate_pid+0x4e8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	603b      	str	r3, [r7, #0]
	   pid_pitch_i = pid_pitch_i+(ki_pitch*pid_pitch_error);
 8001530:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <calculate_pid+0x4c4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fb89 	bl	8000c4c <__aeabi_i2f>
 800153a:	4602      	mov	r2, r0
 800153c:	4b2e      	ldr	r3, [pc, #184]	@ (80015f8 <calculate_pid+0x4ec>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f7ff fbd6 	bl	8000cf4 <__aeabi_fmul>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b29      	ldr	r3, [pc, #164]	@ (80015f4 <calculate_pid+0x4e8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	4610      	mov	r0, r2
 8001554:	f7ff fac6 	bl	8000ae4 <__addsf3>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	4b25      	ldr	r3, [pc, #148]	@ (80015f4 <calculate_pid+0x4e8>)
 800155e:	601a      	str	r2, [r3, #0]

	   if(pid_pitch_i > 0)
 8001560:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <calculate_pid+0x4e8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f04f 0100 	mov.w	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fd7f 	bl	800106c <__aeabi_fcmpgt>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d043      	beq.n	80015fc <calculate_pid+0x4f0>
	   {
		   if((throtle + pid_pitch_i) > 2000)
 8001574:	4b1c      	ldr	r3, [pc, #112]	@ (80015e8 <calculate_pid+0x4dc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fb63 	bl	8000c44 <__aeabi_ui2f>
 800157e:	4602      	mov	r2, r0
 8001580:	4b1c      	ldr	r3, [pc, #112]	@ (80015f4 <calculate_pid+0x4e8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	4610      	mov	r0, r2
 8001588:	f7ff faac 	bl	8000ae4 <__addsf3>
 800158c:	4603      	mov	r3, r0
 800158e:	4917      	ldr	r1, [pc, #92]	@ (80015ec <calculate_pid+0x4e0>)
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fd6b 	bl	800106c <__aeabi_fcmpgt>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d046      	beq.n	800162a <calculate_pid+0x51e>
		   {
				pid_pitch_i = old_pid_pitch_i;
 800159c:	4a15      	ldr	r2, [pc, #84]	@ (80015f4 <calculate_pid+0x4e8>)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e042      	b.n	800162a <calculate_pid+0x51e>
 80015a4:	20000138 	.word	0x20000138
 80015a8:	20000018 	.word	0x20000018
 80015ac:	3ecccccd 	.word	0x3ecccccd
 80015b0:	2000001c 	.word	0x2000001c
 80015b4:	3ba3d70a 	.word	0x3ba3d70a
 80015b8:	20000020 	.word	0x20000020
 80015bc:	3e4ccccd 	.word	0x3e4ccccd
 80015c0:	3f0ccccd 	.word	0x3f0ccccd
 80015c4:	20000128 	.word	0x20000128
 80015c8:	20000000 	.word	0x20000000
 80015cc:	200000f8 	.word	0x200000f8
 80015d0:	20000130 	.word	0x20000130
 80015d4:	2000000c 	.word	0x2000000c
 80015d8:	20000108 	.word	0x20000108
 80015dc:	20000118 	.word	0x20000118
 80015e0:	200000fc 	.word	0x200000fc
 80015e4:	20000004 	.word	0x20000004
 80015e8:	20000024 	.word	0x20000024
 80015ec:	44fa0000 	.word	0x44fa0000
 80015f0:	448fc000 	.word	0x448fc000
 80015f4:	2000010c 	.word	0x2000010c
 80015f8:	20000010 	.word	0x20000010
		   }
	   }
	   else
	   {
		   if((throtle - pid_pitch_i) < 1150)
 80015fc:	4b81      	ldr	r3, [pc, #516]	@ (8001804 <calculate_pid+0x6f8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fb1f 	bl	8000c44 <__aeabi_ui2f>
 8001606:	4602      	mov	r2, r0
 8001608:	4b7f      	ldr	r3, [pc, #508]	@ (8001808 <calculate_pid+0x6fc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	4610      	mov	r0, r2
 8001610:	f7ff fa66 	bl	8000ae0 <__aeabi_fsub>
 8001614:	4603      	mov	r3, r0
 8001616:	497d      	ldr	r1, [pc, #500]	@ (800180c <calculate_pid+0x700>)
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fd09 	bl	8001030 <__aeabi_fcmplt>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <calculate_pid+0x51e>
		   {
				pid_pitch_i = old_pid_pitch_i;
 8001624:	4a78      	ldr	r2, [pc, #480]	@ (8001808 <calculate_pid+0x6fc>)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	6013      	str	r3, [r2, #0]
		   }
	   }

	   pid_yaw_i = pid_yaw_i+(ki_yaw*pid_yaw_error);
 800162a:	4b79      	ldr	r3, [pc, #484]	@ (8001810 <calculate_pid+0x704>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fb0c 	bl	8000c4c <__aeabi_i2f>
 8001634:	4602      	mov	r2, r0
 8001636:	4b77      	ldr	r3, [pc, #476]	@ (8001814 <calculate_pid+0x708>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4619      	mov	r1, r3
 800163c:	4610      	mov	r0, r2
 800163e:	f7ff fb59 	bl	8000cf4 <__aeabi_fmul>
 8001642:	4603      	mov	r3, r0
 8001644:	461a      	mov	r2, r3
 8001646:	4b74      	ldr	r3, [pc, #464]	@ (8001818 <calculate_pid+0x70c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4619      	mov	r1, r3
 800164c:	4610      	mov	r0, r2
 800164e:	f7ff fa49 	bl	8000ae4 <__addsf3>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	4b70      	ldr	r3, [pc, #448]	@ (8001818 <calculate_pid+0x70c>)
 8001658:	601a      	str	r2, [r3, #0]


		pid_roll_d = ki_roll*((pid_roll_error - pid_roll_previous_error)/dt);
 800165a:	4b70      	ldr	r3, [pc, #448]	@ (800181c <calculate_pid+0x710>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b70      	ldr	r3, [pc, #448]	@ (8001820 <calculate_pid+0x714>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff faf1 	bl	8000c4c <__aeabi_i2f>
 800166a:	4602      	mov	r2, r0
 800166c:	4b6d      	ldr	r3, [pc, #436]	@ (8001824 <calculate_pid+0x718>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	4610      	mov	r0, r2
 8001674:	f7ff fbf2 	bl	8000e5c <__aeabi_fdiv>
 8001678:	4603      	mov	r3, r0
 800167a:	461a      	mov	r2, r3
 800167c:	4b6a      	ldr	r3, [pc, #424]	@ (8001828 <calculate_pid+0x71c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f7ff fb36 	bl	8000cf4 <__aeabi_fmul>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	4b67      	ldr	r3, [pc, #412]	@ (800182c <calculate_pid+0x720>)
 800168e:	601a      	str	r2, [r3, #0]
		pid_pitch_d = ki_pitch*((pid_pitch_error - pid_pitch_previous_error)/dt);
 8001690:	4b67      	ldr	r3, [pc, #412]	@ (8001830 <calculate_pid+0x724>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b67      	ldr	r3, [pc, #412]	@ (8001834 <calculate_pid+0x728>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fad6 	bl	8000c4c <__aeabi_i2f>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4b60      	ldr	r3, [pc, #384]	@ (8001824 <calculate_pid+0x718>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4619      	mov	r1, r3
 80016a8:	4610      	mov	r0, r2
 80016aa:	f7ff fbd7 	bl	8000e5c <__aeabi_fdiv>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b61      	ldr	r3, [pc, #388]	@ (8001838 <calculate_pid+0x72c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f7ff fb1b 	bl	8000cf4 <__aeabi_fmul>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b5e      	ldr	r3, [pc, #376]	@ (800183c <calculate_pid+0x730>)
 80016c4:	601a      	str	r2, [r3, #0]
		pid_yaw_d = ki_yaw*((pid_yaw_error - pid_yaw_previous_error)/dt);
 80016c6:	4b52      	ldr	r3, [pc, #328]	@ (8001810 <calculate_pid+0x704>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001840 <calculate_pid+0x734>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fabb 	bl	8000c4c <__aeabi_i2f>
 80016d6:	4602      	mov	r2, r0
 80016d8:	4b52      	ldr	r3, [pc, #328]	@ (8001824 <calculate_pid+0x718>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	4610      	mov	r0, r2
 80016e0:	f7ff fbbc 	bl	8000e5c <__aeabi_fdiv>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <calculate_pid+0x708>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	4610      	mov	r0, r2
 80016f0:	f7ff fb00 	bl	8000cf4 <__aeabi_fmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b52      	ldr	r3, [pc, #328]	@ (8001844 <calculate_pid+0x738>)
 80016fa:	601a      	str	r2, [r3, #0]


		pid_roll  = pid_roll_p + pid_roll_i + pid_roll_d;
 80016fc:	4b52      	ldr	r3, [pc, #328]	@ (8001848 <calculate_pid+0x73c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a52      	ldr	r2, [pc, #328]	@ (800184c <calculate_pid+0x740>)
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f9ec 	bl	8000ae4 <__addsf3>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	4b46      	ldr	r3, [pc, #280]	@ (800182c <calculate_pid+0x720>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	4610      	mov	r0, r2
 8001718:	f7ff f9e4 	bl	8000ae4 <__addsf3>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	4b4b      	ldr	r3, [pc, #300]	@ (8001850 <calculate_pid+0x744>)
 8001722:	601a      	str	r2, [r3, #0]
		pid_pitch = pid_pitch_p + pid_pitch_i + pid_pitch_d;
 8001724:	4b4b      	ldr	r3, [pc, #300]	@ (8001854 <calculate_pid+0x748>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a37      	ldr	r2, [pc, #220]	@ (8001808 <calculate_pid+0x6fc>)
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff f9d8 	bl	8000ae4 <__addsf3>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	4b40      	ldr	r3, [pc, #256]	@ (800183c <calculate_pid+0x730>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	4610      	mov	r0, r2
 8001740:	f7ff f9d0 	bl	8000ae4 <__addsf3>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	4b43      	ldr	r3, [pc, #268]	@ (8001858 <calculate_pid+0x74c>)
 800174a:	601a      	str	r2, [r3, #0]
		pid_yaw   = pid_yaw_p + pid_yaw_i + pid_yaw_d;
 800174c:	4b43      	ldr	r3, [pc, #268]	@ (800185c <calculate_pid+0x750>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a31      	ldr	r2, [pc, #196]	@ (8001818 <calculate_pid+0x70c>)
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f9c4 	bl	8000ae4 <__addsf3>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	4b38      	ldr	r3, [pc, #224]	@ (8001844 <calculate_pid+0x738>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	4610      	mov	r0, r2
 8001768:	f7ff f9bc 	bl	8000ae4 <__addsf3>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	4b3b      	ldr	r3, [pc, #236]	@ (8001860 <calculate_pid+0x754>)
 8001772:	601a      	str	r2, [r3, #0]

		pid_roll_previous_error = pid_roll_error;
 8001774:	4b29      	ldr	r3, [pc, #164]	@ (800181c <calculate_pid+0x710>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a29      	ldr	r2, [pc, #164]	@ (8001820 <calculate_pid+0x714>)
 800177a:	6013      	str	r3, [r2, #0]
		pid_pitch_previous_error = pid_pitch_error;
 800177c:	4b2c      	ldr	r3, [pc, #176]	@ (8001830 <calculate_pid+0x724>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a2c      	ldr	r2, [pc, #176]	@ (8001834 <calculate_pid+0x728>)
 8001782:	6013      	str	r3, [r2, #0]
		pid_yaw_previous_error = pid_yaw_error;
 8001784:	4b22      	ldr	r3, [pc, #136]	@ (8001810 <calculate_pid+0x704>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a2d      	ldr	r2, [pc, #180]	@ (8001840 <calculate_pid+0x734>)
 800178a:	6013      	str	r3, [r2, #0]

		pid_yaw_p = 0;
		pid_yaw_i = 0;
		pid_yaw_d = 0;
	}
}
 800178c:	e035      	b.n	80017fa <calculate_pid+0x6ee>
		pid_roll_error  = 0;
 800178e:	4b23      	ldr	r3, [pc, #140]	@ (800181c <calculate_pid+0x710>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
		pid_pitch_error = 0;
 8001794:	4b26      	ldr	r3, [pc, #152]	@ (8001830 <calculate_pid+0x724>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
		pid_yaw_error   = 0;
 800179a:	4b1d      	ldr	r3, [pc, #116]	@ (8001810 <calculate_pid+0x704>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
		pid_roll_previous_error = 0;
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <calculate_pid+0x714>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
		pid_pitch_previous_error = 0;
 80017a6:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <calculate_pid+0x728>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
		pid_yaw_previous_error = 0;
 80017ac:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <calculate_pid+0x734>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
		pid_roll_p = 0;
 80017b2:	4b25      	ldr	r3, [pc, #148]	@ (8001848 <calculate_pid+0x73c>)
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
		pid_roll_i = 0;
 80017ba:	4b24      	ldr	r3, [pc, #144]	@ (800184c <calculate_pid+0x740>)
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
		pid_roll_d = 0;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <calculate_pid+0x720>)
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
		pid_pitch_p = 0;
 80017ca:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <calculate_pid+0x748>)
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
		pid_pitch_i = 0;
 80017d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <calculate_pid+0x6fc>)
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
		pid_pitch_d = 0;
 80017da:	4b18      	ldr	r3, [pc, #96]	@ (800183c <calculate_pid+0x730>)
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
		pid_yaw_p = 0;
 80017e2:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <calculate_pid+0x750>)
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
		pid_yaw_i = 0;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <calculate_pid+0x70c>)
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
		pid_yaw_d = 0;
 80017f2:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <calculate_pid+0x738>)
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000024 	.word	0x20000024
 8001808:	2000010c 	.word	0x2000010c
 800180c:	448fc000 	.word	0x448fc000
 8001810:	20000138 	.word	0x20000138
 8001814:	2000001c 	.word	0x2000001c
 8001818:	2000011c 	.word	0x2000011c
 800181c:	20000128 	.word	0x20000128
 8001820:	20000124 	.word	0x20000124
 8001824:	200000e0 	.word	0x200000e0
 8001828:	20000004 	.word	0x20000004
 800182c:	20000100 	.word	0x20000100
 8001830:	20000130 	.word	0x20000130
 8001834:	2000012c 	.word	0x2000012c
 8001838:	20000010 	.word	0x20000010
 800183c:	20000110 	.word	0x20000110
 8001840:	20000134 	.word	0x20000134
 8001844:	20000120 	.word	0x20000120
 8001848:	200000f8 	.word	0x200000f8
 800184c:	200000fc 	.word	0x200000fc
 8001850:	200000f4 	.word	0x200000f4
 8001854:	20000108 	.word	0x20000108
 8001858:	20000104 	.word	0x20000104
 800185c:	20000118 	.word	0x20000118
 8001860:	20000114 	.word	0x20000114

08001864 <SetBrushMotor>:


void SetBrushMotor()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  if(throtle > 1050)
 8001868:	4b74      	ldr	r3, [pc, #464]	@ (8001a3c <SetBrushMotor+0x1d8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001870:	4293      	cmp	r3, r2
 8001872:	f240 80bd 	bls.w	80019f0 <SetBrushMotor+0x18c>
  {
	  if(m1 <= 2000)
 8001876:	4b72      	ldr	r3, [pc, #456]	@ (8001a40 <SetBrushMotor+0x1dc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800187e:	d825      	bhi.n	80018cc <SetBrushMotor+0x68>
	  {
		m1 = throtle + pid_roll - pid_pitch;// + pid_yaw;
 8001880:	4b6e      	ldr	r3, [pc, #440]	@ (8001a3c <SetBrushMotor+0x1d8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff f9dd 	bl	8000c44 <__aeabi_ui2f>
 800188a:	4602      	mov	r2, r0
 800188c:	4b6d      	ldr	r3, [pc, #436]	@ (8001a44 <SetBrushMotor+0x1e0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f7ff f926 	bl	8000ae4 <__addsf3>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a48 <SetBrushMotor+0x1e4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	4610      	mov	r0, r2
 80018a4:	f7ff f91c 	bl	8000ae0 <__aeabi_fsub>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fc0e 	bl	80010cc <__aeabi_f2uiz>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4a63      	ldr	r2, [pc, #396]	@ (8001a40 <SetBrushMotor+0x1dc>)
 80018b4:	6013      	str	r3, [r2, #0]
		if(m1 < 1050)
 80018b6:	4b62      	ldr	r3, [pc, #392]	@ (8001a40 <SetBrushMotor+0x1dc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f240 4219 	movw	r2, #1049	@ 0x419
 80018be:	4293      	cmp	r3, r2
 80018c0:	d808      	bhi.n	80018d4 <SetBrushMotor+0x70>
		{
			m1 = 1050;
 80018c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a40 <SetBrushMotor+0x1dc>)
 80018c4:	f240 421a 	movw	r2, #1050	@ 0x41a
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e003      	b.n	80018d4 <SetBrushMotor+0x70>
		}
	  }
	  else
	  {
		  m1 = 2000;
 80018cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001a40 <SetBrushMotor+0x1dc>)
 80018ce:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80018d2:	601a      	str	r2, [r3, #0]
	  }

	  if(m2 <= 2000)
 80018d4:	4b5d      	ldr	r3, [pc, #372]	@ (8001a4c <SetBrushMotor+0x1e8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80018dc:	d825      	bhi.n	800192a <SetBrushMotor+0xc6>
	  {
		m2 = throtle + pid_roll + pid_pitch;// - pid_yaw;
 80018de:	4b57      	ldr	r3, [pc, #348]	@ (8001a3c <SetBrushMotor+0x1d8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f9ae 	bl	8000c44 <__aeabi_ui2f>
 80018e8:	4602      	mov	r2, r0
 80018ea:	4b56      	ldr	r3, [pc, #344]	@ (8001a44 <SetBrushMotor+0x1e0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f7ff f8f7 	bl	8000ae4 <__addsf3>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b53      	ldr	r3, [pc, #332]	@ (8001a48 <SetBrushMotor+0x1e4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4619      	mov	r1, r3
 8001900:	4610      	mov	r0, r2
 8001902:	f7ff f8ef 	bl	8000ae4 <__addsf3>
 8001906:	4603      	mov	r3, r0
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fbdf 	bl	80010cc <__aeabi_f2uiz>
 800190e:	4603      	mov	r3, r0
 8001910:	4a4e      	ldr	r2, [pc, #312]	@ (8001a4c <SetBrushMotor+0x1e8>)
 8001912:	6013      	str	r3, [r2, #0]
		if(m2 < 1050)
 8001914:	4b4d      	ldr	r3, [pc, #308]	@ (8001a4c <SetBrushMotor+0x1e8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f240 4219 	movw	r2, #1049	@ 0x419
 800191c:	4293      	cmp	r3, r2
 800191e:	d808      	bhi.n	8001932 <SetBrushMotor+0xce>
		{
			m2 = 1050;
 8001920:	4b4a      	ldr	r3, [pc, #296]	@ (8001a4c <SetBrushMotor+0x1e8>)
 8001922:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	e003      	b.n	8001932 <SetBrushMotor+0xce>
		}
	  }
	  else
	  {
		  m2 = 2000;
 800192a:	4b48      	ldr	r3, [pc, #288]	@ (8001a4c <SetBrushMotor+0x1e8>)
 800192c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001930:	601a      	str	r2, [r3, #0]
	  }

	  if(m3 <= 2000)
 8001932:	4b47      	ldr	r3, [pc, #284]	@ (8001a50 <SetBrushMotor+0x1ec>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800193a:	d825      	bhi.n	8001988 <SetBrushMotor+0x124>
	  {
		m3 = throtle - pid_roll + pid_pitch;// - pid_yaw;;
 800193c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a3c <SetBrushMotor+0x1d8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff f97f 	bl	8000c44 <__aeabi_ui2f>
 8001946:	4602      	mov	r2, r0
 8001948:	4b3e      	ldr	r3, [pc, #248]	@ (8001a44 <SetBrushMotor+0x1e0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	4610      	mov	r0, r2
 8001950:	f7ff f8c6 	bl	8000ae0 <__aeabi_fsub>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4b3b      	ldr	r3, [pc, #236]	@ (8001a48 <SetBrushMotor+0x1e4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	4610      	mov	r0, r2
 8001960:	f7ff f8c0 	bl	8000ae4 <__addsf3>
 8001964:	4603      	mov	r3, r0
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fbb0 	bl	80010cc <__aeabi_f2uiz>
 800196c:	4603      	mov	r3, r0
 800196e:	4a38      	ldr	r2, [pc, #224]	@ (8001a50 <SetBrushMotor+0x1ec>)
 8001970:	6013      	str	r3, [r2, #0]
		if(m3 < 1050)
 8001972:	4b37      	ldr	r3, [pc, #220]	@ (8001a50 <SetBrushMotor+0x1ec>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f240 4219 	movw	r2, #1049	@ 0x419
 800197a:	4293      	cmp	r3, r2
 800197c:	d808      	bhi.n	8001990 <SetBrushMotor+0x12c>
		{
			m3 = 1050;
 800197e:	4b34      	ldr	r3, [pc, #208]	@ (8001a50 <SetBrushMotor+0x1ec>)
 8001980:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e003      	b.n	8001990 <SetBrushMotor+0x12c>
		}
	  }
	  else
	  {
		  m3 = 2000;
 8001988:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <SetBrushMotor+0x1ec>)
 800198a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800198e:	601a      	str	r2, [r3, #0]
	  }

	  if(m4 <= 2000)
 8001990:	4b30      	ldr	r3, [pc, #192]	@ (8001a54 <SetBrushMotor+0x1f0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001998:	d825      	bhi.n	80019e6 <SetBrushMotor+0x182>
	  {
		m4 = throtle - pid_roll - pid_pitch;// + pid_yaw;
 800199a:	4b28      	ldr	r3, [pc, #160]	@ (8001a3c <SetBrushMotor+0x1d8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f950 	bl	8000c44 <__aeabi_ui2f>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b27      	ldr	r3, [pc, #156]	@ (8001a44 <SetBrushMotor+0x1e0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4619      	mov	r1, r3
 80019ac:	4610      	mov	r0, r2
 80019ae:	f7ff f897 	bl	8000ae0 <__aeabi_fsub>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b24      	ldr	r3, [pc, #144]	@ (8001a48 <SetBrushMotor+0x1e4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4619      	mov	r1, r3
 80019bc:	4610      	mov	r0, r2
 80019be:	f7ff f88f 	bl	8000ae0 <__aeabi_fsub>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fb81 	bl	80010cc <__aeabi_f2uiz>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a21      	ldr	r2, [pc, #132]	@ (8001a54 <SetBrushMotor+0x1f0>)
 80019ce:	6013      	str	r3, [r2, #0]
		if(m4 < 1050)
 80019d0:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <SetBrushMotor+0x1f0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f240 4219 	movw	r2, #1049	@ 0x419
 80019d8:	4293      	cmp	r3, r2
 80019da:	d819      	bhi.n	8001a10 <SetBrushMotor+0x1ac>
		{
			m4 = 1050;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <SetBrushMotor+0x1f0>)
 80019de:	f240 421a 	movw	r2, #1050	@ 0x41a
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e014      	b.n	8001a10 <SetBrushMotor+0x1ac>
		}
	  }
	  else
	  {
		  m4 = 2000;
 80019e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <SetBrushMotor+0x1f0>)
 80019e8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e00f      	b.n	8001a10 <SetBrushMotor+0x1ac>

  }

  else
  {
	  m1 = 1050;
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <SetBrushMotor+0x1dc>)
 80019f2:	f240 421a 	movw	r2, #1050	@ 0x41a
 80019f6:	601a      	str	r2, [r3, #0]
	  m2 = 1050;
 80019f8:	4b14      	ldr	r3, [pc, #80]	@ (8001a4c <SetBrushMotor+0x1e8>)
 80019fa:	f240 421a 	movw	r2, #1050	@ 0x41a
 80019fe:	601a      	str	r2, [r3, #0]
	  m3 = 1050;
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <SetBrushMotor+0x1ec>)
 8001a02:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001a06:	601a      	str	r2, [r3, #0]
	  m4 = 1050;
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <SetBrushMotor+0x1f0>)
 8001a0a:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001a0e:	601a      	str	r2, [r3, #0]

  }

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, m1);
 8001a10:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <SetBrushMotor+0x1f4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <SetBrushMotor+0x1dc>)
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, m2);
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <SetBrushMotor+0x1f4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <SetBrushMotor+0x1e8>)
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, m3);
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <SetBrushMotor+0x1f4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <SetBrushMotor+0x1ec>)
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, m4);
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <SetBrushMotor+0x1f4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a08      	ldr	r2, [pc, #32]	@ (8001a54 <SetBrushMotor+0x1f0>)
 8001a34:	6812      	ldr	r2, [r2, #0]
 8001a36:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000024 	.word	0x20000024
 8001a40:	20000140 	.word	0x20000140
 8001a44:	200000f4 	.word	0x200000f4
 8001a48:	20000104 	.word	0x20000104
 8001a4c:	20000144 	.word	0x20000144
 8001a50:	20000148 	.word	0x20000148
 8001a54:	2000014c 	.word	0x2000014c
 8001a58:	200001ec 	.word	0x200001ec

08001a5c <MPU9250_Init>:

void MPU9250_Init(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af04      	add	r7, sp, #16
    uint8_t data;

    // Wake up MPU9250 and set clock source
    data = 0x01;
 8001a62:	2301      	movs	r3, #1
 8001a64:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, MPU9250_PWR_MGMT_1, 1, &data, 1, 1000);
 8001a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6a:	9302      	str	r3, [sp, #8]
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	1dfb      	adds	r3, r7, #7
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2301      	movs	r3, #1
 8001a76:	226b      	movs	r2, #107	@ 0x6b
 8001a78:	21d0      	movs	r1, #208	@ 0xd0
 8001a7a:	4821      	ldr	r0, [pc, #132]	@ (8001b00 <MPU9250_Init+0xa4>)
 8001a7c:	f001 fdb6 	bl	80035ec <HAL_I2C_Mem_Write>

    // Configure DLPF for gyro to 5Hz
    data = DLPF_CFG_5HZ;
 8001a80:	2306      	movs	r3, #6
 8001a82:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, MPU9250_CONFIG, 1, &data, 1, 1000);
 8001a84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a88:	9302      	str	r3, [sp, #8]
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	1dfb      	adds	r3, r7, #7
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2301      	movs	r3, #1
 8001a94:	221a      	movs	r2, #26
 8001a96:	21d0      	movs	r1, #208	@ 0xd0
 8001a98:	4819      	ldr	r0, [pc, #100]	@ (8001b00 <MPU9250_Init+0xa4>)
 8001a9a:	f001 fda7 	bl	80035ec <HAL_I2C_Mem_Write>

    // Set gyro full scale to ±250dps for lowest noise
    data = GYRO_FS_SEL_250DPS;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, MPU9250_GYRO_CONFIG, 1, &data, 1, 1000);
 8001aa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	1dfb      	adds	r3, r7, #7
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	221b      	movs	r2, #27
 8001ab4:	21d0      	movs	r1, #208	@ 0xd0
 8001ab6:	4812      	ldr	r0, [pc, #72]	@ (8001b00 <MPU9250_Init+0xa4>)
 8001ab8:	f001 fd98 	bl	80035ec <HAL_I2C_Mem_Write>

    // Set accel full scale to ±2g for lowest noise
    data = ACCEL_FS_SEL_2G;
 8001abc:	2300      	movs	r3, #0
 8001abe:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, MPU9250_ACCEL_CONFIG, 1, &data, 1, 1000);
 8001ac0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	1dfb      	adds	r3, r7, #7
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	221c      	movs	r2, #28
 8001ad2:	21d0      	movs	r1, #208	@ 0xd0
 8001ad4:	480a      	ldr	r0, [pc, #40]	@ (8001b00 <MPU9250_Init+0xa4>)
 8001ad6:	f001 fd89 	bl	80035ec <HAL_I2C_Mem_Write>

    // Configure DLPF for accel to 5Hz
    data = ACCEL_DLPF_CFG_5HZ;
 8001ada:	2306      	movs	r3, #6
 8001adc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, MPU9250_ACCEL_CONFIG_2, 1, &data, 1, 1000);
 8001ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ae2:	9302      	str	r3, [sp, #8]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	1dfb      	adds	r3, r7, #7
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2301      	movs	r3, #1
 8001aee:	221d      	movs	r2, #29
 8001af0:	21d0      	movs	r1, #208	@ 0xd0
 8001af2:	4803      	ldr	r0, [pc, #12]	@ (8001b00 <MPU9250_Init+0xa4>)
 8001af4:	f001 fd7a 	bl	80035ec <HAL_I2C_Mem_Write>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000198 	.word	0x20000198

08001b04 <MPU9250_Read_Accel>:


void MPU9250_Read_Accel(int16_t *Accel_X, int16_t *Accel_Y, int16_t *Accel_Z) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	@ 0x28
 8001b08:	af04      	add	r7, sp, #16
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
    uint8_t Rec_Data[6];

    // Read 6 bytes of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, MPU9250_ACCEL_XOUT_H, 1, Rec_Data, 6, 1000);
 8001b10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b14:	9302      	str	r3, [sp, #8]
 8001b16:	2306      	movs	r3, #6
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	223b      	movs	r2, #59	@ 0x3b
 8001b24:	21d0      	movs	r1, #208	@ 0xd0
 8001b26:	4811      	ldr	r0, [pc, #68]	@ (8001b6c <MPU9250_Read_Accel+0x68>)
 8001b28:	f001 fe5a 	bl	80037e0 <HAL_I2C_Mem_Read>

    // Convert the received data into 16-bit values
    *Accel_X = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001b2c:	7c3b      	ldrb	r3, [r7, #16]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	7c7b      	ldrb	r3, [r7, #17]
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	801a      	strh	r2, [r3, #0]
    *Accel_Y = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001b3e:	7cbb      	ldrb	r3, [r7, #18]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	b21a      	sxth	r2, r3
 8001b44:	7cfb      	ldrb	r3, [r7, #19]
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	801a      	strh	r2, [r3, #0]
    *Accel_Z = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001b50:	7d3b      	ldrb	r3, [r7, #20]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	7d7b      	ldrb	r3, [r7, #21]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	801a      	strh	r2, [r3, #0]
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000198 	.word	0x20000198

08001b70 <MPU9250_Read_Gyro>:


void MPU9250_Read_Gyro(int16_t *Gyro_X, int16_t *Gyro_Y, int16_t *Gyro_Z) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	@ 0x28
 8001b74:	af04      	add	r7, sp, #16
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
    uint8_t Rec_Data[6];

    // Read 6 bytes of data starting from GYRO_XOUT_H register
    HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS, MPU9250_GYRO_XOUT_H, 1, Rec_Data, 6, 1000);
 8001b7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b80:	9302      	str	r3, [sp, #8]
 8001b82:	2306      	movs	r3, #6
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	f107 0310 	add.w	r3, r7, #16
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	2243      	movs	r2, #67	@ 0x43
 8001b90:	21d0      	movs	r1, #208	@ 0xd0
 8001b92:	4811      	ldr	r0, [pc, #68]	@ (8001bd8 <MPU9250_Read_Gyro+0x68>)
 8001b94:	f001 fe24 	bl	80037e0 <HAL_I2C_Mem_Read>

    // Convert the received data into 16-bit values
    *Gyro_X = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001b98:	7c3b      	ldrb	r3, [r7, #16]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	b21a      	sxth	r2, r3
 8001b9e:	7c7b      	ldrb	r3, [r7, #17]
 8001ba0:	b21b      	sxth	r3, r3
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	801a      	strh	r2, [r3, #0]
    *Gyro_Y = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001baa:	7cbb      	ldrb	r3, [r7, #18]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	7cfb      	ldrb	r3, [r7, #19]
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	801a      	strh	r2, [r3, #0]
    *Gyro_Z = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001bbc:	7d3b      	ldrb	r3, [r7, #20]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	b21a      	sxth	r2, r3
 8001bc2:	7d7b      	ldrb	r3, [r7, #21]
 8001bc4:	b21b      	sxth	r3, r3
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b21a      	sxth	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	801a      	strh	r2, [r3, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000198 	.word	0x20000198

08001bdc <MPU9250_EnableInterrupt>:
#define MPU_6050_FIFO 100
uint32_t filter_index = 0;
float Roll_filter_array[MPU_6050_FIFO] = {0}, Pitch_filter_array[MPU_6050_FIFO] = {0}, Yaw_filter_array[MPU_6050_FIFO] = {0};


void MPU9250_EnableInterrupt(void) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af04      	add	r7, sp, #16
    uint8_t data;

    // Configure the INT pin (active high, push-pull, latched until read)
    data = 0x10;
 8001be2:	2310      	movs	r3, #16
 8001be4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, MPU9250_INT_PIN_CFG, 1, &data, 1, 1000);
 8001be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	2301      	movs	r3, #1
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	1dfb      	adds	r3, r7, #7
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	2237      	movs	r2, #55	@ 0x37
 8001bf8:	21d0      	movs	r1, #208	@ 0xd0
 8001bfa:	480b      	ldr	r0, [pc, #44]	@ (8001c28 <MPU9250_EnableInterrupt+0x4c>)
 8001bfc:	f001 fcf6 	bl	80035ec <HAL_I2C_Mem_Write>

    // Enable the data ready interrupt
    data = MPU9250_INT_DATA_RDY_BIT;
 8001c00:	2301      	movs	r3, #1
 8001c02:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDRESS, MPU9250_INT_ENABLE, 1, &data, 1, 1000);
 8001c04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c08:	9302      	str	r3, [sp, #8]
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2301      	movs	r3, #1
 8001c14:	2238      	movs	r2, #56	@ 0x38
 8001c16:	21d0      	movs	r1, #208	@ 0xd0
 8001c18:	4803      	ldr	r0, [pc, #12]	@ (8001c28 <MPU9250_EnableInterrupt+0x4c>)
 8001c1a:	f001 fce7 	bl	80035ec <HAL_I2C_Mem_Write>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000198 	.word	0x20000198

08001c2c <finding_value>:

float finding_value(float array[], int length)
{
 8001c2c:	b5b0      	push	{r4, r5, r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
   float min = array[0];
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	61fb      	str	r3, [r7, #28]
   float max = array[0];
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	61bb      	str	r3, [r7, #24]

   uint32_t count_min = 0, count_max = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]

   for(uint8_t i = 1; i < length; i++)
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	e02e      	b.n	8001cae <finding_value+0x82>
   {
	   if (fabs(min) > fabs(array[i]))
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c64:	4619      	mov	r1, r3
 8001c66:	f7ff fa01 	bl	800106c <__aeabi_fcmpgt>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <finding_value+0x50>
	   {
		   min = array[i];
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4413      	add	r3, r2
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	61fb      	str	r3, [r7, #28]
	   }

	   if (fabs(max) < fabs(array[i]))
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c90:	4619      	mov	r1, r3
 8001c92:	f7ff f9cd 	bl	8001030 <__aeabi_fcmplt>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <finding_value+0x7c>
	   {
		   max = array[i];
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	61bb      	str	r3, [r7, #24]
   for(uint8_t i = 1; i < length; i++)
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	3301      	adds	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	dccc      	bgt.n	8001c50 <finding_value+0x24>
	   }
   }

   if((fabs(max) - fabs(min)) < 3)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fbb3 	bl	8000428 <__aeabi_f2d>
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	460d      	mov	r5, r1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fbab 	bl	8000428 <__aeabi_f2d>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	4629      	mov	r1, r5
 8001cda:	f7fe fa45 	bl	8000168 <__aeabi_dsub>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	4b3d      	ldr	r3, [pc, #244]	@ (8001de0 <finding_value+0x1b4>)
 8001cec:	f7fe fe66 	bl	80009bc <__aeabi_dcmplt>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <finding_value+0xce>
   {
       return min;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	e06e      	b.n	8001dd8 <finding_value+0x1ac>
   }
   else
   {
	   for(uint8_t i = 1; i < length; i++)
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	73bb      	strb	r3, [r7, #14]
 8001cfe:	e050      	b.n	8001da2 <finding_value+0x176>
	   {
		   if((fabs(max) - fabs(array[i])) < 3)
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fb8e 	bl	8000428 <__aeabi_f2d>
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	460d      	mov	r5, r1
 8001d10:	7bbb      	ldrb	r3, [r7, #14]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fb82 	bl	8000428 <__aeabi_f2d>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4620      	mov	r0, r4
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	f7fe fa1c 	bl	8000168 <__aeabi_dsub>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <finding_value+0x1b4>)
 8001d3e:	f7fe fe3d 	bl	80009bc <__aeabi_dcmplt>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <finding_value+0x122>
		   {
		       count_max++;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	613b      	str	r3, [r7, #16]
		   }

		   if((fabs(array[i]) - fabs(min)) < 3)
 8001d4e:	7bbb      	ldrb	r3, [r7, #14]
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fb63 	bl	8000428 <__aeabi_f2d>
 8001d62:	4604      	mov	r4, r0
 8001d64:	460d      	mov	r5, r1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fb5b 	bl	8000428 <__aeabi_f2d>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4620      	mov	r0, r4
 8001d78:	4629      	mov	r1, r5
 8001d7a:	f7fe f9f5 	bl	8000168 <__aeabi_dsub>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <finding_value+0x1b4>)
 8001d8c:	f7fe fe16 	bl	80009bc <__aeabi_dcmplt>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <finding_value+0x170>
		   {
			   count_min++;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
	   for(uint8_t i = 1; i < length; i++)
 8001d9c:	7bbb      	ldrb	r3, [r7, #14]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	73bb      	strb	r3, [r7, #14]
 8001da2:	7bbb      	ldrb	r3, [r7, #14]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	dcaa      	bgt.n	8001d00 <finding_value+0xd4>
		   }
	   }

	   if(count_max > count_min)
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d901      	bls.n	8001db6 <finding_value+0x18a>
	   {
            return max;
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	e010      	b.n	8001dd8 <finding_value+0x1ac>
	   }
	   else if (count_max < count_min)
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d201      	bcs.n	8001dc2 <finding_value+0x196>
	   {
            return min;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	e00a      	b.n	8001dd8 <finding_value+0x1ac>
	   }
	   else
	   {
		   return (min+max)/2;
 8001dc2:	69b9      	ldr	r1, [r7, #24]
 8001dc4:	69f8      	ldr	r0, [r7, #28]
 8001dc6:	f7fe fe8d 	bl	8000ae4 <__addsf3>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff f843 	bl	8000e5c <__aeabi_fdiv>
 8001dd6:	4603      	mov	r3, r0
	   }
   }

}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bdb0      	pop	{r4, r5, r7, pc}
 8001de0:	40080000 	.word	0x40080000
 8001de4:	00000000 	.word	0x00000000

08001de8 <Calculate_Roll_Pitch_Yaw_CompFilter>:

void Calculate_Roll_Pitch_Yaw_CompFilter(int16_t Accel_X, int16_t Accel_Y, int16_t Accel_Z,
                                         int16_t Gyro_X, int16_t Gyro_Y, int16_t Gyro_Z,
                                         float *roll, float *pitch, float *yaw, float dt)
{
 8001de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dea:	b08b      	sub	sp, #44	@ 0x2c
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4604      	mov	r4, r0
 8001df0:	4608      	mov	r0, r1
 8001df2:	4611      	mov	r1, r2
 8001df4:	461a      	mov	r2, r3
 8001df6:	4623      	mov	r3, r4
 8001df8:	80fb      	strh	r3, [r7, #6]
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80bb      	strh	r3, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	807b      	strh	r3, [r7, #2]
 8001e02:	4613      	mov	r3, r2
 8001e04:	803b      	strh	r3, [r7, #0]

    // Convert accelerometer readings to g units
    float ax = Accel_X / 16384.0;  // Assuming FS_SEL = ±2g
 8001e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fafa 	bl	8000404 <__aeabi_i2d>
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	4bb4      	ldr	r3, [pc, #720]	@ (80020e8 <Calculate_Roll_Pitch_Yaw_CompFilter+0x300>)
 8001e16:	f7fe fc89 	bl	800072c <__aeabi_ddiv>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4610      	mov	r0, r2
 8001e20:	4619      	mov	r1, r3
 8001e22:	f7fe fe09 	bl	8000a38 <__aeabi_d2f>
 8001e26:	4603      	mov	r3, r0
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
    float ay = Accel_Y / 16384.0;
 8001e2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fae8 	bl	8000404 <__aeabi_i2d>
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	4bab      	ldr	r3, [pc, #684]	@ (80020e8 <Calculate_Roll_Pitch_Yaw_CompFilter+0x300>)
 8001e3a:	f7fe fc77 	bl	800072c <__aeabi_ddiv>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fdf7 	bl	8000a38 <__aeabi_d2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	623b      	str	r3, [r7, #32]
    float az = Accel_Z / 16384.0;
 8001e4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fad6 	bl	8000404 <__aeabi_i2d>
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	4ba2      	ldr	r3, [pc, #648]	@ (80020e8 <Calculate_Roll_Pitch_Yaw_CompFilter+0x300>)
 8001e5e:	f7fe fc65 	bl	800072c <__aeabi_ddiv>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7fe fde5 	bl	8000a38 <__aeabi_d2f>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	61fb      	str	r3, [r7, #28]

    // Convert gyroscope readings to degrees per second
    float gx = Gyro_X / 131.0;  // Assuming FS_SEL = ±250 degrees/s
 8001e72:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fac4 	bl	8000404 <__aeabi_i2d>
 8001e7c:	a392      	add	r3, pc, #584	@ (adr r3, 80020c8 <Calculate_Roll_Pitch_Yaw_CompFilter+0x2e0>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	f7fe fc53 	bl	800072c <__aeabi_ddiv>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f7fe fdd3 	bl	8000a38 <__aeabi_d2f>
 8001e92:	4603      	mov	r3, r0
 8001e94:	61bb      	str	r3, [r7, #24]
    float gy = Gyro_Y / 131.0;
 8001e96:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fab2 	bl	8000404 <__aeabi_i2d>
 8001ea0:	a389      	add	r3, pc, #548	@ (adr r3, 80020c8 <Calculate_Roll_Pitch_Yaw_CompFilter+0x2e0>)
 8001ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea6:	f7fe fc41 	bl	800072c <__aeabi_ddiv>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f7fe fdc1 	bl	8000a38 <__aeabi_d2f>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	617b      	str	r3, [r7, #20]
    float gz = Gyro_Z / 131.0;
 8001eba:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe faa0 	bl	8000404 <__aeabi_i2d>
 8001ec4:	a380      	add	r3, pc, #512	@ (adr r3, 80020c8 <Calculate_Roll_Pitch_Yaw_CompFilter+0x2e0>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe fc2f 	bl	800072c <__aeabi_ddiv>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f7fe fdaf 	bl	8000a38 <__aeabi_d2f>
 8001eda:	4603      	mov	r3, r0
 8001edc:	613b      	str	r3, [r7, #16]

    // Calculate roll and pitch using accelerometer data
    float accel_roll  = atan2(ay, az) * RAD_TO_DEG;
 8001ede:	6a38      	ldr	r0, [r7, #32]
 8001ee0:	f7fe faa2 	bl	8000428 <__aeabi_f2d>
 8001ee4:	4604      	mov	r4, r0
 8001ee6:	460d      	mov	r5, r1
 8001ee8:	69f8      	ldr	r0, [r7, #28]
 8001eea:	f7fe fa9d 	bl	8000428 <__aeabi_f2d>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	f004 fef5 	bl	8006ce4 <atan2>
 8001efa:	a375      	add	r3, pc, #468	@ (adr r3, 80020d0 <Calculate_Roll_Pitch_Yaw_CompFilter+0x2e8>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe faea 	bl	80004d8 <__aeabi_dmul>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f7fe fd94 	bl	8000a38 <__aeabi_d2f>
 8001f10:	4603      	mov	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]
    float accel_pitch = atan2(-ax, sqrt(ay * ay + az * az)) * RAD_TO_DEG;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fa84 	bl	8000428 <__aeabi_f2d>
 8001f20:	4604      	mov	r4, r0
 8001f22:	460d      	mov	r5, r1
 8001f24:	6a39      	ldr	r1, [r7, #32]
 8001f26:	6a38      	ldr	r0, [r7, #32]
 8001f28:	f7fe fee4 	bl	8000cf4 <__aeabi_fmul>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	461e      	mov	r6, r3
 8001f30:	69f9      	ldr	r1, [r7, #28]
 8001f32:	69f8      	ldr	r0, [r7, #28]
 8001f34:	f7fe fede 	bl	8000cf4 <__aeabi_fmul>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4630      	mov	r0, r6
 8001f3e:	f7fe fdd1 	bl	8000ae4 <__addsf3>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fa6f 	bl	8000428 <__aeabi_f2d>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f004 fec9 	bl	8006ce8 <sqrt>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f004 fec1 	bl	8006ce4 <atan2>
 8001f62:	a35b      	add	r3, pc, #364	@ (adr r3, 80020d0 <Calculate_Roll_Pitch_Yaw_CompFilter+0x2e8>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	f7fe fab6 	bl	80004d8 <__aeabi_dmul>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f7fe fd60 	bl	8000a38 <__aeabi_d2f>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60bb      	str	r3, [r7, #8]

    // Integrate gyroscope data to calculate roll, pitch, and yaw
    *roll = 0.98 * (*roll + gx * dt) + 0.02 * accel_roll;
 8001f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f7e:	681c      	ldr	r4, [r3, #0]
 8001f80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f82:	69b8      	ldr	r0, [r7, #24]
 8001f84:	f7fe feb6 	bl	8000cf4 <__aeabi_fmul>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f7fe fda9 	bl	8000ae4 <__addsf3>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fa47 	bl	8000428 <__aeabi_f2d>
 8001f9a:	a34f      	add	r3, pc, #316	@ (adr r3, 80020d8 <Calculate_Roll_Pitch_Yaw_CompFilter+0x2f0>)
 8001f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa0:	f7fe fa9a 	bl	80004d8 <__aeabi_dmul>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4614      	mov	r4, r2
 8001faa:	461d      	mov	r5, r3
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f7fe fa3b 	bl	8000428 <__aeabi_f2d>
 8001fb2:	a34b      	add	r3, pc, #300	@ (adr r3, 80020e0 <Calculate_Roll_Pitch_Yaw_CompFilter+0x2f8>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	f7fe fa8e 	bl	80004d8 <__aeabi_dmul>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	f7fe f8d2 	bl	800016c <__adddf3>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f7fe fd32 	bl	8000a38 <__aeabi_d2f>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fd8:	601a      	str	r2, [r3, #0]
    *pitch = 0.98 * (*pitch + gy * dt) + 0.02 * accel_pitch;
 8001fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fdc:	681c      	ldr	r4, [r3, #0]
 8001fde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001fe0:	6978      	ldr	r0, [r7, #20]
 8001fe2:	f7fe fe87 	bl	8000cf4 <__aeabi_fmul>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7fe fd7a 	bl	8000ae4 <__addsf3>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fa18 	bl	8000428 <__aeabi_f2d>
 8001ff8:	a337      	add	r3, pc, #220	@ (adr r3, 80020d8 <Calculate_Roll_Pitch_Yaw_CompFilter+0x2f0>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	f7fe fa6b 	bl	80004d8 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
 800200a:	68b8      	ldr	r0, [r7, #8]
 800200c:	f7fe fa0c 	bl	8000428 <__aeabi_f2d>
 8002010:	a333      	add	r3, pc, #204	@ (adr r3, 80020e0 <Calculate_Roll_Pitch_Yaw_CompFilter+0x2f8>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe fa5f 	bl	80004d8 <__aeabi_dmul>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4620      	mov	r0, r4
 8002020:	4629      	mov	r1, r5
 8002022:	f7fe f8a3 	bl	800016c <__adddf3>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f7fe fd03 	bl	8000a38 <__aeabi_d2f>
 8002032:	4602      	mov	r2, r0
 8002034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002036:	601a      	str	r2, [r3, #0]
    *yaw += gz * dt;
 8002038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800203a:	681c      	ldr	r4, [r3, #0]
 800203c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800203e:	6938      	ldr	r0, [r7, #16]
 8002040:	f7fe fe58 	bl	8000cf4 <__aeabi_fmul>
 8002044:	4603      	mov	r3, r0
 8002046:	4619      	mov	r1, r3
 8002048:	4620      	mov	r0, r4
 800204a:	f7fe fd4b 	bl	8000ae4 <__addsf3>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002054:	601a      	str	r2, [r3, #0]

    Roll_filter_array[filter_index%MPU_6050_FIFO] = *roll;
 8002056:	4b25      	ldr	r3, [pc, #148]	@ (80020ec <Calculate_Roll_Pitch_Yaw_CompFilter+0x304>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b25      	ldr	r3, [pc, #148]	@ (80020f0 <Calculate_Roll_Pitch_Yaw_CompFilter+0x308>)
 800205c:	fba3 1302 	umull	r1, r3, r3, r2
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	2164      	movs	r1, #100	@ 0x64
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	4921      	ldr	r1, [pc, #132]	@ (80020f4 <Calculate_Roll_Pitch_Yaw_CompFilter+0x30c>)
 8002070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    Pitch_filter_array[filter_index%MPU_6050_FIFO] = *pitch;
 8002074:	4b1d      	ldr	r3, [pc, #116]	@ (80020ec <Calculate_Roll_Pitch_Yaw_CompFilter+0x304>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <Calculate_Roll_Pitch_Yaw_CompFilter+0x308>)
 800207a:	fba3 1302 	umull	r1, r3, r3, r2
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2164      	movs	r1, #100	@ 0x64
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	491a      	ldr	r1, [pc, #104]	@ (80020f8 <Calculate_Roll_Pitch_Yaw_CompFilter+0x310>)
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    Yaw_filter_array[filter_index%MPU_6050_FIFO] = *yaw;
 8002092:	4b16      	ldr	r3, [pc, #88]	@ (80020ec <Calculate_Roll_Pitch_Yaw_CompFilter+0x304>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b16      	ldr	r3, [pc, #88]	@ (80020f0 <Calculate_Roll_Pitch_Yaw_CompFilter+0x308>)
 8002098:	fba3 1302 	umull	r1, r3, r3, r2
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	2164      	movs	r1, #100	@ 0x64
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	4914      	ldr	r1, [pc, #80]	@ (80020fc <Calculate_Roll_Pitch_Yaw_CompFilter+0x314>)
 80020ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    filter_index++;
 80020b0:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <Calculate_Roll_Pitch_Yaw_CompFilter+0x304>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <Calculate_Roll_Pitch_Yaw_CompFilter+0x304>)
 80020b8:	6013      	str	r3, [r2, #0]
}
 80020ba:	bf00      	nop
 80020bc:	372c      	adds	r7, #44	@ 0x2c
 80020be:	46bd      	mov	sp, r7
 80020c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	f3af 8000 	nop.w
 80020c8:	00000000 	.word	0x00000000
 80020cc:	40606000 	.word	0x40606000
 80020d0:	1a63cbb0 	.word	0x1a63cbb0
 80020d4:	404ca5dc 	.word	0x404ca5dc
 80020d8:	f5c28f5c 	.word	0xf5c28f5c
 80020dc:	3fef5c28 	.word	0x3fef5c28
 80020e0:	47ae147b 	.word	0x47ae147b
 80020e4:	3f947ae1 	.word	0x3f947ae1
 80020e8:	40d00000 	.word	0x40d00000
 80020ec:	2000027c 	.word	0x2000027c
 80020f0:	51eb851f 	.word	0x51eb851f
 80020f4:	20000280 	.word	0x20000280
 80020f8:	20000410 	.word	0x20000410
 80020fc:	200005a0 	.word	0x200005a0

08002100 <Validate_Roll_Pitch_Yaw>:
void Validate_Roll_Pitch_Yaw()
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	Roll_filter = finding_value(Roll_filter_array, MPU_6050_FIFO);
 8002104:	2164      	movs	r1, #100	@ 0x64
 8002106:	480b      	ldr	r0, [pc, #44]	@ (8002134 <Validate_Roll_Pitch_Yaw+0x34>)
 8002108:	f7ff fd90 	bl	8001c2c <finding_value>
 800210c:	4603      	mov	r3, r0
 800210e:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <Validate_Roll_Pitch_Yaw+0x38>)
 8002110:	6013      	str	r3, [r2, #0]
	Pitch_filter = finding_value(Pitch_filter_array, MPU_6050_FIFO);
 8002112:	2164      	movs	r1, #100	@ 0x64
 8002114:	4809      	ldr	r0, [pc, #36]	@ (800213c <Validate_Roll_Pitch_Yaw+0x3c>)
 8002116:	f7ff fd89 	bl	8001c2c <finding_value>
 800211a:	4603      	mov	r3, r0
 800211c:	4a08      	ldr	r2, [pc, #32]	@ (8002140 <Validate_Roll_Pitch_Yaw+0x40>)
 800211e:	6013      	str	r3, [r2, #0]
	Yaw_filter = finding_value(Yaw_filter_array, MPU_6050_FIFO);
 8002120:	2164      	movs	r1, #100	@ 0x64
 8002122:	4808      	ldr	r0, [pc, #32]	@ (8002144 <Validate_Roll_Pitch_Yaw+0x44>)
 8002124:	f7ff fd82 	bl	8001c2c <finding_value>
 8002128:	4603      	mov	r3, r0
 800212a:	4a07      	ldr	r2, [pc, #28]	@ (8002148 <Validate_Roll_Pitch_Yaw+0x48>)
 800212c:	6013      	str	r3, [r2, #0]
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000280 	.word	0x20000280
 8002138:	200000cc 	.word	0x200000cc
 800213c:	20000410 	.word	0x20000410
 8002140:	200000d0 	.word	0x200000d0
 8002144:	200005a0 	.word	0x200005a0
 8002148:	200000d4 	.word	0x200000d4

0800214c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800214c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800214e:	b089      	sub	sp, #36	@ 0x24
 8002150:	af06      	add	r7, sp, #24
 8002152:	4603      	mov	r3, r0
 8002154:	80fb      	strh	r3, [r7, #6]
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);;
 8002156:	2028      	movs	r0, #40	@ 0x28
 8002158:	f000 fe9b 	bl	8002e92 <HAL_NVIC_DisableIRQ>
    if (GPIO_Pin == MPU9250_INT_Pin) {
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002162:	d148      	bne.n	80021f6 <HAL_GPIO_EXTI_Callback+0xaa>

        dt = (curr_time - prev_time) / 1000.0;  // Calculate delta time in seconds
 8002164:	4b26      	ldr	r3, [pc, #152]	@ (8002200 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b26      	ldr	r3, [pc, #152]	@ (8002204 <HAL_GPIO_EXTI_Callback+0xb8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f938 	bl	80003e4 <__aeabi_ui2d>
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	4b23      	ldr	r3, [pc, #140]	@ (8002208 <HAL_GPIO_EXTI_Callback+0xbc>)
 800217a:	f7fe fad7 	bl	800072c <__aeabi_ddiv>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f7fe fc57 	bl	8000a38 <__aeabi_d2f>
 800218a:	4603      	mov	r3, r0
 800218c:	4a1f      	ldr	r2, [pc, #124]	@ (800220c <HAL_GPIO_EXTI_Callback+0xc0>)
 800218e:	6013      	str	r3, [r2, #0]
        prev_time = curr_time;
 8002190:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1b      	ldr	r2, [pc, #108]	@ (8002204 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002196:	6013      	str	r3, [r2, #0]

        // Read accelerometer and gyroscope data
        MPU9250_Read_Accel(&Accel_X, &Accel_Y, &Accel_Z);
 8002198:	4a1d      	ldr	r2, [pc, #116]	@ (8002210 <HAL_GPIO_EXTI_Callback+0xc4>)
 800219a:	491e      	ldr	r1, [pc, #120]	@ (8002214 <HAL_GPIO_EXTI_Callback+0xc8>)
 800219c:	481e      	ldr	r0, [pc, #120]	@ (8002218 <HAL_GPIO_EXTI_Callback+0xcc>)
 800219e:	f7ff fcb1 	bl	8001b04 <MPU9250_Read_Accel>
        MPU9250_Read_Gyro(&Gyro_X, &Gyro_Y, &Gyro_Z);
 80021a2:	4a1e      	ldr	r2, [pc, #120]	@ (800221c <HAL_GPIO_EXTI_Callback+0xd0>)
 80021a4:	491e      	ldr	r1, [pc, #120]	@ (8002220 <HAL_GPIO_EXTI_Callback+0xd4>)
 80021a6:	481f      	ldr	r0, [pc, #124]	@ (8002224 <HAL_GPIO_EXTI_Callback+0xd8>)
 80021a8:	f7ff fce2 	bl	8001b70 <MPU9250_Read_Gyro>

        // Apply the complementary filter
        Calculate_Roll_Pitch_Yaw_CompFilter(Accel_X, Accel_Y, Accel_Z, Gyro_X, Gyro_Y, Gyro_Z, &Roll, &Pitch, &Yaw, dt);
 80021ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <HAL_GPIO_EXTI_Callback+0xcc>)
 80021ae:	f9b3 0000 	ldrsh.w	r0, [r3]
 80021b2:	4b18      	ldr	r3, [pc, #96]	@ (8002214 <HAL_GPIO_EXTI_Callback+0xc8>)
 80021b4:	f9b3 4000 	ldrsh.w	r4, [r3]
 80021b8:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <HAL_GPIO_EXTI_Callback+0xc4>)
 80021ba:	f9b3 5000 	ldrsh.w	r5, [r3]
 80021be:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <HAL_GPIO_EXTI_Callback+0xd8>)
 80021c0:	f9b3 6000 	ldrsh.w	r6, [r3]
 80021c4:	4b16      	ldr	r3, [pc, #88]	@ (8002220 <HAL_GPIO_EXTI_Callback+0xd4>)
 80021c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ca:	4a14      	ldr	r2, [pc, #80]	@ (800221c <HAL_GPIO_EXTI_Callback+0xd0>)
 80021cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80021d0:	490e      	ldr	r1, [pc, #56]	@ (800220c <HAL_GPIO_EXTI_Callback+0xc0>)
 80021d2:	6809      	ldr	r1, [r1, #0]
 80021d4:	9105      	str	r1, [sp, #20]
 80021d6:	4914      	ldr	r1, [pc, #80]	@ (8002228 <HAL_GPIO_EXTI_Callback+0xdc>)
 80021d8:	9104      	str	r1, [sp, #16]
 80021da:	4914      	ldr	r1, [pc, #80]	@ (800222c <HAL_GPIO_EXTI_Callback+0xe0>)
 80021dc:	9103      	str	r1, [sp, #12]
 80021de:	4914      	ldr	r1, [pc, #80]	@ (8002230 <HAL_GPIO_EXTI_Callback+0xe4>)
 80021e0:	9102      	str	r1, [sp, #8]
 80021e2:	9201      	str	r2, [sp, #4]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4633      	mov	r3, r6
 80021e8:	462a      	mov	r2, r5
 80021ea:	4621      	mov	r1, r4
 80021ec:	f7ff fdfc 	bl	8001de8 <Calculate_Roll_Pitch_Yaw_CompFilter>

        start_calculate_pid = 1;
 80021f0:	4b10      	ldr	r3, [pc, #64]	@ (8002234 <HAL_GPIO_EXTI_Callback+0xe8>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
    }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021fe:	bf00      	nop
 8002200:	200000dc 	.word	0x200000dc
 8002204:	200000d8 	.word	0x200000d8
 8002208:	408f4000 	.word	0x408f4000
 800220c:	200000e0 	.word	0x200000e0
 8002210:	200000b8 	.word	0x200000b8
 8002214:	200000b6 	.word	0x200000b6
 8002218:	200000b4 	.word	0x200000b4
 800221c:	200000be 	.word	0x200000be
 8002220:	200000bc 	.word	0x200000bc
 8002224:	200000ba 	.word	0x200000ba
 8002228:	200000c8 	.word	0x200000c8
 800222c:	200000c4 	.word	0x200000c4
 8002230:	200000c0 	.word	0x200000c0
 8002234:	2000013c 	.word	0x2000013c

08002238 <HAL_UART_RxCpltCallback>:

e_transfer_status ready_to_convert = E_NOT_READY_FOR_TRANSFER;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	index_count_receive_data+=5;
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <HAL_UART_RxCpltCallback+0x24>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	3305      	adds	r3, #5
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b04      	ldr	r3, [pc, #16]	@ (800225c <HAL_UART_RxCpltCallback+0x24>)
 800224a:	701a      	strb	r2, [r3, #0]
    ready_to_convert = E_READY_FOR_TRANSFER;
 800224c:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <HAL_UART_RxCpltCallback+0x28>)
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	20000155 	.word	0x20000155
 8002260:	20000730 	.word	0x20000730

08002264 <converdata>:

void converdata()
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
    if(ready_to_convert == E_READY_FOR_TRANSFER)
 8002268:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <converdata+0x64>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d129      	bne.n	80022c4 <converdata+0x60>
    {

    	ready_to_convert = E_NOT_READY_FOR_TRANSFER;
 8002270:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <converdata+0x64>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]

    	if(receive_data[0] == 'u')
 8002276:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <converdata+0x68>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b75      	cmp	r3, #117	@ 0x75
 800227c:	d11d      	bne.n	80022ba <converdata+0x56>
    	{
    		throtle = (receive_data[1] - 48)*1000 + (receive_data[2] - 48)*100 + (receive_data[3] - 48) * 10 + (receive_data[4] - 48);
 800227e:	4b13      	ldr	r3, [pc, #76]	@ (80022cc <converdata+0x68>)
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	3b30      	subs	r3, #48	@ 0x30
 8002284:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002288:	fb03 f202 	mul.w	r2, r3, r2
 800228c:	4b0f      	ldr	r3, [pc, #60]	@ (80022cc <converdata+0x68>)
 800228e:	789b      	ldrb	r3, [r3, #2]
 8002290:	3b30      	subs	r3, #48	@ 0x30
 8002292:	2164      	movs	r1, #100	@ 0x64
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	18d1      	adds	r1, r2, r3
 800229a:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <converdata+0x68>)
 800229c:	78db      	ldrb	r3, [r3, #3]
 800229e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	18ca      	adds	r2, r1, r3
 80022ac:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <converdata+0x68>)
 80022ae:	791b      	ldrb	r3, [r3, #4]
 80022b0:	3b30      	subs	r3, #48	@ 0x30
 80022b2:	4413      	add	r3, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <converdata+0x6c>)
 80022b8:	601a      	str	r2, [r3, #0]
    	}
        HAL_UART_Receive_IT(&huart1, (uint8_t *)&receive_data, 5);
 80022ba:	2205      	movs	r2, #5
 80022bc:	4903      	ldr	r1, [pc, #12]	@ (80022cc <converdata+0x68>)
 80022be:	4805      	ldr	r0, [pc, #20]	@ (80022d4 <converdata+0x70>)
 80022c0:	f003 fb15 	bl	80058ee <HAL_UART_Receive_IT>
    }
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000730 	.word	0x20000730
 80022cc:	20000150 	.word	0x20000150
 80022d0:	20000024 	.word	0x20000024
 80022d4:	20000234 	.word	0x20000234

080022d8 <UART_Print>:

void UART_Print(const char* str)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, strlen(str));
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7fd ff35 	bl	8000150 <strlen>
 80022e6:	4603      	mov	r3, r0
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4803      	ldr	r0, [pc, #12]	@ (80022fc <UART_Print+0x24>)
 80022f0:	f003 fac8 	bl	8005884 <HAL_UART_Transmit_IT>
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000234 	.word	0x20000234

08002300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002300:	b5b0      	push	{r4, r5, r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002306:	f000 fc3d 	bl	8002b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800230a:	f000 f8b3 	bl	8002474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800230e:	f000 f9e5 	bl	80026dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002312:	f000 f8f5 	bl	8002500 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002316:	f000 f921 	bl	800255c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800231a:	f000 f9b5 	bl	8002688 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  prev_time = HAL_GetTick();
 800231e:	f000 fc89 	bl	8002c34 <HAL_GetTick>
 8002322:	4603      	mov	r3, r0
 8002324:	4a43      	ldr	r2, [pc, #268]	@ (8002434 <main+0x134>)
 8002326:	6013      	str	r3, [r2, #0]
  MPU9250_Init();
 8002328:	f7ff fb98 	bl	8001a5c <MPU9250_Init>
  MPU9250_EnableInterrupt();
 800232c:	f7ff fc56 	bl	8001bdc <MPU9250_EnableInterrupt>

  HAL_UART_Receive_IT(&huart1, &receive_data[index_count_receive_data], 5);
 8002330:	4b41      	ldr	r3, [pc, #260]	@ (8002438 <main+0x138>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b41      	ldr	r3, [pc, #260]	@ (800243c <main+0x13c>)
 8002338:	4413      	add	r3, r2
 800233a:	2205      	movs	r2, #5
 800233c:	4619      	mov	r1, r3
 800233e:	4840      	ldr	r0, [pc, #256]	@ (8002440 <main+0x140>)
 8002340:	f003 fad5 	bl	80058ee <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) "ready\n", 6);
 8002344:	2206      	movs	r2, #6
 8002346:	493f      	ldr	r1, [pc, #252]	@ (8002444 <main+0x144>)
 8002348:	483d      	ldr	r0, [pc, #244]	@ (8002440 <main+0x140>)
 800234a:	f003 fa9b 	bl	8005884 <HAL_UART_Transmit_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800234e:	2100      	movs	r1, #0
 8002350:	483d      	ldr	r0, [pc, #244]	@ (8002448 <main+0x148>)
 8002352:	f002 fd19 	bl	8004d88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002356:	2104      	movs	r1, #4
 8002358:	483b      	ldr	r0, [pc, #236]	@ (8002448 <main+0x148>)
 800235a:	f002 fd15 	bl	8004d88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800235e:	2108      	movs	r1, #8
 8002360:	4839      	ldr	r0, [pc, #228]	@ (8002448 <main+0x148>)
 8002362:	f002 fd11 	bl	8004d88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002366:	210c      	movs	r1, #12
 8002368:	4837      	ldr	r0, [pc, #220]	@ (8002448 <main+0x148>)
 800236a:	f002 fd0d 	bl	8004d88 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1050);
 800236e:	4b36      	ldr	r3, [pc, #216]	@ (8002448 <main+0x148>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f240 421a 	movw	r2, #1050	@ 0x41a
 8002376:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1050);
 8002378:	4b33      	ldr	r3, [pc, #204]	@ (8002448 <main+0x148>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f240 421a 	movw	r2, #1050	@ 0x41a
 8002380:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1050);
 8002382:	4b31      	ldr	r3, [pc, #196]	@ (8002448 <main+0x148>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f240 421a 	movw	r2, #1050	@ 0x41a
 800238a:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1050);
 800238c:	4b2e      	ldr	r3, [pc, #184]	@ (8002448 <main+0x148>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f240 421a 	movw	r2, #1050	@ 0x41a
 8002394:	641a      	str	r2, [r3, #64]	@ 0x40
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      curr_time = HAL_GetTick();
 8002396:	f000 fc4d 	bl	8002c34 <HAL_GetTick>
 800239a:	4603      	mov	r3, r0
 800239c:	4a2b      	ldr	r2, [pc, #172]	@ (800244c <main+0x14c>)
 800239e:	6013      	str	r3, [r2, #0]
      converdata();
 80023a0:	f7ff ff60 	bl	8002264 <converdata>
      if(start_calculate_pid == 1)
 80023a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <main+0x150>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d1f4      	bne.n	8002396 <main+0x96>
      {
          // Use the roll, pitch, and yaw filter values as needed
          Validate_Roll_Pitch_Yaw();
 80023ac:	f7ff fea8 	bl	8002100 <Validate_Roll_Pitch_Yaw>
    	  calculate_pid();
 80023b0:	f7fe feac 	bl	800110c <calculate_pid>
    	  SetBrushMotor();
 80023b4:	f7ff fa56 	bl	8001864 <SetBrushMotor>
    	  start_calculate_pid = 0;
 80023b8:	4b25      	ldr	r3, [pc, #148]	@ (8002450 <main+0x150>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]

		  g_elapsedTime += dt;
 80023be:	4b25      	ldr	r3, [pc, #148]	@ (8002454 <main+0x154>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a25      	ldr	r2, [pc, #148]	@ (8002458 <main+0x158>)
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fb8b 	bl	8000ae4 <__addsf3>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b20      	ldr	r3, [pc, #128]	@ (8002454 <main+0x154>)
 80023d4:	601a      	str	r2, [r3, #0]
		  if(g_elapsedTime > 0.05f)
 80023d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002454 <main+0x154>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4920      	ldr	r1, [pc, #128]	@ (800245c <main+0x15c>)
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fe45 	bl	800106c <__aeabi_fcmpgt>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <main+0x12a>
		  {
			  g_elapsedTime = 0;
 80023e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002454 <main+0x154>)
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
			  snprintf(buffer, sizeof(buffer), "Roll: %d Pitch: %d Yaw: %d\n", (int) Roll_filter, (int) Pitch_filter, (int)Yaw_filter);
 80023f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002460 <main+0x160>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe fe43 	bl	8001080 <__aeabi_f2iz>
 80023fa:	4605      	mov	r5, r0
 80023fc:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <main+0x164>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fe3d 	bl	8001080 <__aeabi_f2iz>
 8002406:	4604      	mov	r4, r0
 8002408:	4b17      	ldr	r3, [pc, #92]	@ (8002468 <main+0x168>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fe37 	bl	8001080 <__aeabi_f2iz>
 8002412:	4603      	mov	r3, r0
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	9400      	str	r4, [sp, #0]
 8002418:	462b      	mov	r3, r5
 800241a:	4a14      	ldr	r2, [pc, #80]	@ (800246c <main+0x16c>)
 800241c:	2140      	movs	r1, #64	@ 0x40
 800241e:	4814      	ldr	r0, [pc, #80]	@ (8002470 <main+0x170>)
 8002420:	f003 ff9c 	bl	800635c <sniprintf>
			  UART_Print(buffer);
 8002424:	4812      	ldr	r0, [pc, #72]	@ (8002470 <main+0x170>)
 8002426:	f7ff ff57 	bl	80022d8 <UART_Print>
		  }
    	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);;
 800242a:	2028      	movs	r0, #40	@ 0x28
 800242c:	f000 fd23 	bl	8002e76 <HAL_NVIC_EnableIRQ>
      curr_time = HAL_GetTick();
 8002430:	e7b1      	b.n	8002396 <main+0x96>
 8002432:	bf00      	nop
 8002434:	200000d8 	.word	0x200000d8
 8002438:	20000155 	.word	0x20000155
 800243c:	20000150 	.word	0x20000150
 8002440:	20000234 	.word	0x20000234
 8002444:	080073c8 	.word	0x080073c8
 8002448:	200001ec 	.word	0x200001ec
 800244c:	200000dc 	.word	0x200000dc
 8002450:	2000013c 	.word	0x2000013c
 8002454:	200000e4 	.word	0x200000e4
 8002458:	200000e0 	.word	0x200000e0
 800245c:	3d4ccccd 	.word	0x3d4ccccd
 8002460:	200000cc 	.word	0x200000cc
 8002464:	200000d0 	.word	0x200000d0
 8002468:	200000d4 	.word	0x200000d4
 800246c:	080073d0 	.word	0x080073d0
 8002470:	20000158 	.word	0x20000158

08002474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b090      	sub	sp, #64	@ 0x40
 8002478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800247a:	f107 0318 	add.w	r3, r7, #24
 800247e:	2228      	movs	r2, #40	@ 0x28
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f003 ff9e 	bl	80063c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002496:	2301      	movs	r3, #1
 8002498:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800249a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800249e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024a4:	2301      	movs	r3, #1
 80024a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024a8:	2302      	movs	r3, #2
 80024aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80024b2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80024b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b8:	f107 0318 	add.w	r3, r7, #24
 80024bc:	4618      	mov	r0, r3
 80024be:	f001 ffab 	bl	8004418 <HAL_RCC_OscConfig>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80024c8:	f000 f956 	bl	8002778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024cc:	230f      	movs	r3, #15
 80024ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024d0:	2302      	movs	r3, #2
 80024d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2102      	movs	r1, #2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 fa18 	bl	800491c <HAL_RCC_ClockConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80024f2:	f000 f941 	bl	8002778 <Error_Handler>
  }
}
 80024f6:	bf00      	nop
 80024f8:	3740      	adds	r7, #64	@ 0x40
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002504:	4b12      	ldr	r3, [pc, #72]	@ (8002550 <MX_I2C1_Init+0x50>)
 8002506:	4a13      	ldr	r2, [pc, #76]	@ (8002554 <MX_I2C1_Init+0x54>)
 8002508:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800250a:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <MX_I2C1_Init+0x50>)
 800250c:	4a12      	ldr	r2, [pc, #72]	@ (8002558 <MX_I2C1_Init+0x58>)
 800250e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002510:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <MX_I2C1_Init+0x50>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 208;
 8002516:	4b0e      	ldr	r3, [pc, #56]	@ (8002550 <MX_I2C1_Init+0x50>)
 8002518:	22d0      	movs	r2, #208	@ 0xd0
 800251a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800251c:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <MX_I2C1_Init+0x50>)
 800251e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002522:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002524:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <MX_I2C1_Init+0x50>)
 8002526:	2200      	movs	r2, #0
 8002528:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <MX_I2C1_Init+0x50>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002530:	4b07      	ldr	r3, [pc, #28]	@ (8002550 <MX_I2C1_Init+0x50>)
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <MX_I2C1_Init+0x50>)
 8002538:	2200      	movs	r2, #0
 800253a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800253c:	4804      	ldr	r0, [pc, #16]	@ (8002550 <MX_I2C1_Init+0x50>)
 800253e:	f000 ff11 	bl	8003364 <HAL_I2C_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002548:	f000 f916 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000198 	.word	0x20000198
 8002554:	40005400 	.word	0x40005400
 8002558:	00061a80 	.word	0x00061a80

0800255c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08e      	sub	sp, #56	@ 0x38
 8002560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002562:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002570:	f107 0320 	add.w	r3, r7, #32
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
 8002588:	615a      	str	r2, [r3, #20]
 800258a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800258c:	4b3d      	ldr	r3, [pc, #244]	@ (8002684 <MX_TIM2_Init+0x128>)
 800258e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002592:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002594:	4b3b      	ldr	r3, [pc, #236]	@ (8002684 <MX_TIM2_Init+0x128>)
 8002596:	2247      	movs	r2, #71	@ 0x47
 8002598:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b3a      	ldr	r3, [pc, #232]	@ (8002684 <MX_TIM2_Init+0x128>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20160;
 80025a0:	4b38      	ldr	r3, [pc, #224]	@ (8002684 <MX_TIM2_Init+0x128>)
 80025a2:	f644 62c0 	movw	r2, #20160	@ 0x4ec0
 80025a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a8:	4b36      	ldr	r3, [pc, #216]	@ (8002684 <MX_TIM2_Init+0x128>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025ae:	4b35      	ldr	r3, [pc, #212]	@ (8002684 <MX_TIM2_Init+0x128>)
 80025b0:	2280      	movs	r2, #128	@ 0x80
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025b4:	4833      	ldr	r0, [pc, #204]	@ (8002684 <MX_TIM2_Init+0x128>)
 80025b6:	f002 fb3f 	bl	8004c38 <HAL_TIM_Base_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80025c0:	f000 f8da 	bl	8002778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025ce:	4619      	mov	r1, r3
 80025d0:	482c      	ldr	r0, [pc, #176]	@ (8002684 <MX_TIM2_Init+0x128>)
 80025d2:	f002 fd3d 	bl	8005050 <HAL_TIM_ConfigClockSource>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80025dc:	f000 f8cc 	bl	8002778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025e0:	4828      	ldr	r0, [pc, #160]	@ (8002684 <MX_TIM2_Init+0x128>)
 80025e2:	f002 fb78 	bl	8004cd6 <HAL_TIM_PWM_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80025ec:	f000 f8c4 	bl	8002778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f0:	2300      	movs	r3, #0
 80025f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025f8:	f107 0320 	add.w	r3, r7, #32
 80025fc:	4619      	mov	r1, r3
 80025fe:	4821      	ldr	r0, [pc, #132]	@ (8002684 <MX_TIM2_Init+0x128>)
 8002600:	f003 f892 	bl	8005728 <HAL_TIMEx_MasterConfigSynchronization>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800260a:	f000 f8b5 	bl	8002778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800260e:	2360      	movs	r3, #96	@ 0x60
 8002610:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2200      	movs	r2, #0
 8002622:	4619      	mov	r1, r3
 8002624:	4817      	ldr	r0, [pc, #92]	@ (8002684 <MX_TIM2_Init+0x128>)
 8002626:	f002 fc51 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002630:	f000 f8a2 	bl	8002778 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	2204      	movs	r2, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4812      	ldr	r0, [pc, #72]	@ (8002684 <MX_TIM2_Init+0x128>)
 800263c:	f002 fc46 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002646:	f000 f897 	bl	8002778 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	2208      	movs	r2, #8
 800264e:	4619      	mov	r1, r3
 8002650:	480c      	ldr	r0, [pc, #48]	@ (8002684 <MX_TIM2_Init+0x128>)
 8002652:	f002 fc3b 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800265c:	f000 f88c 	bl	8002778 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002660:	1d3b      	adds	r3, r7, #4
 8002662:	220c      	movs	r2, #12
 8002664:	4619      	mov	r1, r3
 8002666:	4807      	ldr	r0, [pc, #28]	@ (8002684 <MX_TIM2_Init+0x128>)
 8002668:	f002 fc30 	bl	8004ecc <HAL_TIM_PWM_ConfigChannel>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002672:	f000 f881 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002676:	4803      	ldr	r0, [pc, #12]	@ (8002684 <MX_TIM2_Init+0x128>)
 8002678:	f000 f922 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 800267c:	bf00      	nop
 800267e:	3738      	adds	r7, #56	@ 0x38
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200001ec 	.word	0x200001ec

08002688 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800268c:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 800268e:	4a12      	ldr	r2, [pc, #72]	@ (80026d8 <MX_USART1_UART_Init+0x50>)
 8002690:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002692:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 8002694:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002698:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800269a:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026a0:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026a6:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026ac:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026ae:	220c      	movs	r2, #12
 80026b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b2:	4b08      	ldr	r3, [pc, #32]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026be:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <MX_USART1_UART_Init+0x4c>)
 80026c0:	f003 f890 	bl	80057e4 <HAL_UART_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026ca:	f000 f855 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000234 	.word	0x20000234
 80026d8:	40013800 	.word	0x40013800

080026dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e2:	f107 0310 	add.w	r3, r7, #16
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026f0:	4b1e      	ldr	r3, [pc, #120]	@ (800276c <MX_GPIO_Init+0x90>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4a1d      	ldr	r2, [pc, #116]	@ (800276c <MX_GPIO_Init+0x90>)
 80026f6:	f043 0320 	orr.w	r3, r3, #32
 80026fa:	6193      	str	r3, [r2, #24]
 80026fc:	4b1b      	ldr	r3, [pc, #108]	@ (800276c <MX_GPIO_Init+0x90>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002708:	4b18      	ldr	r3, [pc, #96]	@ (800276c <MX_GPIO_Init+0x90>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	4a17      	ldr	r2, [pc, #92]	@ (800276c <MX_GPIO_Init+0x90>)
 800270e:	f043 0308 	orr.w	r3, r3, #8
 8002712:	6193      	str	r3, [r2, #24]
 8002714:	4b15      	ldr	r3, [pc, #84]	@ (800276c <MX_GPIO_Init+0x90>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002720:	4b12      	ldr	r3, [pc, #72]	@ (800276c <MX_GPIO_Init+0x90>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	4a11      	ldr	r2, [pc, #68]	@ (800276c <MX_GPIO_Init+0x90>)
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6193      	str	r3, [r2, #24]
 800272c:	4b0f      	ldr	r3, [pc, #60]	@ (800276c <MX_GPIO_Init+0x90>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : MPU9250_INT_Pin */
  GPIO_InitStruct.Pin = MPU9250_INT_Pin;
 8002738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800273c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800273e:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <MX_GPIO_Init+0x94>)
 8002740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MPU9250_INT_GPIO_Port, &GPIO_InitStruct);
 8002746:	f107 0310 	add.w	r3, r7, #16
 800274a:	4619      	mov	r1, r3
 800274c:	4809      	ldr	r0, [pc, #36]	@ (8002774 <MX_GPIO_Init+0x98>)
 800274e:	f000 fc6d 	bl	800302c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2100      	movs	r1, #0
 8002756:	2028      	movs	r0, #40	@ 0x28
 8002758:	f000 fb71 	bl	8002e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800275c:	2028      	movs	r0, #40	@ 0x28
 800275e:	f000 fb8a 	bl	8002e76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002762:	bf00      	nop
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	10110000 	.word	0x10110000
 8002774:	40010800 	.word	0x40010800

08002778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800277c:	b672      	cpsid	i
}
 800277e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <Error_Handler+0x8>

08002784 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <HAL_MspInit+0x5c>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	4a14      	ldr	r2, [pc, #80]	@ (80027e0 <HAL_MspInit+0x5c>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6193      	str	r3, [r2, #24]
 8002796:	4b12      	ldr	r3, [pc, #72]	@ (80027e0 <HAL_MspInit+0x5c>)
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027a2:	4b0f      	ldr	r3, [pc, #60]	@ (80027e0 <HAL_MspInit+0x5c>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	4a0e      	ldr	r2, [pc, #56]	@ (80027e0 <HAL_MspInit+0x5c>)
 80027a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ac:	61d3      	str	r3, [r2, #28]
 80027ae:	4b0c      	ldr	r3, [pc, #48]	@ (80027e0 <HAL_MspInit+0x5c>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027ba:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <HAL_MspInit+0x60>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <HAL_MspInit+0x60>)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40010000 	.word	0x40010000

080027e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	@ 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1d      	ldr	r2, [pc, #116]	@ (8002878 <HAL_I2C_MspInit+0x90>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d132      	bne.n	800286e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002808:	4b1c      	ldr	r3, [pc, #112]	@ (800287c <HAL_I2C_MspInit+0x94>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	4a1b      	ldr	r2, [pc, #108]	@ (800287c <HAL_I2C_MspInit+0x94>)
 800280e:	f043 0308 	orr.w	r3, r3, #8
 8002812:	6193      	str	r3, [r2, #24]
 8002814:	4b19      	ldr	r3, [pc, #100]	@ (800287c <HAL_I2C_MspInit+0x94>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002820:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002826:	2312      	movs	r3, #18
 8002828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800282a:	2303      	movs	r3, #3
 800282c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	4812      	ldr	r0, [pc, #72]	@ (8002880 <HAL_I2C_MspInit+0x98>)
 8002836:	f000 fbf9 	bl	800302c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800283a:	4b12      	ldr	r3, [pc, #72]	@ (8002884 <HAL_I2C_MspInit+0x9c>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	f043 0302 	orr.w	r3, r3, #2
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002850:	4a0c      	ldr	r2, [pc, #48]	@ (8002884 <HAL_I2C_MspInit+0x9c>)
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002856:	4b09      	ldr	r3, [pc, #36]	@ (800287c <HAL_I2C_MspInit+0x94>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	4a08      	ldr	r2, [pc, #32]	@ (800287c <HAL_I2C_MspInit+0x94>)
 800285c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002860:	61d3      	str	r3, [r2, #28]
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <HAL_I2C_MspInit+0x94>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800286e:	bf00      	nop
 8002870:	3728      	adds	r7, #40	@ 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40005400 	.word	0x40005400
 800287c:	40021000 	.word	0x40021000
 8002880:	40010c00 	.word	0x40010c00
 8002884:	40010000 	.word	0x40010000

08002888 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002898:	d10b      	bne.n	80028b2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800289a:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <HAL_TIM_Base_MspInit+0x34>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	4a07      	ldr	r2, [pc, #28]	@ (80028bc <HAL_TIM_Base_MspInit+0x34>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	61d3      	str	r3, [r2, #28]
 80028a6:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_TIM_Base_MspInit+0x34>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40021000 	.word	0x40021000

080028c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	@ 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028de:	d143      	bne.n	8002968 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e0:	4b23      	ldr	r3, [pc, #140]	@ (8002970 <HAL_TIM_MspPostInit+0xb0>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4a22      	ldr	r2, [pc, #136]	@ (8002970 <HAL_TIM_MspPostInit+0xb0>)
 80028e6:	f043 0308 	orr.w	r3, r3, #8
 80028ea:	6193      	str	r3, [r2, #24]
 80028ec:	4b20      	ldr	r3, [pc, #128]	@ (8002970 <HAL_TIM_MspPostInit+0xb0>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <HAL_TIM_MspPostInit+0xb0>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002970 <HAL_TIM_MspPostInit+0xb0>)
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	6193      	str	r3, [r2, #24]
 8002904:	4b1a      	ldr	r3, [pc, #104]	@ (8002970 <HAL_TIM_MspPostInit+0xb0>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8002910:	f640 4308 	movw	r3, #3080	@ 0xc08
 8002914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	2302      	movs	r3, #2
 8002918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291a:	2302      	movs	r3, #2
 800291c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	4813      	ldr	r0, [pc, #76]	@ (8002974 <HAL_TIM_MspPostInit+0xb4>)
 8002926:	f000 fb81 	bl	800302c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800292a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800292e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002930:	2302      	movs	r3, #2
 8002932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2302      	movs	r3, #2
 8002936:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	4619      	mov	r1, r3
 800293e:	480e      	ldr	r0, [pc, #56]	@ (8002978 <HAL_TIM_MspPostInit+0xb8>)
 8002940:	f000 fb74 	bl	800302c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8002944:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <HAL_TIM_MspPostInit+0xbc>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002958:	627b      	str	r3, [r7, #36]	@ 0x24
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
 8002962:	4a06      	ldr	r2, [pc, #24]	@ (800297c <HAL_TIM_MspPostInit+0xbc>)
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002968:	bf00      	nop
 800296a:	3728      	adds	r7, #40	@ 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	40010c00 	.word	0x40010c00
 8002978:	40010800 	.word	0x40010800
 800297c:	40010000 	.word	0x40010000

08002980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	@ 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a26      	ldr	r2, [pc, #152]	@ (8002a34 <HAL_UART_MspInit+0xb4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d145      	bne.n	8002a2c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029a0:	4b25      	ldr	r3, [pc, #148]	@ (8002a38 <HAL_UART_MspInit+0xb8>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4a24      	ldr	r2, [pc, #144]	@ (8002a38 <HAL_UART_MspInit+0xb8>)
 80029a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029aa:	6193      	str	r3, [r2, #24]
 80029ac:	4b22      	ldr	r3, [pc, #136]	@ (8002a38 <HAL_UART_MspInit+0xb8>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a38 <HAL_UART_MspInit+0xb8>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a38 <HAL_UART_MspInit+0xb8>)
 80029be:	f043 0308 	orr.w	r3, r3, #8
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a38 <HAL_UART_MspInit+0xb8>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029d0:	2340      	movs	r3, #64	@ 0x40
 80029d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d4:	2302      	movs	r3, #2
 80029d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d8:	2303      	movs	r3, #3
 80029da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4619      	mov	r1, r3
 80029e2:	4816      	ldr	r0, [pc, #88]	@ (8002a3c <HAL_UART_MspInit+0xbc>)
 80029e4:	f000 fb22 	bl	800302c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029e8:	2380      	movs	r3, #128	@ 0x80
 80029ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	4810      	ldr	r0, [pc, #64]	@ (8002a3c <HAL_UART_MspInit+0xbc>)
 80029fc:	f000 fb16 	bl	800302c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002a00:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <HAL_UART_MspInit+0xc0>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a08:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a16:	4a0a      	ldr	r2, [pc, #40]	@ (8002a40 <HAL_UART_MspInit+0xc0>)
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2100      	movs	r1, #0
 8002a20:	2025      	movs	r0, #37	@ 0x25
 8002a22:	f000 fa0c 	bl	8002e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a26:	2025      	movs	r0, #37	@ 0x25
 8002a28:	f000 fa25 	bl	8002e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a2c:	bf00      	nop
 8002a2e:	3728      	adds	r7, #40	@ 0x28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40013800 	.word	0x40013800
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40010c00 	.word	0x40010c00
 8002a40:	40010000 	.word	0x40010000

08002a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <NMI_Handler+0x4>

08002a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <HardFault_Handler+0x4>

08002a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <MemManage_Handler+0x4>

08002a5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <BusFault_Handler+0x4>

08002a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a68:	bf00      	nop
 8002a6a:	e7fd      	b.n	8002a68 <UsageFault_Handler+0x4>

08002a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a94:	f000 f8bc 	bl	8002c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002aa0:	4802      	ldr	r0, [pc, #8]	@ (8002aac <USART1_IRQHandler+0x10>)
 8002aa2:	f002 ff49 	bl	8005938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000234 	.word	0x20000234

08002ab0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU9250_INT_Pin);
 8002ab4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002ab8:	f000 fc3c 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ac8:	4a14      	ldr	r2, [pc, #80]	@ (8002b1c <_sbrk+0x5c>)
 8002aca:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <_sbrk+0x60>)
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ad4:	4b13      	ldr	r3, [pc, #76]	@ (8002b24 <_sbrk+0x64>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d102      	bne.n	8002ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <_sbrk+0x64>)
 8002ade:	4a12      	ldr	r2, [pc, #72]	@ (8002b28 <_sbrk+0x68>)
 8002ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ae2:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <_sbrk+0x64>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d207      	bcs.n	8002b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002af0:	f003 fc70 	bl	80063d4 <__errno>
 8002af4:	4603      	mov	r3, r0
 8002af6:	220c      	movs	r2, #12
 8002af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295
 8002afe:	e009      	b.n	8002b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b00:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <_sbrk+0x64>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b06:	4b07      	ldr	r3, [pc, #28]	@ (8002b24 <_sbrk+0x64>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	4a05      	ldr	r2, [pc, #20]	@ (8002b24 <_sbrk+0x64>)
 8002b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b12:	68fb      	ldr	r3, [r7, #12]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20005000 	.word	0x20005000
 8002b20:	00000400 	.word	0x00000400
 8002b24:	20000734 	.word	0x20000734
 8002b28:	20000888 	.word	0x20000888

08002b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b38:	f7ff fff8 	bl	8002b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b3c:	480b      	ldr	r0, [pc, #44]	@ (8002b6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b3e:	490c      	ldr	r1, [pc, #48]	@ (8002b70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b40:	4a0c      	ldr	r2, [pc, #48]	@ (8002b74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b44:	e002      	b.n	8002b4c <LoopCopyDataInit>

08002b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b4a:	3304      	adds	r3, #4

08002b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b50:	d3f9      	bcc.n	8002b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b52:	4a09      	ldr	r2, [pc, #36]	@ (8002b78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b54:	4c09      	ldr	r4, [pc, #36]	@ (8002b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b58:	e001      	b.n	8002b5e <LoopFillZerobss>

08002b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b5c:	3204      	adds	r2, #4

08002b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b60:	d3fb      	bcc.n	8002b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b62:	f003 fc3d 	bl	80063e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b66:	f7ff fbcb 	bl	8002300 <main>
  bx lr
 8002b6a:	4770      	bx	lr
  ldr r0, =_sdata
 8002b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b70:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002b74:	080074d0 	.word	0x080074d0
  ldr r2, =_sbss
 8002b78:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002b7c:	20000884 	.word	0x20000884

08002b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b80:	e7fe      	b.n	8002b80 <ADC1_2_IRQHandler>
	...

08002b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b88:	4b08      	ldr	r3, [pc, #32]	@ (8002bac <HAL_Init+0x28>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a07      	ldr	r2, [pc, #28]	@ (8002bac <HAL_Init+0x28>)
 8002b8e:	f043 0310 	orr.w	r3, r3, #16
 8002b92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b94:	2003      	movs	r0, #3
 8002b96:	f000 f947 	bl	8002e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b9a:	200f      	movs	r0, #15
 8002b9c:	f000 f808 	bl	8002bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba0:	f7ff fdf0 	bl	8002784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40022000 	.word	0x40022000

08002bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bb8:	4b12      	ldr	r3, [pc, #72]	@ (8002c04 <HAL_InitTick+0x54>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <HAL_InitTick+0x58>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f96d 	bl	8002eae <HAL_SYSTICK_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e00e      	b.n	8002bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b0f      	cmp	r3, #15
 8002be2:	d80a      	bhi.n	8002bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002be4:	2200      	movs	r2, #0
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bec:	f000 f927 	bl	8002e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bf0:	4a06      	ldr	r2, [pc, #24]	@ (8002c0c <HAL_InitTick+0x5c>)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e000      	b.n	8002bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000028 	.word	0x20000028
 8002c08:	20000030 	.word	0x20000030
 8002c0c:	2000002c 	.word	0x2000002c

08002c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c14:	4b05      	ldr	r3, [pc, #20]	@ (8002c2c <HAL_IncTick+0x1c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <HAL_IncTick+0x20>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4413      	add	r3, r2
 8002c20:	4a03      	ldr	r2, [pc, #12]	@ (8002c30 <HAL_IncTick+0x20>)
 8002c22:	6013      	str	r3, [r2, #0]
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	20000030 	.word	0x20000030
 8002c30:	20000738 	.word	0x20000738

08002c34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return uwTick;
 8002c38:	4b02      	ldr	r3, [pc, #8]	@ (8002c44 <HAL_GetTick+0x10>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	20000738 	.word	0x20000738

08002c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c58:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <__NVIC_SetPriorityGrouping+0x44>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c64:	4013      	ands	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c7a:	4a04      	ldr	r2, [pc, #16]	@ (8002c8c <__NVIC_SetPriorityGrouping+0x44>)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	60d3      	str	r3, [r2, #12]
}
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c94:	4b04      	ldr	r3, [pc, #16]	@ (8002ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	0a1b      	lsrs	r3, r3, #8
 8002c9a:	f003 0307 	and.w	r3, r3, #7
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	db0b      	blt.n	8002cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	f003 021f 	and.w	r2, r3, #31
 8002cc4:	4906      	ldr	r1, [pc, #24]	@ (8002ce0 <__NVIC_EnableIRQ+0x34>)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	095b      	lsrs	r3, r3, #5
 8002ccc:	2001      	movs	r0, #1
 8002cce:	fa00 f202 	lsl.w	r2, r0, r2
 8002cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr
 8002ce0:	e000e100 	.word	0xe000e100

08002ce4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	db12      	blt.n	8002d1c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	f003 021f 	and.w	r2, r3, #31
 8002cfc:	490a      	ldr	r1, [pc, #40]	@ (8002d28 <__NVIC_DisableIRQ+0x44>)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	2001      	movs	r0, #1
 8002d06:	fa00 f202 	lsl.w	r2, r0, r2
 8002d0a:	3320      	adds	r3, #32
 8002d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d10:	f3bf 8f4f 	dsb	sy
}
 8002d14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d16:	f3bf 8f6f 	isb	sy
}
 8002d1a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db0a      	blt.n	8002d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	490c      	ldr	r1, [pc, #48]	@ (8002d78 <__NVIC_SetPriority+0x4c>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	0112      	lsls	r2, r2, #4
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d54:	e00a      	b.n	8002d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4908      	ldr	r1, [pc, #32]	@ (8002d7c <__NVIC_SetPriority+0x50>)
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	3b04      	subs	r3, #4
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	440b      	add	r3, r1
 8002d6a:	761a      	strb	r2, [r3, #24]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000e100 	.word	0xe000e100
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	@ 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f1c3 0307 	rsb	r3, r3, #7
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	bf28      	it	cs
 8002d9e:	2304      	movcs	r3, #4
 8002da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d902      	bls.n	8002db0 <NVIC_EncodePriority+0x30>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3b03      	subs	r3, #3
 8002dae:	e000      	b.n	8002db2 <NVIC_EncodePriority+0x32>
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	43d9      	mvns	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	4313      	orrs	r3, r2
         );
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3724      	adds	r7, #36	@ 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df4:	d301      	bcc.n	8002dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002df6:	2301      	movs	r3, #1
 8002df8:	e00f      	b.n	8002e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002e24 <SysTick_Config+0x40>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e02:	210f      	movs	r1, #15
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295
 8002e08:	f7ff ff90 	bl	8002d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e0c:	4b05      	ldr	r3, [pc, #20]	@ (8002e24 <SysTick_Config+0x40>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e12:	4b04      	ldr	r3, [pc, #16]	@ (8002e24 <SysTick_Config+0x40>)
 8002e14:	2207      	movs	r2, #7
 8002e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	e000e010 	.word	0xe000e010

08002e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff ff09 	bl	8002c48 <__NVIC_SetPriorityGrouping>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b086      	sub	sp, #24
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	4603      	mov	r3, r0
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e50:	f7ff ff1e 	bl	8002c90 <__NVIC_GetPriorityGrouping>
 8002e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	6978      	ldr	r0, [r7, #20]
 8002e5c:	f7ff ff90 	bl	8002d80 <NVIC_EncodePriority>
 8002e60:	4602      	mov	r2, r0
 8002e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff5f 	bl	8002d2c <__NVIC_SetPriority>
}
 8002e6e:	bf00      	nop
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff11 	bl	8002cac <__NVIC_EnableIRQ>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff1f 	bl	8002ce4 <__NVIC_DisableIRQ>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ff94 	bl	8002de4 <SysTick_Config>
 8002ebc:	4603      	mov	r3, r0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b085      	sub	sp, #20
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d008      	beq.n	8002ef0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e020      	b.n	8002f32 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 020e 	bic.w	r2, r2, #14
 8002efe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f18:	2101      	movs	r1, #1
 8002f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d005      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2204      	movs	r2, #4
 8002f58:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	73fb      	strb	r3, [r7, #15]
 8002f5e:	e051      	b.n	8003004 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 020e 	bic.w	r2, r2, #14
 8002f6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a22      	ldr	r2, [pc, #136]	@ (8003010 <HAL_DMA_Abort_IT+0xd4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d029      	beq.n	8002fde <HAL_DMA_Abort_IT+0xa2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a21      	ldr	r2, [pc, #132]	@ (8003014 <HAL_DMA_Abort_IT+0xd8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d022      	beq.n	8002fda <HAL_DMA_Abort_IT+0x9e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1f      	ldr	r2, [pc, #124]	@ (8003018 <HAL_DMA_Abort_IT+0xdc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01a      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x98>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800301c <HAL_DMA_Abort_IT+0xe0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d012      	beq.n	8002fce <HAL_DMA_Abort_IT+0x92>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1c      	ldr	r2, [pc, #112]	@ (8003020 <HAL_DMA_Abort_IT+0xe4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00a      	beq.n	8002fc8 <HAL_DMA_Abort_IT+0x8c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8003024 <HAL_DMA_Abort_IT+0xe8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d102      	bne.n	8002fc2 <HAL_DMA_Abort_IT+0x86>
 8002fbc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002fc0:	e00e      	b.n	8002fe0 <HAL_DMA_Abort_IT+0xa4>
 8002fc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fc6:	e00b      	b.n	8002fe0 <HAL_DMA_Abort_IT+0xa4>
 8002fc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fcc:	e008      	b.n	8002fe0 <HAL_DMA_Abort_IT+0xa4>
 8002fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fd2:	e005      	b.n	8002fe0 <HAL_DMA_Abort_IT+0xa4>
 8002fd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fd8:	e002      	b.n	8002fe0 <HAL_DMA_Abort_IT+0xa4>
 8002fda:	2310      	movs	r3, #16
 8002fdc:	e000      	b.n	8002fe0 <HAL_DMA_Abort_IT+0xa4>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	4a11      	ldr	r2, [pc, #68]	@ (8003028 <HAL_DMA_Abort_IT+0xec>)
 8002fe2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	4798      	blx	r3
    } 
  }
  return status;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40020008 	.word	0x40020008
 8003014:	4002001c 	.word	0x4002001c
 8003018:	40020030 	.word	0x40020030
 800301c:	40020044 	.word	0x40020044
 8003020:	40020058 	.word	0x40020058
 8003024:	4002006c 	.word	0x4002006c
 8003028:	40020000 	.word	0x40020000

0800302c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800302c:	b480      	push	{r7}
 800302e:	b08b      	sub	sp, #44	@ 0x2c
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003036:	2300      	movs	r3, #0
 8003038:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800303a:	2300      	movs	r3, #0
 800303c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800303e:	e169      	b.n	8003314 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003040:	2201      	movs	r2, #1
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	429a      	cmp	r2, r3
 800305a:	f040 8158 	bne.w	800330e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4a9a      	ldr	r2, [pc, #616]	@ (80032cc <HAL_GPIO_Init+0x2a0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d05e      	beq.n	8003126 <HAL_GPIO_Init+0xfa>
 8003068:	4a98      	ldr	r2, [pc, #608]	@ (80032cc <HAL_GPIO_Init+0x2a0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d875      	bhi.n	800315a <HAL_GPIO_Init+0x12e>
 800306e:	4a98      	ldr	r2, [pc, #608]	@ (80032d0 <HAL_GPIO_Init+0x2a4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d058      	beq.n	8003126 <HAL_GPIO_Init+0xfa>
 8003074:	4a96      	ldr	r2, [pc, #600]	@ (80032d0 <HAL_GPIO_Init+0x2a4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d86f      	bhi.n	800315a <HAL_GPIO_Init+0x12e>
 800307a:	4a96      	ldr	r2, [pc, #600]	@ (80032d4 <HAL_GPIO_Init+0x2a8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d052      	beq.n	8003126 <HAL_GPIO_Init+0xfa>
 8003080:	4a94      	ldr	r2, [pc, #592]	@ (80032d4 <HAL_GPIO_Init+0x2a8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d869      	bhi.n	800315a <HAL_GPIO_Init+0x12e>
 8003086:	4a94      	ldr	r2, [pc, #592]	@ (80032d8 <HAL_GPIO_Init+0x2ac>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d04c      	beq.n	8003126 <HAL_GPIO_Init+0xfa>
 800308c:	4a92      	ldr	r2, [pc, #584]	@ (80032d8 <HAL_GPIO_Init+0x2ac>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d863      	bhi.n	800315a <HAL_GPIO_Init+0x12e>
 8003092:	4a92      	ldr	r2, [pc, #584]	@ (80032dc <HAL_GPIO_Init+0x2b0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d046      	beq.n	8003126 <HAL_GPIO_Init+0xfa>
 8003098:	4a90      	ldr	r2, [pc, #576]	@ (80032dc <HAL_GPIO_Init+0x2b0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d85d      	bhi.n	800315a <HAL_GPIO_Init+0x12e>
 800309e:	2b12      	cmp	r3, #18
 80030a0:	d82a      	bhi.n	80030f8 <HAL_GPIO_Init+0xcc>
 80030a2:	2b12      	cmp	r3, #18
 80030a4:	d859      	bhi.n	800315a <HAL_GPIO_Init+0x12e>
 80030a6:	a201      	add	r2, pc, #4	@ (adr r2, 80030ac <HAL_GPIO_Init+0x80>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	08003127 	.word	0x08003127
 80030b0:	08003101 	.word	0x08003101
 80030b4:	08003113 	.word	0x08003113
 80030b8:	08003155 	.word	0x08003155
 80030bc:	0800315b 	.word	0x0800315b
 80030c0:	0800315b 	.word	0x0800315b
 80030c4:	0800315b 	.word	0x0800315b
 80030c8:	0800315b 	.word	0x0800315b
 80030cc:	0800315b 	.word	0x0800315b
 80030d0:	0800315b 	.word	0x0800315b
 80030d4:	0800315b 	.word	0x0800315b
 80030d8:	0800315b 	.word	0x0800315b
 80030dc:	0800315b 	.word	0x0800315b
 80030e0:	0800315b 	.word	0x0800315b
 80030e4:	0800315b 	.word	0x0800315b
 80030e8:	0800315b 	.word	0x0800315b
 80030ec:	0800315b 	.word	0x0800315b
 80030f0:	08003109 	.word	0x08003109
 80030f4:	0800311d 	.word	0x0800311d
 80030f8:	4a79      	ldr	r2, [pc, #484]	@ (80032e0 <HAL_GPIO_Init+0x2b4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030fe:	e02c      	b.n	800315a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	623b      	str	r3, [r7, #32]
          break;
 8003106:	e029      	b.n	800315c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	3304      	adds	r3, #4
 800310e:	623b      	str	r3, [r7, #32]
          break;
 8003110:	e024      	b.n	800315c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	3308      	adds	r3, #8
 8003118:	623b      	str	r3, [r7, #32]
          break;
 800311a:	e01f      	b.n	800315c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	330c      	adds	r3, #12
 8003122:	623b      	str	r3, [r7, #32]
          break;
 8003124:	e01a      	b.n	800315c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800312e:	2304      	movs	r3, #4
 8003130:	623b      	str	r3, [r7, #32]
          break;
 8003132:	e013      	b.n	800315c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d105      	bne.n	8003148 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800313c:	2308      	movs	r3, #8
 800313e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	611a      	str	r2, [r3, #16]
          break;
 8003146:	e009      	b.n	800315c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003148:	2308      	movs	r3, #8
 800314a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	615a      	str	r2, [r3, #20]
          break;
 8003152:	e003      	b.n	800315c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003154:	2300      	movs	r3, #0
 8003156:	623b      	str	r3, [r7, #32]
          break;
 8003158:	e000      	b.n	800315c <HAL_GPIO_Init+0x130>
          break;
 800315a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2bff      	cmp	r3, #255	@ 0xff
 8003160:	d801      	bhi.n	8003166 <HAL_GPIO_Init+0x13a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	e001      	b.n	800316a <HAL_GPIO_Init+0x13e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3304      	adds	r3, #4
 800316a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2bff      	cmp	r3, #255	@ 0xff
 8003170:	d802      	bhi.n	8003178 <HAL_GPIO_Init+0x14c>
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	e002      	b.n	800317e <HAL_GPIO_Init+0x152>
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	3b08      	subs	r3, #8
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	210f      	movs	r1, #15
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	401a      	ands	r2, r3
 8003190:	6a39      	ldr	r1, [r7, #32]
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	fa01 f303 	lsl.w	r3, r1, r3
 8003198:	431a      	orrs	r2, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80b1 	beq.w	800330e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031ac:	4b4d      	ldr	r3, [pc, #308]	@ (80032e4 <HAL_GPIO_Init+0x2b8>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	4a4c      	ldr	r2, [pc, #304]	@ (80032e4 <HAL_GPIO_Init+0x2b8>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6193      	str	r3, [r2, #24]
 80031b8:	4b4a      	ldr	r3, [pc, #296]	@ (80032e4 <HAL_GPIO_Init+0x2b8>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031c4:	4a48      	ldr	r2, [pc, #288]	@ (80032e8 <HAL_GPIO_Init+0x2bc>)
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	089b      	lsrs	r3, r3, #2
 80031ca:	3302      	adds	r3, #2
 80031cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	220f      	movs	r2, #15
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4013      	ands	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a40      	ldr	r2, [pc, #256]	@ (80032ec <HAL_GPIO_Init+0x2c0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d013      	beq.n	8003218 <HAL_GPIO_Init+0x1ec>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a3f      	ldr	r2, [pc, #252]	@ (80032f0 <HAL_GPIO_Init+0x2c4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00d      	beq.n	8003214 <HAL_GPIO_Init+0x1e8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a3e      	ldr	r2, [pc, #248]	@ (80032f4 <HAL_GPIO_Init+0x2c8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d007      	beq.n	8003210 <HAL_GPIO_Init+0x1e4>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a3d      	ldr	r2, [pc, #244]	@ (80032f8 <HAL_GPIO_Init+0x2cc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d101      	bne.n	800320c <HAL_GPIO_Init+0x1e0>
 8003208:	2303      	movs	r3, #3
 800320a:	e006      	b.n	800321a <HAL_GPIO_Init+0x1ee>
 800320c:	2304      	movs	r3, #4
 800320e:	e004      	b.n	800321a <HAL_GPIO_Init+0x1ee>
 8003210:	2302      	movs	r3, #2
 8003212:	e002      	b.n	800321a <HAL_GPIO_Init+0x1ee>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <HAL_GPIO_Init+0x1ee>
 8003218:	2300      	movs	r3, #0
 800321a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800321c:	f002 0203 	and.w	r2, r2, #3
 8003220:	0092      	lsls	r2, r2, #2
 8003222:	4093      	lsls	r3, r2
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800322a:	492f      	ldr	r1, [pc, #188]	@ (80032e8 <HAL_GPIO_Init+0x2bc>)
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	3302      	adds	r3, #2
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d006      	beq.n	8003252 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003244:	4b2d      	ldr	r3, [pc, #180]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	492c      	ldr	r1, [pc, #176]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	608b      	str	r3, [r1, #8]
 8003250:	e006      	b.n	8003260 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003252:	4b2a      	ldr	r3, [pc, #168]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	43db      	mvns	r3, r3
 800325a:	4928      	ldr	r1, [pc, #160]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 800325c:	4013      	ands	r3, r2
 800325e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d006      	beq.n	800327a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800326c:	4b23      	ldr	r3, [pc, #140]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	4922      	ldr	r1, [pc, #136]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	60cb      	str	r3, [r1, #12]
 8003278:	e006      	b.n	8003288 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800327a:	4b20      	ldr	r3, [pc, #128]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	43db      	mvns	r3, r3
 8003282:	491e      	ldr	r1, [pc, #120]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 8003284:	4013      	ands	r3, r2
 8003286:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003294:	4b19      	ldr	r3, [pc, #100]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4918      	ldr	r1, [pc, #96]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032a2:	4b16      	ldr	r3, [pc, #88]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	4914      	ldr	r1, [pc, #80]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d021      	beq.n	8003300 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032bc:	4b0f      	ldr	r3, [pc, #60]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	490e      	ldr	r1, [pc, #56]	@ (80032fc <HAL_GPIO_Init+0x2d0>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	600b      	str	r3, [r1, #0]
 80032c8:	e021      	b.n	800330e <HAL_GPIO_Init+0x2e2>
 80032ca:	bf00      	nop
 80032cc:	10320000 	.word	0x10320000
 80032d0:	10310000 	.word	0x10310000
 80032d4:	10220000 	.word	0x10220000
 80032d8:	10210000 	.word	0x10210000
 80032dc:	10120000 	.word	0x10120000
 80032e0:	10110000 	.word	0x10110000
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40010000 	.word	0x40010000
 80032ec:	40010800 	.word	0x40010800
 80032f0:	40010c00 	.word	0x40010c00
 80032f4:	40011000 	.word	0x40011000
 80032f8:	40011400 	.word	0x40011400
 80032fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003300:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <HAL_GPIO_Init+0x304>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	43db      	mvns	r3, r3
 8003308:	4909      	ldr	r1, [pc, #36]	@ (8003330 <HAL_GPIO_Init+0x304>)
 800330a:	4013      	ands	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003310:	3301      	adds	r3, #1
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	fa22 f303 	lsr.w	r3, r2, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	f47f ae8e 	bne.w	8003040 <HAL_GPIO_Init+0x14>
  }
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	372c      	adds	r7, #44	@ 0x2c
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	40010400 	.word	0x40010400

08003334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800333e:	4b08      	ldr	r3, [pc, #32]	@ (8003360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d006      	beq.n	8003358 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800334a:	4a05      	ldr	r2, [pc, #20]	@ (8003360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fefa 	bl	800214c <HAL_GPIO_EXTI_Callback>
  }
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40010400 	.word	0x40010400

08003364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e12b      	b.n	80035ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff fa2c 	bl	80027e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2224      	movs	r2, #36	@ 0x24
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033c8:	f001 fbf0 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 80033cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4a81      	ldr	r2, [pc, #516]	@ (80035d8 <HAL_I2C_Init+0x274>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d807      	bhi.n	80033e8 <HAL_I2C_Init+0x84>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4a80      	ldr	r2, [pc, #512]	@ (80035dc <HAL_I2C_Init+0x278>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	bf94      	ite	ls
 80033e0:	2301      	movls	r3, #1
 80033e2:	2300      	movhi	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e006      	b.n	80033f6 <HAL_I2C_Init+0x92>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a7d      	ldr	r2, [pc, #500]	@ (80035e0 <HAL_I2C_Init+0x27c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bf94      	ite	ls
 80033f0:	2301      	movls	r3, #1
 80033f2:	2300      	movhi	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0e7      	b.n	80035ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a78      	ldr	r2, [pc, #480]	@ (80035e4 <HAL_I2C_Init+0x280>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	0c9b      	lsrs	r3, r3, #18
 8003408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a6a      	ldr	r2, [pc, #424]	@ (80035d8 <HAL_I2C_Init+0x274>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d802      	bhi.n	8003438 <HAL_I2C_Init+0xd4>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	3301      	adds	r3, #1
 8003436:	e009      	b.n	800344c <HAL_I2C_Init+0xe8>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	4a69      	ldr	r2, [pc, #420]	@ (80035e8 <HAL_I2C_Init+0x284>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	3301      	adds	r3, #1
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	430b      	orrs	r3, r1
 8003452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800345e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	495c      	ldr	r1, [pc, #368]	@ (80035d8 <HAL_I2C_Init+0x274>)
 8003468:	428b      	cmp	r3, r1
 800346a:	d819      	bhi.n	80034a0 <HAL_I2C_Init+0x13c>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1e59      	subs	r1, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fbb1 f3f3 	udiv	r3, r1, r3
 800347a:	1c59      	adds	r1, r3, #1
 800347c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003480:	400b      	ands	r3, r1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_I2C_Init+0x138>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1e59      	subs	r1, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fbb1 f3f3 	udiv	r3, r1, r3
 8003494:	3301      	adds	r3, #1
 8003496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349a:	e051      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 800349c:	2304      	movs	r3, #4
 800349e:	e04f      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d111      	bne.n	80034cc <HAL_I2C_Init+0x168>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1e58      	subs	r0, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	440b      	add	r3, r1
 80034b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e012      	b.n	80034f2 <HAL_I2C_Init+0x18e>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1e58      	subs	r0, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	0099      	lsls	r1, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e2:	3301      	adds	r3, #1
 80034e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Init+0x196>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e022      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10e      	bne.n	8003520 <HAL_I2C_Init+0x1bc>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1e58      	subs	r0, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6859      	ldr	r1, [r3, #4]
 800350a:	460b      	mov	r3, r1
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	440b      	add	r3, r1
 8003510:	fbb0 f3f3 	udiv	r3, r0, r3
 8003514:	3301      	adds	r3, #1
 8003516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800351e:	e00f      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1e58      	subs	r0, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	0099      	lsls	r1, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	fbb0 f3f3 	udiv	r3, r0, r3
 8003536:	3301      	adds	r3, #1
 8003538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	6809      	ldr	r1, [r1, #0]
 8003544:	4313      	orrs	r3, r2
 8003546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800356e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6911      	ldr	r1, [r2, #16]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68d2      	ldr	r2, [r2, #12]
 800357a:	4311      	orrs	r1, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	430b      	orrs	r3, r1
 8003582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	000186a0 	.word	0x000186a0
 80035dc:	001e847f 	.word	0x001e847f
 80035e0:	003d08ff 	.word	0x003d08ff
 80035e4:	431bde83 	.word	0x431bde83
 80035e8:	10624dd3 	.word	0x10624dd3

080035ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	4608      	mov	r0, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	461a      	mov	r2, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	817b      	strh	r3, [r7, #10]
 80035fe:	460b      	mov	r3, r1
 8003600:	813b      	strh	r3, [r7, #8]
 8003602:	4613      	mov	r3, r2
 8003604:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003606:	f7ff fb15 	bl	8002c34 <HAL_GetTick>
 800360a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b20      	cmp	r3, #32
 8003616:	f040 80d9 	bne.w	80037cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	2319      	movs	r3, #25
 8003620:	2201      	movs	r2, #1
 8003622:	496d      	ldr	r1, [pc, #436]	@ (80037d8 <HAL_I2C_Mem_Write+0x1ec>)
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 fcc1 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003630:	2302      	movs	r3, #2
 8003632:	e0cc      	b.n	80037ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_I2C_Mem_Write+0x56>
 800363e:	2302      	movs	r3, #2
 8003640:	e0c5      	b.n	80037ce <HAL_I2C_Mem_Write+0x1e2>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d007      	beq.n	8003668 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003676:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2221      	movs	r2, #33	@ 0x21
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2240      	movs	r2, #64	@ 0x40
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a3a      	ldr	r2, [r7, #32]
 8003692:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003698:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a4d      	ldr	r2, [pc, #308]	@ (80037dc <HAL_I2C_Mem_Write+0x1f0>)
 80036a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036aa:	88f8      	ldrh	r0, [r7, #6]
 80036ac:	893a      	ldrh	r2, [r7, #8]
 80036ae:	8979      	ldrh	r1, [r7, #10]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	4603      	mov	r3, r0
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 faf8 	bl	8003cb0 <I2C_RequestMemoryWrite>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d052      	beq.n	800376c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e081      	b.n	80037ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fd86 	bl	80041e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00d      	beq.n	80036f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d107      	bne.n	80036f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e06b      	b.n	80037ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	781a      	ldrb	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b04      	cmp	r3, #4
 8003732:	d11b      	bne.n	800376c <HAL_I2C_Mem_Write+0x180>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003738:	2b00      	cmp	r3, #0
 800373a:	d017      	beq.n	800376c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1aa      	bne.n	80036ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fd79 	bl	8004270 <I2C_WaitOnBTFFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	2b04      	cmp	r3, #4
 800378a:	d107      	bne.n	800379c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800379a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e016      	b.n	80037ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e000      	b.n	80037ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
  }
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	00100002 	.word	0x00100002
 80037dc:	ffff0000 	.word	0xffff0000

080037e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08c      	sub	sp, #48	@ 0x30
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	4608      	mov	r0, r1
 80037ea:	4611      	mov	r1, r2
 80037ec:	461a      	mov	r2, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	817b      	strh	r3, [r7, #10]
 80037f2:	460b      	mov	r3, r1
 80037f4:	813b      	strh	r3, [r7, #8]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037fe:	f7ff fa19 	bl	8002c34 <HAL_GetTick>
 8003802:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b20      	cmp	r3, #32
 800380e:	f040 8244 	bne.w	8003c9a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2319      	movs	r3, #25
 8003818:	2201      	movs	r2, #1
 800381a:	4982      	ldr	r1, [pc, #520]	@ (8003a24 <HAL_I2C_Mem_Read+0x244>)
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fbc5 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003828:	2302      	movs	r3, #2
 800382a:	e237      	b.n	8003c9c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_I2C_Mem_Read+0x5a>
 8003836:	2302      	movs	r3, #2
 8003838:	e230      	b.n	8003c9c <HAL_I2C_Mem_Read+0x4bc>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	d007      	beq.n	8003860 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800386e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2222      	movs	r2, #34	@ 0x22
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2240      	movs	r2, #64	@ 0x40
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800388a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003890:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a62      	ldr	r2, [pc, #392]	@ (8003a28 <HAL_I2C_Mem_Read+0x248>)
 80038a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038a2:	88f8      	ldrh	r0, [r7, #6]
 80038a4:	893a      	ldrh	r2, [r7, #8]
 80038a6:	8979      	ldrh	r1, [r7, #10]
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	4603      	mov	r3, r0
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fa92 	bl	8003ddc <I2C_RequestMemoryRead>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e1ec      	b.n	8003c9c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d113      	bne.n	80038f2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	61fb      	str	r3, [r7, #28]
 80038de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e1c0      	b.n	8003c74 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d11e      	bne.n	8003938 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003908:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800390a:	b672      	cpsid	i
}
 800390c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003932:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003934:	b662      	cpsie	i
}
 8003936:	e035      	b.n	80039a4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393c:	2b02      	cmp	r3, #2
 800393e:	d11e      	bne.n	800397e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800394e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003950:	b672      	cpsid	i
}
 8003952:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003978:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800397a:	b662      	cpsie	i
}
 800397c:	e012      	b.n	80039a4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800398c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80039a4:	e166      	b.n	8003c74 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	f200 811f 	bhi.w	8003bee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d123      	bne.n	8003a00 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 fc9f 	bl	8004300 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e167      	b.n	8003c9c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039fe:	e139      	b.n	8003c74 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d152      	bne.n	8003aae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a0e:	2200      	movs	r2, #0
 8003a10:	4906      	ldr	r1, [pc, #24]	@ (8003a2c <HAL_I2C_Mem_Read+0x24c>)
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 faca 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e13c      	b.n	8003c9c <HAL_I2C_Mem_Read+0x4bc>
 8003a22:	bf00      	nop
 8003a24:	00100002 	.word	0x00100002
 8003a28:	ffff0000 	.word	0xffff0000
 8003a2c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a30:	b672      	cpsid	i
}
 8003a32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a76:	b662      	cpsie	i
}
 8003a78:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aac:	e0e2      	b.n	8003c74 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	497b      	ldr	r1, [pc, #492]	@ (8003ca4 <HAL_I2C_Mem_Read+0x4c4>)
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 fa77 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0e9      	b.n	8003c9c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ad6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ad8:	b672      	cpsid	i
}
 8003ada:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b0e:	4b66      	ldr	r3, [pc, #408]	@ (8003ca8 <HAL_I2C_Mem_Read+0x4c8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	08db      	lsrs	r3, r3, #3
 8003b14:	4a65      	ldr	r2, [pc, #404]	@ (8003cac <HAL_I2C_Mem_Read+0x4cc>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	0a1a      	lsrs	r2, r3, #8
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	00da      	lsls	r2, r3, #3
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d118      	bne.n	8003b66 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	f043 0220 	orr.w	r2, r3, #32
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003b56:	b662      	cpsie	i
}
 8003b58:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e09a      	b.n	8003c9c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d1d9      	bne.n	8003b28 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bb6:	b662      	cpsie	i
}
 8003bb8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	b2d2      	uxtb	r2, r2
 8003bc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bec:	e042      	b.n	8003c74 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fb84 	bl	8004300 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e04c      	b.n	8003c9c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d118      	bne.n	8003c74 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f47f ae94 	bne.w	80039a6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e000      	b.n	8003c9c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
  }
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3728      	adds	r7, #40	@ 0x28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	00010004 	.word	0x00010004
 8003ca8:	20000028 	.word	0x20000028
 8003cac:	14f8b589 	.word	0x14f8b589

08003cb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	4608      	mov	r0, r1
 8003cba:	4611      	mov	r1, r2
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	817b      	strh	r3, [r7, #10]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	813b      	strh	r3, [r7, #8]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f960 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00d      	beq.n	8003d0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d00:	d103      	bne.n	8003d0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e05f      	b.n	8003dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d0e:	897b      	ldrh	r3, [r7, #10]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	6a3a      	ldr	r2, [r7, #32]
 8003d22:	492d      	ldr	r1, [pc, #180]	@ (8003dd8 <I2C_RequestMemoryWrite+0x128>)
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f9bb 	bl	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e04c      	b.n	8003dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d4c:	6a39      	ldr	r1, [r7, #32]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fa46 	bl	80041e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00d      	beq.n	8003d76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d107      	bne.n	8003d72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e02b      	b.n	8003dce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d7c:	893b      	ldrh	r3, [r7, #8]
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	611a      	str	r2, [r3, #16]
 8003d86:	e021      	b.n	8003dcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d88:	893b      	ldrh	r3, [r7, #8]
 8003d8a:	0a1b      	lsrs	r3, r3, #8
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d98:	6a39      	ldr	r1, [r7, #32]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fa20 	bl	80041e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00d      	beq.n	8003dc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d107      	bne.n	8003dbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e005      	b.n	8003dce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc2:	893b      	ldrh	r3, [r7, #8]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	00010002 	.word	0x00010002

08003ddc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	4608      	mov	r0, r1
 8003de6:	4611      	mov	r1, r2
 8003de8:	461a      	mov	r2, r3
 8003dea:	4603      	mov	r3, r0
 8003dec:	817b      	strh	r3, [r7, #10]
 8003dee:	460b      	mov	r3, r1
 8003df0:	813b      	strh	r3, [r7, #8]
 8003df2:	4613      	mov	r3, r2
 8003df4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f8c2 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00d      	beq.n	8003e4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e3c:	d103      	bne.n	8003e46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e0aa      	b.n	8003fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e4a:	897b      	ldrh	r3, [r7, #10]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	6a3a      	ldr	r2, [r7, #32]
 8003e5e:	4952      	ldr	r1, [pc, #328]	@ (8003fa8 <I2C_RequestMemoryRead+0x1cc>)
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f91d 	bl	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e097      	b.n	8003fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e88:	6a39      	ldr	r1, [r7, #32]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f9a8 	bl	80041e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d107      	bne.n	8003eae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e076      	b.n	8003fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d105      	bne.n	8003ec4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eb8:	893b      	ldrh	r3, [r7, #8]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	611a      	str	r2, [r3, #16]
 8003ec2:	e021      	b.n	8003f08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ec4:	893b      	ldrh	r3, [r7, #8]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed4:	6a39      	ldr	r1, [r7, #32]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f982 	bl	80041e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d107      	bne.n	8003efa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e050      	b.n	8003fa0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003efe:	893b      	ldrh	r3, [r7, #8]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f0a:	6a39      	ldr	r1, [r7, #32]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f967 	bl	80041e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00d      	beq.n	8003f34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d107      	bne.n	8003f30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e035      	b.n	8003fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f82b 	bl	8003fac <I2C_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00d      	beq.n	8003f78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f6a:	d103      	bne.n	8003f74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e013      	b.n	8003fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f78:	897b      	ldrh	r3, [r7, #10]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	6a3a      	ldr	r2, [r7, #32]
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <I2C_RequestMemoryRead+0x1cc>)
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f886 	bl	80040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	00010002 	.word	0x00010002

08003fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fbc:	e048      	b.n	8004050 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d044      	beq.n	8004050 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc6:	f7fe fe35 	bl	8002c34 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d302      	bcc.n	8003fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d139      	bne.n	8004050 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	0c1b      	lsrs	r3, r3, #16
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d10d      	bne.n	8004002 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	43da      	mvns	r2, r3
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2301      	moveq	r3, #1
 8003ffa:	2300      	movne	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	e00c      	b.n	800401c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	43da      	mvns	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4013      	ands	r3, r2
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	429a      	cmp	r2, r3
 8004020:	d116      	bne.n	8004050 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	f043 0220 	orr.w	r2, r3, #32
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e023      	b.n	8004098 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	0c1b      	lsrs	r3, r3, #16
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b01      	cmp	r3, #1
 8004058:	d10d      	bne.n	8004076 <I2C_WaitOnFlagUntilTimeout+0xca>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	43da      	mvns	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4013      	ands	r3, r2
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	e00c      	b.n	8004090 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	43da      	mvns	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	4013      	ands	r3, r2
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	429a      	cmp	r2, r3
 8004094:	d093      	beq.n	8003fbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040ae:	e071      	b.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040be:	d123      	bne.n	8004108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f4:	f043 0204 	orr.w	r2, r3, #4
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e067      	b.n	80041d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d041      	beq.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004110:	f7fe fd90 	bl	8002c34 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	d302      	bcc.n	8004126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d136      	bne.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10c      	bne.n	800414a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	43da      	mvns	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4013      	ands	r3, r2
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf14      	ite	ne
 8004142:	2301      	movne	r3, #1
 8004144:	2300      	moveq	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	e00b      	b.n	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	43da      	mvns	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4013      	ands	r3, r2
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d016      	beq.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	f043 0220 	orr.w	r2, r3, #32
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e021      	b.n	80041d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	0c1b      	lsrs	r3, r3, #16
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10c      	bne.n	80041b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	43da      	mvns	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	4013      	ands	r3, r2
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bf14      	ite	ne
 80041b0:	2301      	movne	r3, #1
 80041b2:	2300      	moveq	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	e00b      	b.n	80041d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	43da      	mvns	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4013      	ands	r3, r2
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bf14      	ite	ne
 80041ca:	2301      	movne	r3, #1
 80041cc:	2300      	moveq	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f47f af6d 	bne.w	80040b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041ec:	e034      	b.n	8004258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 f8e3 	bl	80043ba <I2C_IsAcknowledgeFailed>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e034      	b.n	8004268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d028      	beq.n	8004258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004206:	f7fe fd15 	bl	8002c34 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	d302      	bcc.n	800421c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d11d      	bne.n	8004258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004226:	2b80      	cmp	r3, #128	@ 0x80
 8004228:	d016      	beq.n	8004258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004244:	f043 0220 	orr.w	r2, r3, #32
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e007      	b.n	8004268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004262:	2b80      	cmp	r3, #128	@ 0x80
 8004264:	d1c3      	bne.n	80041ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800427c:	e034      	b.n	80042e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f89b 	bl	80043ba <I2C_IsAcknowledgeFailed>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e034      	b.n	80042f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004294:	d028      	beq.n	80042e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004296:	f7fe fccd 	bl	8002c34 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d302      	bcc.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d11d      	bne.n	80042e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d016      	beq.n	80042e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	f043 0220 	orr.w	r2, r3, #32
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e007      	b.n	80042f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d1c3      	bne.n	800427e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800430c:	e049      	b.n	80043a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b10      	cmp	r3, #16
 800431a:	d119      	bne.n	8004350 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0210 	mvn.w	r2, #16
 8004324:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e030      	b.n	80043b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004350:	f7fe fc70 	bl	8002c34 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	429a      	cmp	r2, r3
 800435e:	d302      	bcc.n	8004366 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d11d      	bne.n	80043a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004370:	2b40      	cmp	r3, #64	@ 0x40
 8004372:	d016      	beq.n	80043a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	f043 0220 	orr.w	r2, r3, #32
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e007      	b.n	80043b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ac:	2b40      	cmp	r3, #64	@ 0x40
 80043ae:	d1ae      	bne.n	800430e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043d0:	d11b      	bne.n	800440a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f6:	f043 0204 	orr.w	r2, r3, #4
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr
	...

08004418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e272      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 8087 	beq.w	8004546 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004438:	4b92      	ldr	r3, [pc, #584]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 030c 	and.w	r3, r3, #12
 8004440:	2b04      	cmp	r3, #4
 8004442:	d00c      	beq.n	800445e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004444:	4b8f      	ldr	r3, [pc, #572]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b08      	cmp	r3, #8
 800444e:	d112      	bne.n	8004476 <HAL_RCC_OscConfig+0x5e>
 8004450:	4b8c      	ldr	r3, [pc, #560]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800445c:	d10b      	bne.n	8004476 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445e:	4b89      	ldr	r3, [pc, #548]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d06c      	beq.n	8004544 <HAL_RCC_OscConfig+0x12c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d168      	bne.n	8004544 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e24c      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800447e:	d106      	bne.n	800448e <HAL_RCC_OscConfig+0x76>
 8004480:	4b80      	ldr	r3, [pc, #512]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a7f      	ldr	r2, [pc, #508]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 8004486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	e02e      	b.n	80044ec <HAL_RCC_OscConfig+0xd4>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x98>
 8004496:	4b7b      	ldr	r3, [pc, #492]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a7a      	ldr	r2, [pc, #488]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 800449c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4b78      	ldr	r3, [pc, #480]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a77      	ldr	r2, [pc, #476]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 80044a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e01d      	b.n	80044ec <HAL_RCC_OscConfig+0xd4>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCC_OscConfig+0xbc>
 80044ba:	4b72      	ldr	r3, [pc, #456]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a71      	ldr	r2, [pc, #452]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 80044c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a6e      	ldr	r2, [pc, #440]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	e00b      	b.n	80044ec <HAL_RCC_OscConfig+0xd4>
 80044d4:	4b6b      	ldr	r3, [pc, #428]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a6a      	ldr	r2, [pc, #424]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 80044da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b68      	ldr	r3, [pc, #416]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a67      	ldr	r2, [pc, #412]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 80044e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d013      	beq.n	800451c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fe fb9e 	bl	8002c34 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fe fb9a 	bl	8002c34 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	@ 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e200      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450e:	4b5d      	ldr	r3, [pc, #372]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0xe4>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451c:	f7fe fb8a 	bl	8002c34 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fe fb86 	bl	8002c34 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	@ 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e1ec      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004536:	4b53      	ldr	r3, [pc, #332]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x10c>
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d063      	beq.n	800461a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004552:	4b4c      	ldr	r3, [pc, #304]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800455e:	4b49      	ldr	r3, [pc, #292]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b08      	cmp	r3, #8
 8004568:	d11c      	bne.n	80045a4 <HAL_RCC_OscConfig+0x18c>
 800456a:	4b46      	ldr	r3, [pc, #280]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d116      	bne.n	80045a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004576:	4b43      	ldr	r3, [pc, #268]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <HAL_RCC_OscConfig+0x176>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d001      	beq.n	800458e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e1c0      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458e:	4b3d      	ldr	r3, [pc, #244]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4939      	ldr	r1, [pc, #228]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a2:	e03a      	b.n	800461a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d020      	beq.n	80045ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ac:	4b36      	ldr	r3, [pc, #216]	@ (8004688 <HAL_RCC_OscConfig+0x270>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b2:	f7fe fb3f 	bl	8002c34 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ba:	f7fe fb3b 	bl	8002c34 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e1a1      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0f0      	beq.n	80045ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4927      	ldr	r1, [pc, #156]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	600b      	str	r3, [r1, #0]
 80045ec:	e015      	b.n	800461a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ee:	4b26      	ldr	r3, [pc, #152]	@ (8004688 <HAL_RCC_OscConfig+0x270>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fe fb1e 	bl	8002c34 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fc:	f7fe fb1a 	bl	8002c34 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e180      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460e:	4b1d      	ldr	r3, [pc, #116]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d03a      	beq.n	800469c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d019      	beq.n	8004662 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462e:	4b17      	ldr	r3, [pc, #92]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 8004630:	2201      	movs	r2, #1
 8004632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004634:	f7fe fafe 	bl	8002c34 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463c:	f7fe fafa 	bl	8002c34 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e160      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464e:	4b0d      	ldr	r3, [pc, #52]	@ (8004684 <HAL_RCC_OscConfig+0x26c>)
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800465a:	2001      	movs	r0, #1
 800465c:	f000 face 	bl	8004bfc <RCC_Delay>
 8004660:	e01c      	b.n	800469c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004662:	4b0a      	ldr	r3, [pc, #40]	@ (800468c <HAL_RCC_OscConfig+0x274>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004668:	f7fe fae4 	bl	8002c34 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800466e:	e00f      	b.n	8004690 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004670:	f7fe fae0 	bl	8002c34 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d908      	bls.n	8004690 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e146      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000
 8004688:	42420000 	.word	0x42420000
 800468c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004690:	4b92      	ldr	r3, [pc, #584]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e9      	bne.n	8004670 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80a6 	beq.w	80047f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046aa:	2300      	movs	r3, #0
 80046ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ae:	4b8b      	ldr	r3, [pc, #556]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10d      	bne.n	80046d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ba:	4b88      	ldr	r3, [pc, #544]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	4a87      	ldr	r2, [pc, #540]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046c4:	61d3      	str	r3, [r2, #28]
 80046c6:	4b85      	ldr	r3, [pc, #532]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d2:	2301      	movs	r3, #1
 80046d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d6:	4b82      	ldr	r3, [pc, #520]	@ (80048e0 <HAL_RCC_OscConfig+0x4c8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d118      	bne.n	8004714 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046e2:	4b7f      	ldr	r3, [pc, #508]	@ (80048e0 <HAL_RCC_OscConfig+0x4c8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a7e      	ldr	r2, [pc, #504]	@ (80048e0 <HAL_RCC_OscConfig+0x4c8>)
 80046e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ee:	f7fe faa1 	bl	8002c34 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f6:	f7fe fa9d 	bl	8002c34 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b64      	cmp	r3, #100	@ 0x64
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e103      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004708:	4b75      	ldr	r3, [pc, #468]	@ (80048e0 <HAL_RCC_OscConfig+0x4c8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d106      	bne.n	800472a <HAL_RCC_OscConfig+0x312>
 800471c:	4b6f      	ldr	r3, [pc, #444]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	4a6e      	ldr	r2, [pc, #440]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	6213      	str	r3, [r2, #32]
 8004728:	e02d      	b.n	8004786 <HAL_RCC_OscConfig+0x36e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0x334>
 8004732:	4b6a      	ldr	r3, [pc, #424]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	4a69      	ldr	r2, [pc, #420]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	6213      	str	r3, [r2, #32]
 800473e:	4b67      	ldr	r3, [pc, #412]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	4a66      	ldr	r2, [pc, #408]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004744:	f023 0304 	bic.w	r3, r3, #4
 8004748:	6213      	str	r3, [r2, #32]
 800474a:	e01c      	b.n	8004786 <HAL_RCC_OscConfig+0x36e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b05      	cmp	r3, #5
 8004752:	d10c      	bne.n	800476e <HAL_RCC_OscConfig+0x356>
 8004754:	4b61      	ldr	r3, [pc, #388]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	4a60      	ldr	r2, [pc, #384]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 800475a:	f043 0304 	orr.w	r3, r3, #4
 800475e:	6213      	str	r3, [r2, #32]
 8004760:	4b5e      	ldr	r3, [pc, #376]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	4a5d      	ldr	r2, [pc, #372]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6213      	str	r3, [r2, #32]
 800476c:	e00b      	b.n	8004786 <HAL_RCC_OscConfig+0x36e>
 800476e:	4b5b      	ldr	r3, [pc, #364]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	4a5a      	ldr	r2, [pc, #360]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004774:	f023 0301 	bic.w	r3, r3, #1
 8004778:	6213      	str	r3, [r2, #32]
 800477a:	4b58      	ldr	r3, [pc, #352]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	4a57      	ldr	r2, [pc, #348]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004780:	f023 0304 	bic.w	r3, r3, #4
 8004784:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d015      	beq.n	80047ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478e:	f7fe fa51 	bl	8002c34 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004794:	e00a      	b.n	80047ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004796:	f7fe fa4d 	bl	8002c34 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e0b1      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ac:	4b4b      	ldr	r3, [pc, #300]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ee      	beq.n	8004796 <HAL_RCC_OscConfig+0x37e>
 80047b8:	e014      	b.n	80047e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ba:	f7fe fa3b 	bl	8002c34 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fe fa37 	bl	8002c34 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e09b      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d8:	4b40      	ldr	r3, [pc, #256]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1ee      	bne.n	80047c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d105      	bne.n	80047f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ea:	4b3c      	ldr	r3, [pc, #240]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	4a3b      	ldr	r2, [pc, #236]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 80047f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 8087 	beq.w	800490e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004800:	4b36      	ldr	r3, [pc, #216]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 030c 	and.w	r3, r3, #12
 8004808:	2b08      	cmp	r3, #8
 800480a:	d061      	beq.n	80048d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d146      	bne.n	80048a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004814:	4b33      	ldr	r3, [pc, #204]	@ (80048e4 <HAL_RCC_OscConfig+0x4cc>)
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481a:	f7fe fa0b 	bl	8002c34 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004822:	f7fe fa07 	bl	8002c34 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e06d      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004834:	4b29      	ldr	r3, [pc, #164]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1f0      	bne.n	8004822 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004848:	d108      	bne.n	800485c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800484a:	4b24      	ldr	r3, [pc, #144]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	4921      	ldr	r1, [pc, #132]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004858:	4313      	orrs	r3, r2
 800485a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800485c:	4b1f      	ldr	r3, [pc, #124]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a19      	ldr	r1, [r3, #32]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	430b      	orrs	r3, r1
 800486e:	491b      	ldr	r1, [pc, #108]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004874:	4b1b      	ldr	r3, [pc, #108]	@ (80048e4 <HAL_RCC_OscConfig+0x4cc>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487a:	f7fe f9db 	bl	8002c34 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004882:	f7fe f9d7 	bl	8002c34 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e03d      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004894:	4b11      	ldr	r3, [pc, #68]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0x46a>
 80048a0:	e035      	b.n	800490e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a2:	4b10      	ldr	r3, [pc, #64]	@ (80048e4 <HAL_RCC_OscConfig+0x4cc>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fe f9c4 	bl	8002c34 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fe f9c0 	bl	8002c34 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e026      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_RCC_OscConfig+0x4c4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x498>
 80048ce:	e01e      	b.n	800490e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e019      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40007000 	.word	0x40007000
 80048e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004918 <HAL_RCC_OscConfig+0x500>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d106      	bne.n	800490a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d001      	beq.n	800490e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40021000 	.word	0x40021000

0800491c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0d0      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004930:	4b6a      	ldr	r3, [pc, #424]	@ (8004adc <HAL_RCC_ClockConfig+0x1c0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d910      	bls.n	8004960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	4b67      	ldr	r3, [pc, #412]	@ (8004adc <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f023 0207 	bic.w	r2, r3, #7
 8004946:	4965      	ldr	r1, [pc, #404]	@ (8004adc <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	4313      	orrs	r3, r2
 800494c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494e:	4b63      	ldr	r3, [pc, #396]	@ (8004adc <HAL_RCC_ClockConfig+0x1c0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d001      	beq.n	8004960 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0b8      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d020      	beq.n	80049ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004978:	4b59      	ldr	r3, [pc, #356]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a58      	ldr	r2, [pc, #352]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800497e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004982:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004990:	4b53      	ldr	r3, [pc, #332]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4a52      	ldr	r2, [pc, #328]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800499a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800499c:	4b50      	ldr	r3, [pc, #320]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	494d      	ldr	r1, [pc, #308]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d040      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d107      	bne.n	80049d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c2:	4b47      	ldr	r3, [pc, #284]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d115      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e07f      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d107      	bne.n	80049ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049da:	4b41      	ldr	r3, [pc, #260]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e073      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ea:	4b3d      	ldr	r3, [pc, #244]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e06b      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049fa:	4b39      	ldr	r3, [pc, #228]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f023 0203 	bic.w	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	4936      	ldr	r1, [pc, #216]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a0c:	f7fe f912 	bl	8002c34 <HAL_GetTick>
 8004a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a14:	f7fe f90e 	bl	8002c34 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e053      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f003 020c 	and.w	r2, r3, #12
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d1eb      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a3c:	4b27      	ldr	r3, [pc, #156]	@ (8004adc <HAL_RCC_ClockConfig+0x1c0>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d210      	bcs.n	8004a6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4a:	4b24      	ldr	r3, [pc, #144]	@ (8004adc <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f023 0207 	bic.w	r2, r3, #7
 8004a52:	4922      	ldr	r1, [pc, #136]	@ (8004adc <HAL_RCC_ClockConfig+0x1c0>)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5a:	4b20      	ldr	r3, [pc, #128]	@ (8004adc <HAL_RCC_ClockConfig+0x1c0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d001      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e032      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a78:	4b19      	ldr	r3, [pc, #100]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4916      	ldr	r1, [pc, #88]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a96:	4b12      	ldr	r3, [pc, #72]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	490e      	ldr	r1, [pc, #56]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004aaa:	f000 f821 	bl	8004af0 <HAL_RCC_GetSysClockFreq>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	490a      	ldr	r1, [pc, #40]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8004abc:	5ccb      	ldrb	r3, [r1, r3]
 8004abe:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac2:	4a09      	ldr	r2, [pc, #36]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1cc>)
 8004ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ac6:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <HAL_RCC_ClockConfig+0x1d0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe f870 	bl	8002bb0 <HAL_InitTick>

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	40022000 	.word	0x40022000
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	080073ec 	.word	0x080073ec
 8004ae8:	20000028 	.word	0x20000028
 8004aec:	2000002c 	.word	0x2000002c

08004af0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	2300      	movs	r3, #0
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	2300      	movs	r3, #0
 8004b04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d002      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x30>
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d003      	beq.n	8004b26 <HAL_RCC_GetSysClockFreq+0x36>
 8004b1e:	e027      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b20:	4b19      	ldr	r3, [pc, #100]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b22:	613b      	str	r3, [r7, #16]
      break;
 8004b24:	e027      	b.n	8004b76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	0c9b      	lsrs	r3, r3, #18
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	4a17      	ldr	r2, [pc, #92]	@ (8004b8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b30:	5cd3      	ldrb	r3, [r2, r3]
 8004b32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d010      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b3e:	4b11      	ldr	r3, [pc, #68]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	0c5b      	lsrs	r3, r3, #17
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	4a11      	ldr	r2, [pc, #68]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b4a:	5cd3      	ldrb	r3, [r2, r3]
 8004b4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a0d      	ldr	r2, [pc, #52]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b52:	fb03 f202 	mul.w	r2, r3, r2
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	e004      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a0c      	ldr	r2, [pc, #48]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b64:	fb02 f303 	mul.w	r3, r2, r3
 8004b68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	613b      	str	r3, [r7, #16]
      break;
 8004b6e:	e002      	b.n	8004b76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b70:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b72:	613b      	str	r3, [r7, #16]
      break;
 8004b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b76:	693b      	ldr	r3, [r7, #16]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000
 8004b88:	007a1200 	.word	0x007a1200
 8004b8c:	08007404 	.word	0x08007404
 8004b90:	08007414 	.word	0x08007414
 8004b94:	003d0900 	.word	0x003d0900

08004b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b9c:	4b02      	ldr	r3, [pc, #8]	@ (8004ba8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr
 8004ba8:	20000028 	.word	0x20000028

08004bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bb0:	f7ff fff2 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b05      	ldr	r3, [pc, #20]	@ (8004bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4903      	ldr	r1, [pc, #12]	@ (8004bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	080073fc 	.word	0x080073fc

08004bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bd8:	f7ff ffde 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4b05      	ldr	r3, [pc, #20]	@ (8004bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	0adb      	lsrs	r3, r3, #11
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	4903      	ldr	r1, [pc, #12]	@ (8004bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bea:	5ccb      	ldrb	r3, [r1, r3]
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	080073fc 	.word	0x080073fc

08004bfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c04:	4b0a      	ldr	r3, [pc, #40]	@ (8004c30 <RCC_Delay+0x34>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a0a      	ldr	r2, [pc, #40]	@ (8004c34 <RCC_Delay+0x38>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	0a5b      	lsrs	r3, r3, #9
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	fb02 f303 	mul.w	r3, r2, r3
 8004c16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c18:	bf00      	nop
  }
  while (Delay --);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1e5a      	subs	r2, r3, #1
 8004c1e:	60fa      	str	r2, [r7, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f9      	bne.n	8004c18 <RCC_Delay+0x1c>
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bc80      	pop	{r7}
 8004c2e:	4770      	bx	lr
 8004c30:	20000028 	.word	0x20000028
 8004c34:	10624dd3 	.word	0x10624dd3

08004c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e041      	b.n	8004cce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d106      	bne.n	8004c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fd fe12 	bl	8002888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f000 fab2 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b082      	sub	sp, #8
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e041      	b.n	8004d6c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f839 	bl	8004d74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2202      	movs	r2, #2
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3304      	adds	r3, #4
 8004d12:	4619      	mov	r1, r3
 8004d14:	4610      	mov	r0, r2
 8004d16:	f000 fa63 	bl	80051e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <HAL_TIM_PWM_Start+0x24>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	bf14      	ite	ne
 8004da4:	2301      	movne	r3, #1
 8004da6:	2300      	moveq	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e022      	b.n	8004df2 <HAL_TIM_PWM_Start+0x6a>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d109      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0x3e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	bf14      	ite	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	2300      	moveq	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	e015      	b.n	8004df2 <HAL_TIM_PWM_Start+0x6a>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d109      	bne.n	8004de0 <HAL_TIM_PWM_Start+0x58>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	bf14      	ite	ne
 8004dd8:	2301      	movne	r3, #1
 8004dda:	2300      	moveq	r3, #0
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	e008      	b.n	8004df2 <HAL_TIM_PWM_Start+0x6a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	bf14      	ite	ne
 8004dec:	2301      	movne	r3, #1
 8004dee:	2300      	moveq	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e05e      	b.n	8004eb8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d104      	bne.n	8004e0a <HAL_TIM_PWM_Start+0x82>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e08:	e013      	b.n	8004e32 <HAL_TIM_PWM_Start+0xaa>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_PWM_Start+0x92>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e18:	e00b      	b.n	8004e32 <HAL_TIM_PWM_Start+0xaa>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d104      	bne.n	8004e2a <HAL_TIM_PWM_Start+0xa2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e28:	e003      	b.n	8004e32 <HAL_TIM_PWM_Start+0xaa>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2201      	movs	r2, #1
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fc50 	bl	80056e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec0 <HAL_TIM_PWM_Start+0x138>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d107      	bne.n	8004e5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a18      	ldr	r2, [pc, #96]	@ (8004ec0 <HAL_TIM_PWM_Start+0x138>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <HAL_TIM_PWM_Start+0xfa>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e6c:	d009      	beq.n	8004e82 <HAL_TIM_PWM_Start+0xfa>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a14      	ldr	r2, [pc, #80]	@ (8004ec4 <HAL_TIM_PWM_Start+0x13c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_TIM_PWM_Start+0xfa>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a12      	ldr	r2, [pc, #72]	@ (8004ec8 <HAL_TIM_PWM_Start+0x140>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d111      	bne.n	8004ea6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b06      	cmp	r3, #6
 8004e92:	d010      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea4:	e007      	b.n	8004eb6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800

08004ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e0ae      	b.n	8005048 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b0c      	cmp	r3, #12
 8004ef6:	f200 809f 	bhi.w	8005038 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004efa:	a201      	add	r2, pc, #4	@ (adr r2, 8004f00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f35 	.word	0x08004f35
 8004f04:	08005039 	.word	0x08005039
 8004f08:	08005039 	.word	0x08005039
 8004f0c:	08005039 	.word	0x08005039
 8004f10:	08004f75 	.word	0x08004f75
 8004f14:	08005039 	.word	0x08005039
 8004f18:	08005039 	.word	0x08005039
 8004f1c:	08005039 	.word	0x08005039
 8004f20:	08004fb7 	.word	0x08004fb7
 8004f24:	08005039 	.word	0x08005039
 8004f28:	08005039 	.word	0x08005039
 8004f2c:	08005039 	.word	0x08005039
 8004f30:	08004ff7 	.word	0x08004ff7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f9b2 	bl	80052a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0208 	orr.w	r2, r2, #8
 8004f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0204 	bic.w	r2, r2, #4
 8004f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6999      	ldr	r1, [r3, #24]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	619a      	str	r2, [r3, #24]
      break;
 8004f72:	e064      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 f9f8 	bl	8005370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6999      	ldr	r1, [r3, #24]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	021a      	lsls	r2, r3, #8
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	619a      	str	r2, [r3, #24]
      break;
 8004fb4:	e043      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fa41 	bl	8005444 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0208 	orr.w	r2, r2, #8
 8004fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0204 	bic.w	r2, r2, #4
 8004fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69d9      	ldr	r1, [r3, #28]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	61da      	str	r2, [r3, #28]
      break;
 8004ff4:	e023      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fa8b 	bl	8005518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69d9      	ldr	r1, [r3, #28]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	021a      	lsls	r2, r3, #8
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	61da      	str	r2, [r3, #28]
      break;
 8005036:	e002      	b.n	800503e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	75fb      	strb	r3, [r7, #23]
      break;
 800503c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005046:	7dfb      	ldrb	r3, [r7, #23]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_TIM_ConfigClockSource+0x1c>
 8005068:	2302      	movs	r3, #2
 800506a:	e0b4      	b.n	80051d6 <HAL_TIM_ConfigClockSource+0x186>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800508a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005092:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050a4:	d03e      	beq.n	8005124 <HAL_TIM_ConfigClockSource+0xd4>
 80050a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050aa:	f200 8087 	bhi.w	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b2:	f000 8086 	beq.w	80051c2 <HAL_TIM_ConfigClockSource+0x172>
 80050b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ba:	d87f      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050bc:	2b70      	cmp	r3, #112	@ 0x70
 80050be:	d01a      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0xa6>
 80050c0:	2b70      	cmp	r3, #112	@ 0x70
 80050c2:	d87b      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050c4:	2b60      	cmp	r3, #96	@ 0x60
 80050c6:	d050      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x11a>
 80050c8:	2b60      	cmp	r3, #96	@ 0x60
 80050ca:	d877      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050cc:	2b50      	cmp	r3, #80	@ 0x50
 80050ce:	d03c      	beq.n	800514a <HAL_TIM_ConfigClockSource+0xfa>
 80050d0:	2b50      	cmp	r3, #80	@ 0x50
 80050d2:	d873      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050d4:	2b40      	cmp	r3, #64	@ 0x40
 80050d6:	d058      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x13a>
 80050d8:	2b40      	cmp	r3, #64	@ 0x40
 80050da:	d86f      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050dc:	2b30      	cmp	r3, #48	@ 0x30
 80050de:	d064      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050e0:	2b30      	cmp	r3, #48	@ 0x30
 80050e2:	d86b      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d060      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d867      	bhi.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d05c      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d05a      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x15a>
 80050f4:	e062      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005106:	f000 facc 	bl	80056a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	609a      	str	r2, [r3, #8]
      break;
 8005122:	e04f      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005134:	f000 fab5 	bl	80056a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005146:	609a      	str	r2, [r3, #8]
      break;
 8005148:	e03c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005156:	461a      	mov	r2, r3
 8005158:	f000 fa2c 	bl	80055b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2150      	movs	r1, #80	@ 0x50
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fa83 	bl	800566e <TIM_ITRx_SetConfig>
      break;
 8005168:	e02c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005176:	461a      	mov	r2, r3
 8005178:	f000 fa4a 	bl	8005610 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2160      	movs	r1, #96	@ 0x60
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fa73 	bl	800566e <TIM_ITRx_SetConfig>
      break;
 8005188:	e01c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005196:	461a      	mov	r2, r3
 8005198:	f000 fa0c 	bl	80055b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2140      	movs	r1, #64	@ 0x40
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fa63 	bl	800566e <TIM_ITRx_SetConfig>
      break;
 80051a8:	e00c      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f000 fa5a 	bl	800566e <TIM_ITRx_SetConfig>
      break;
 80051ba:	e003      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	73fb      	strb	r3, [r7, #15]
      break;
 80051c0:	e000      	b.n	80051c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a29      	ldr	r2, [pc, #164]	@ (8005298 <TIM_Base_SetConfig+0xb8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00b      	beq.n	8005210 <TIM_Base_SetConfig+0x30>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051fe:	d007      	beq.n	8005210 <TIM_Base_SetConfig+0x30>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a26      	ldr	r2, [pc, #152]	@ (800529c <TIM_Base_SetConfig+0xbc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_Base_SetConfig+0x30>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a25      	ldr	r2, [pc, #148]	@ (80052a0 <TIM_Base_SetConfig+0xc0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d108      	bne.n	8005222 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a1c      	ldr	r2, [pc, #112]	@ (8005298 <TIM_Base_SetConfig+0xb8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00b      	beq.n	8005242 <TIM_Base_SetConfig+0x62>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005230:	d007      	beq.n	8005242 <TIM_Base_SetConfig+0x62>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a19      	ldr	r2, [pc, #100]	@ (800529c <TIM_Base_SetConfig+0xbc>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <TIM_Base_SetConfig+0x62>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a18      	ldr	r2, [pc, #96]	@ (80052a0 <TIM_Base_SetConfig+0xc0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d108      	bne.n	8005254 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a07      	ldr	r2, [pc, #28]	@ (8005298 <TIM_Base_SetConfig+0xb8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d103      	bne.n	8005288 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	615a      	str	r2, [r3, #20]
}
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800

080052a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	f023 0201 	bic.w	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0303 	bic.w	r3, r3, #3
 80052da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f023 0302 	bic.w	r3, r3, #2
 80052ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a1c      	ldr	r2, [pc, #112]	@ (800536c <TIM_OC1_SetConfig+0xc8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d10c      	bne.n	800531a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f023 0308 	bic.w	r3, r3, #8
 8005306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f023 0304 	bic.w	r3, r3, #4
 8005318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a13      	ldr	r2, [pc, #76]	@ (800536c <TIM_OC1_SetConfig+0xc8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d111      	bne.n	8005346 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	621a      	str	r2, [r3, #32]
}
 8005360:	bf00      	nop
 8005362:	371c      	adds	r7, #28
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	40012c00 	.word	0x40012c00

08005370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f023 0210 	bic.w	r2, r3, #16
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800539e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f023 0320 	bic.w	r3, r3, #32
 80053ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005440 <TIM_OC2_SetConfig+0xd0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10d      	bne.n	80053ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a14      	ldr	r2, [pc, #80]	@ (8005440 <TIM_OC2_SetConfig+0xd0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d113      	bne.n	800541c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	621a      	str	r2, [r3, #32]
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr
 8005440:	40012c00 	.word	0x40012c00

08005444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0303 	bic.w	r3, r3, #3
 800547a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800548c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a1d      	ldr	r2, [pc, #116]	@ (8005514 <TIM_OC3_SetConfig+0xd0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d10d      	bne.n	80054be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a14      	ldr	r2, [pc, #80]	@ (8005514 <TIM_OC3_SetConfig+0xd0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d113      	bne.n	80054ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	621a      	str	r2, [r3, #32]
}
 8005508:	bf00      	nop
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40012c00 	.word	0x40012c00

08005518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800554e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	031b      	lsls	r3, r3, #12
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a0f      	ldr	r2, [pc, #60]	@ (80055b0 <TIM_OC4_SetConfig+0x98>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d109      	bne.n	800558c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800557e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	019b      	lsls	r3, r3, #6
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	621a      	str	r2, [r3, #32]
}
 80055a6:	bf00      	nop
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr
 80055b0:	40012c00 	.word	0x40012c00

080055b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f023 0201 	bic.w	r2, r3, #1
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f023 030a 	bic.w	r3, r3, #10
 80055f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	621a      	str	r2, [r3, #32]
}
 8005606:	bf00      	nop
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	bc80      	pop	{r7}
 800560e:	4770      	bx	lr

08005610 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	f023 0210 	bic.w	r2, r3, #16
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800563a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	031b      	lsls	r3, r3, #12
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800564c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	621a      	str	r2, [r3, #32]
}
 8005664:	bf00      	nop
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr

0800566e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800566e:	b480      	push	{r7}
 8005670:	b085      	sub	sp, #20
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	f043 0307 	orr.w	r3, r3, #7
 8005690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	609a      	str	r2, [r3, #8]
}
 8005698:	bf00      	nop
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr

080056a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b087      	sub	sp, #28
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	60f8      	str	r0, [r7, #12]
 80056aa:	60b9      	str	r1, [r7, #8]
 80056ac:	607a      	str	r2, [r7, #4]
 80056ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	021a      	lsls	r2, r3, #8
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	431a      	orrs	r2, r3
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	609a      	str	r2, [r3, #8]
}
 80056d6:	bf00      	nop
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr

080056e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	2201      	movs	r2, #1
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1a      	ldr	r2, [r3, #32]
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	43db      	mvns	r3, r3
 8005702:	401a      	ands	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a1a      	ldr	r2, [r3, #32]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	fa01 f303 	lsl.w	r3, r1, r3
 8005718:	431a      	orrs	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr

08005728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800573c:	2302      	movs	r3, #2
 800573e:	e046      	b.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a16      	ldr	r2, [pc, #88]	@ (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00e      	beq.n	80057a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800578c:	d009      	beq.n	80057a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a12      	ldr	r2, [pc, #72]	@ (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d004      	beq.n	80057a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a10      	ldr	r2, [pc, #64]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d10c      	bne.n	80057bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	68ba      	ldr	r2, [r7, #8]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800

080057e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e042      	b.n	800587c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fd f8b8 	bl	8002980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2224      	movs	r2, #36	@ 0x24
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fd09 	bl	8006240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800583c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695a      	ldr	r2, [r3, #20]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800584c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800585c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	4613      	mov	r3, r2
 8005890:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b20      	cmp	r3, #32
 800589c:	d121      	bne.n	80058e2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_UART_Transmit_IT+0x26>
 80058a4:	88fb      	ldrh	r3, [r7, #6]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e01a      	b.n	80058e4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	88fa      	ldrh	r2, [r7, #6]
 80058b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	88fa      	ldrh	r2, [r7, #6]
 80058be:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2221      	movs	r2, #33	@ 0x21
 80058ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058dc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	e000      	b.n	80058e4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80058e2:	2302      	movs	r3, #2
  }
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr

080058ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	4613      	mov	r3, r2
 80058fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b20      	cmp	r3, #32
 8005906:	d112      	bne.n	800592e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d002      	beq.n	8005914 <HAL_UART_Receive_IT+0x26>
 800590e:	88fb      	ldrh	r3, [r7, #6]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e00b      	b.n	8005930 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	461a      	mov	r2, r3
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 fab6 	bl	8005e96 <UART_Start_Receive_IT>
 800592a:	4603      	mov	r3, r0
 800592c:	e000      	b.n	8005930 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800592e:	2302      	movs	r3, #2
  }
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b0ba      	sub	sp, #232	@ 0xe8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800595e:	2300      	movs	r3, #0
 8005960:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005964:	2300      	movs	r3, #0
 8005966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800596a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005976:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10f      	bne.n	800599e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d009      	beq.n	800599e <HAL_UART_IRQHandler+0x66>
 800598a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fb93 	bl	80060c2 <UART_Receive_IT>
      return;
 800599c:	e25b      	b.n	8005e56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800599e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80de 	beq.w	8005b64 <HAL_UART_IRQHandler+0x22c>
 80059a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d106      	bne.n	80059c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 80d1 	beq.w	8005b64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00b      	beq.n	80059e6 <HAL_UART_IRQHandler+0xae>
 80059ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d005      	beq.n	80059e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059de:	f043 0201 	orr.w	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00b      	beq.n	8005a0a <HAL_UART_IRQHandler+0xd2>
 80059f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a02:	f043 0202 	orr.w	r2, r3, #2
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00b      	beq.n	8005a2e <HAL_UART_IRQHandler+0xf6>
 8005a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a26:	f043 0204 	orr.w	r2, r3, #4
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d011      	beq.n	8005a5e <HAL_UART_IRQHandler+0x126>
 8005a3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d105      	bne.n	8005a52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a56:	f043 0208 	orr.w	r2, r3, #8
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 81f2 	beq.w	8005e4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_UART_IRQHandler+0x14e>
 8005a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fb1e 	bl	80060c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bf14      	ite	ne
 8005a94:	2301      	movne	r3, #1
 8005a96:	2300      	moveq	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d103      	bne.n	8005ab2 <HAL_UART_IRQHandler+0x17a>
 8005aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d04f      	beq.n	8005b52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa28 	bl	8005f08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d041      	beq.n	8005b4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3314      	adds	r3, #20
 8005acc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3314      	adds	r3, #20
 8005aee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005af2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005af6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005afe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b02:	e841 2300 	strex	r3, r2, [r1]
 8005b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1d9      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d013      	beq.n	8005b42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1e:	4a7e      	ldr	r2, [pc, #504]	@ (8005d18 <HAL_UART_IRQHandler+0x3e0>)
 8005b20:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fd fa08 	bl	8002f3c <HAL_DMA_Abort_IT>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d016      	beq.n	8005b60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	e00e      	b.n	8005b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f993 	bl	8005e6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b48:	e00a      	b.n	8005b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f98f 	bl	8005e6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b50:	e006      	b.n	8005b60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f98b 	bl	8005e6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005b5e:	e175      	b.n	8005e4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b60:	bf00      	nop
    return;
 8005b62:	e173      	b.n	8005e4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	f040 814f 	bne.w	8005e0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b72:	f003 0310 	and.w	r3, r3, #16
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 8148 	beq.w	8005e0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 8141 	beq.w	8005e0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	60bb      	str	r3, [r7, #8]
 8005b9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 80b6 	beq.w	8005d1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8145 	beq.w	8005e50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	f080 813e 	bcs.w	8005e50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bda:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	f000 8088 	beq.w	8005cf8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	330c      	adds	r3, #12
 8005bee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c06:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c14:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c20:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1d9      	bne.n	8005be8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3314      	adds	r3, #20
 8005c3a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c3e:	e853 3f00 	ldrex	r3, [r3]
 8005c42:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c46:	f023 0301 	bic.w	r3, r3, #1
 8005c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3314      	adds	r3, #20
 8005c54:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c58:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c60:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e1      	bne.n	8005c34 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3314      	adds	r3, #20
 8005c76:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3314      	adds	r3, #20
 8005c90:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c94:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c96:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c9a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ca2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e3      	bne.n	8005c70 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	330c      	adds	r3, #12
 8005cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cc8:	f023 0310 	bic.w	r3, r3, #16
 8005ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005cda:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cdc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ce0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e3      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fd f8e7 	bl	8002ec6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f8b6 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d14:	e09c      	b.n	8005e50 <HAL_UART_IRQHandler+0x518>
 8005d16:	bf00      	nop
 8005d18:	08005fcd 	.word	0x08005fcd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 808e 	beq.w	8005e54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8089 	beq.w	8005e54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	330c      	adds	r3, #12
 8005d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	330c      	adds	r3, #12
 8005d62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005d66:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e3      	bne.n	8005d42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3314      	adds	r3, #20
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	623b      	str	r3, [r7, #32]
   return(result);
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3314      	adds	r3, #20
 8005d9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e3      	bne.n	8005d7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0310 	bic.w	r3, r3, #16
 8005dd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	330c      	adds	r3, #12
 8005de0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005de4:	61fa      	str	r2, [r7, #28]
 8005de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de8:	69b9      	ldr	r1, [r7, #24]
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	e841 2300 	strex	r3, r2, [r1]
 8005df0:	617b      	str	r3, [r7, #20]
   return(result);
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e3      	bne.n	8005dc0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e02:	4619      	mov	r1, r3
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f83b 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e0a:	e023      	b.n	8005e54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d009      	beq.n	8005e2c <HAL_UART_IRQHandler+0x4f4>
 8005e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f8e5 	bl	8005ff4 <UART_Transmit_IT>
    return;
 8005e2a:	e014      	b.n	8005e56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00e      	beq.n	8005e56 <HAL_UART_IRQHandler+0x51e>
 8005e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f924 	bl	8006092 <UART_EndTransmit_IT>
    return;
 8005e4a:	e004      	b.n	8005e56 <HAL_UART_IRQHandler+0x51e>
    return;
 8005e4c:	bf00      	nop
 8005e4e:	e002      	b.n	8005e56 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e50:	bf00      	nop
 8005e52:	e000      	b.n	8005e56 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e54:	bf00      	nop
  }
}
 8005e56:	37e8      	adds	r7, #232	@ 0xe8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bc80      	pop	{r7}
 8005e6c:	4770      	bx	lr

08005e6e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr

08005e96 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b085      	sub	sp, #20
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	88fa      	ldrh	r2, [r7, #6]
 8005eae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	88fa      	ldrh	r2, [r7, #6]
 8005eb4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2222      	movs	r2, #34	@ 0x22
 8005ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d007      	beq.n	8005edc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005eda:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695a      	ldr	r2, [r3, #20]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0220 	orr.w	r2, r2, #32
 8005efa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bc80      	pop	{r7}
 8005f06:	4770      	bx	lr

08005f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b095      	sub	sp, #84	@ 0x54
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f1a:	e853 3f00 	ldrex	r3, [r3]
 8005f1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	330c      	adds	r3, #12
 8005f2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f30:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f38:	e841 2300 	strex	r3, r2, [r1]
 8005f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1e5      	bne.n	8005f10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3314      	adds	r3, #20
 8005f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f023 0301 	bic.w	r3, r3, #1
 8005f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3314      	adds	r3, #20
 8005f62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e5      	bne.n	8005f44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d119      	bne.n	8005fb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f023 0310 	bic.w	r3, r3, #16
 8005f96:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fa0:	61ba      	str	r2, [r7, #24]
 8005fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa4:	6979      	ldr	r1, [r7, #20]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	e841 2300 	strex	r3, r2, [r1]
 8005fac:	613b      	str	r3, [r7, #16]
   return(result);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e5      	bne.n	8005f80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005fc2:	bf00      	nop
 8005fc4:	3754      	adds	r7, #84	@ 0x54
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bc80      	pop	{r7}
 8005fca:	4770      	bx	lr

08005fcc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7ff ff41 	bl	8005e6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fec:	bf00      	nop
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b21      	cmp	r3, #33	@ 0x21
 8006006:	d13e      	bne.n	8006086 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006010:	d114      	bne.n	800603c <UART_Transmit_IT+0x48>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d110      	bne.n	800603c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	461a      	mov	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800602e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	1c9a      	adds	r2, r3, #2
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	621a      	str	r2, [r3, #32]
 800603a:	e008      	b.n	800604e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	1c59      	adds	r1, r3, #1
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6211      	str	r1, [r2, #32]
 8006046:	781a      	ldrb	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29b      	uxth	r3, r3
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	4619      	mov	r1, r3
 800605c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10f      	bne.n	8006082 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006070:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68da      	ldr	r2, [r3, #12]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006080:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	e000      	b.n	8006088 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006086:	2302      	movs	r3, #2
  }
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr

08006092 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b082      	sub	sp, #8
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff fed2 	bl	8005e5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b08c      	sub	sp, #48	@ 0x30
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b22      	cmp	r3, #34	@ 0x22
 80060d4:	f040 80ae 	bne.w	8006234 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060e0:	d117      	bne.n	8006112 <UART_Receive_IT+0x50>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d113      	bne.n	8006112 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006100:	b29a      	uxth	r2, r3
 8006102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006104:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610a:	1c9a      	adds	r2, r3, #2
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006110:	e026      	b.n	8006160 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006116:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006118:	2300      	movs	r3, #0
 800611a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006124:	d007      	beq.n	8006136 <UART_Receive_IT+0x74>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <UART_Receive_IT+0x82>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	b2da      	uxtb	r2, r3
 800613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006140:	701a      	strb	r2, [r3, #0]
 8006142:	e008      	b.n	8006156 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006150:	b2da      	uxtb	r2, r3
 8006152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006154:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	b29b      	uxth	r3, r3
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	4619      	mov	r1, r3
 800616e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006170:	2b00      	cmp	r3, #0
 8006172:	d15d      	bne.n	8006230 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0220 	bic.w	r2, r2, #32
 8006182:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695a      	ldr	r2, [r3, #20]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0201 	bic.w	r2, r2, #1
 80061a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d135      	bne.n	8006226 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	330c      	adds	r3, #12
 80061c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	613b      	str	r3, [r7, #16]
   return(result);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f023 0310 	bic.w	r3, r3, #16
 80061d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	330c      	adds	r3, #12
 80061de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e0:	623a      	str	r2, [r7, #32]
 80061e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	69f9      	ldr	r1, [r7, #28]
 80061e6:	6a3a      	ldr	r2, [r7, #32]
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e5      	bne.n	80061c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0310 	and.w	r3, r3, #16
 80061fe:	2b10      	cmp	r3, #16
 8006200:	d10a      	bne.n	8006218 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006202:	2300      	movs	r3, #0
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff fe2e 	bl	8005e80 <HAL_UARTEx_RxEventCallback>
 8006224:	e002      	b.n	800622c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7fc f806 	bl	8002238 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	e002      	b.n	8006236 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	e000      	b.n	8006236 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006234:	2302      	movs	r3, #2
  }
}
 8006236:	4618      	mov	r0, r3
 8006238:	3730      	adds	r7, #48	@ 0x30
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800627a:	f023 030c 	bic.w	r3, r3, #12
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	430b      	orrs	r3, r1
 8006286:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006354 <UART_SetConfig+0x114>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d103      	bne.n	80062b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80062a8:	f7fe fc94 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	e002      	b.n	80062b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80062b0:	f7fe fc7c 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 80062b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	009a      	lsls	r2, r3, #2
 80062c0:	441a      	add	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062cc:	4a22      	ldr	r2, [pc, #136]	@ (8006358 <UART_SetConfig+0x118>)
 80062ce:	fba2 2303 	umull	r2, r3, r2, r3
 80062d2:	095b      	lsrs	r3, r3, #5
 80062d4:	0119      	lsls	r1, r3, #4
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	009a      	lsls	r2, r3, #2
 80062e0:	441a      	add	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80062ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006358 <UART_SetConfig+0x118>)
 80062ee:	fba3 0302 	umull	r0, r3, r3, r2
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	2064      	movs	r0, #100	@ 0x64
 80062f6:	fb00 f303 	mul.w	r3, r0, r3
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	011b      	lsls	r3, r3, #4
 80062fe:	3332      	adds	r3, #50	@ 0x32
 8006300:	4a15      	ldr	r2, [pc, #84]	@ (8006358 <UART_SetConfig+0x118>)
 8006302:	fba2 2303 	umull	r2, r3, r2, r3
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800630c:	4419      	add	r1, r3
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009a      	lsls	r2, r3, #2
 8006318:	441a      	add	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	fbb2 f2f3 	udiv	r2, r2, r3
 8006324:	4b0c      	ldr	r3, [pc, #48]	@ (8006358 <UART_SetConfig+0x118>)
 8006326:	fba3 0302 	umull	r0, r3, r3, r2
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	2064      	movs	r0, #100	@ 0x64
 800632e:	fb00 f303 	mul.w	r3, r0, r3
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	3332      	adds	r3, #50	@ 0x32
 8006338:	4a07      	ldr	r2, [pc, #28]	@ (8006358 <UART_SetConfig+0x118>)
 800633a:	fba2 2303 	umull	r2, r3, r2, r3
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	f003 020f 	and.w	r2, r3, #15
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	440a      	add	r2, r1
 800634a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800634c:	bf00      	nop
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40013800 	.word	0x40013800
 8006358:	51eb851f 	.word	0x51eb851f

0800635c <sniprintf>:
 800635c:	b40c      	push	{r2, r3}
 800635e:	b530      	push	{r4, r5, lr}
 8006360:	4b17      	ldr	r3, [pc, #92]	@ (80063c0 <sniprintf+0x64>)
 8006362:	1e0c      	subs	r4, r1, #0
 8006364:	681d      	ldr	r5, [r3, #0]
 8006366:	b09d      	sub	sp, #116	@ 0x74
 8006368:	da08      	bge.n	800637c <sniprintf+0x20>
 800636a:	238b      	movs	r3, #139	@ 0x8b
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	602b      	str	r3, [r5, #0]
 8006372:	b01d      	add	sp, #116	@ 0x74
 8006374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006378:	b002      	add	sp, #8
 800637a:	4770      	bx	lr
 800637c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006380:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006384:	bf0c      	ite	eq
 8006386:	4623      	moveq	r3, r4
 8006388:	f104 33ff 	addne.w	r3, r4, #4294967295
 800638c:	9304      	str	r3, [sp, #16]
 800638e:	9307      	str	r3, [sp, #28]
 8006390:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006394:	9002      	str	r0, [sp, #8]
 8006396:	9006      	str	r0, [sp, #24]
 8006398:	f8ad 3016 	strh.w	r3, [sp, #22]
 800639c:	4628      	mov	r0, r5
 800639e:	ab21      	add	r3, sp, #132	@ 0x84
 80063a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80063a2:	a902      	add	r1, sp, #8
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	f000 f993 	bl	80066d0 <_svfiprintf_r>
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	bfbc      	itt	lt
 80063ae:	238b      	movlt	r3, #139	@ 0x8b
 80063b0:	602b      	strlt	r3, [r5, #0]
 80063b2:	2c00      	cmp	r4, #0
 80063b4:	d0dd      	beq.n	8006372 <sniprintf+0x16>
 80063b6:	2200      	movs	r2, #0
 80063b8:	9b02      	ldr	r3, [sp, #8]
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	e7d9      	b.n	8006372 <sniprintf+0x16>
 80063be:	bf00      	nop
 80063c0:	20000034 	.word	0x20000034

080063c4 <memset>:
 80063c4:	4603      	mov	r3, r0
 80063c6:	4402      	add	r2, r0
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d100      	bne.n	80063ce <memset+0xa>
 80063cc:	4770      	bx	lr
 80063ce:	f803 1b01 	strb.w	r1, [r3], #1
 80063d2:	e7f9      	b.n	80063c8 <memset+0x4>

080063d4 <__errno>:
 80063d4:	4b01      	ldr	r3, [pc, #4]	@ (80063dc <__errno+0x8>)
 80063d6:	6818      	ldr	r0, [r3, #0]
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	20000034 	.word	0x20000034

080063e0 <__libc_init_array>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	2600      	movs	r6, #0
 80063e4:	4d0c      	ldr	r5, [pc, #48]	@ (8006418 <__libc_init_array+0x38>)
 80063e6:	4c0d      	ldr	r4, [pc, #52]	@ (800641c <__libc_init_array+0x3c>)
 80063e8:	1b64      	subs	r4, r4, r5
 80063ea:	10a4      	asrs	r4, r4, #2
 80063ec:	42a6      	cmp	r6, r4
 80063ee:	d109      	bne.n	8006404 <__libc_init_array+0x24>
 80063f0:	f000 ffde 	bl	80073b0 <_init>
 80063f4:	2600      	movs	r6, #0
 80063f6:	4d0a      	ldr	r5, [pc, #40]	@ (8006420 <__libc_init_array+0x40>)
 80063f8:	4c0a      	ldr	r4, [pc, #40]	@ (8006424 <__libc_init_array+0x44>)
 80063fa:	1b64      	subs	r4, r4, r5
 80063fc:	10a4      	asrs	r4, r4, #2
 80063fe:	42a6      	cmp	r6, r4
 8006400:	d105      	bne.n	800640e <__libc_init_array+0x2e>
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	f855 3b04 	ldr.w	r3, [r5], #4
 8006408:	4798      	blx	r3
 800640a:	3601      	adds	r6, #1
 800640c:	e7ee      	b.n	80063ec <__libc_init_array+0xc>
 800640e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006412:	4798      	blx	r3
 8006414:	3601      	adds	r6, #1
 8006416:	e7f2      	b.n	80063fe <__libc_init_array+0x1e>
 8006418:	080074c8 	.word	0x080074c8
 800641c:	080074c8 	.word	0x080074c8
 8006420:	080074c8 	.word	0x080074c8
 8006424:	080074cc 	.word	0x080074cc

08006428 <__retarget_lock_acquire_recursive>:
 8006428:	4770      	bx	lr

0800642a <__retarget_lock_release_recursive>:
 800642a:	4770      	bx	lr

0800642c <_free_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4605      	mov	r5, r0
 8006430:	2900      	cmp	r1, #0
 8006432:	d040      	beq.n	80064b6 <_free_r+0x8a>
 8006434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006438:	1f0c      	subs	r4, r1, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	bfb8      	it	lt
 800643e:	18e4      	addlt	r4, r4, r3
 8006440:	f000 f8de 	bl	8006600 <__malloc_lock>
 8006444:	4a1c      	ldr	r2, [pc, #112]	@ (80064b8 <_free_r+0x8c>)
 8006446:	6813      	ldr	r3, [r2, #0]
 8006448:	b933      	cbnz	r3, 8006458 <_free_r+0x2c>
 800644a:	6063      	str	r3, [r4, #4]
 800644c:	6014      	str	r4, [r2, #0]
 800644e:	4628      	mov	r0, r5
 8006450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006454:	f000 b8da 	b.w	800660c <__malloc_unlock>
 8006458:	42a3      	cmp	r3, r4
 800645a:	d908      	bls.n	800646e <_free_r+0x42>
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	1821      	adds	r1, r4, r0
 8006460:	428b      	cmp	r3, r1
 8006462:	bf01      	itttt	eq
 8006464:	6819      	ldreq	r1, [r3, #0]
 8006466:	685b      	ldreq	r3, [r3, #4]
 8006468:	1809      	addeq	r1, r1, r0
 800646a:	6021      	streq	r1, [r4, #0]
 800646c:	e7ed      	b.n	800644a <_free_r+0x1e>
 800646e:	461a      	mov	r2, r3
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	b10b      	cbz	r3, 8006478 <_free_r+0x4c>
 8006474:	42a3      	cmp	r3, r4
 8006476:	d9fa      	bls.n	800646e <_free_r+0x42>
 8006478:	6811      	ldr	r1, [r2, #0]
 800647a:	1850      	adds	r0, r2, r1
 800647c:	42a0      	cmp	r0, r4
 800647e:	d10b      	bne.n	8006498 <_free_r+0x6c>
 8006480:	6820      	ldr	r0, [r4, #0]
 8006482:	4401      	add	r1, r0
 8006484:	1850      	adds	r0, r2, r1
 8006486:	4283      	cmp	r3, r0
 8006488:	6011      	str	r1, [r2, #0]
 800648a:	d1e0      	bne.n	800644e <_free_r+0x22>
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	4408      	add	r0, r1
 8006492:	6010      	str	r0, [r2, #0]
 8006494:	6053      	str	r3, [r2, #4]
 8006496:	e7da      	b.n	800644e <_free_r+0x22>
 8006498:	d902      	bls.n	80064a0 <_free_r+0x74>
 800649a:	230c      	movs	r3, #12
 800649c:	602b      	str	r3, [r5, #0]
 800649e:	e7d6      	b.n	800644e <_free_r+0x22>
 80064a0:	6820      	ldr	r0, [r4, #0]
 80064a2:	1821      	adds	r1, r4, r0
 80064a4:	428b      	cmp	r3, r1
 80064a6:	bf01      	itttt	eq
 80064a8:	6819      	ldreq	r1, [r3, #0]
 80064aa:	685b      	ldreq	r3, [r3, #4]
 80064ac:	1809      	addeq	r1, r1, r0
 80064ae:	6021      	streq	r1, [r4, #0]
 80064b0:	6063      	str	r3, [r4, #4]
 80064b2:	6054      	str	r4, [r2, #4]
 80064b4:	e7cb      	b.n	800644e <_free_r+0x22>
 80064b6:	bd38      	pop	{r3, r4, r5, pc}
 80064b8:	20000880 	.word	0x20000880

080064bc <sbrk_aligned>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	4e0f      	ldr	r6, [pc, #60]	@ (80064fc <sbrk_aligned+0x40>)
 80064c0:	460c      	mov	r4, r1
 80064c2:	6831      	ldr	r1, [r6, #0]
 80064c4:	4605      	mov	r5, r0
 80064c6:	b911      	cbnz	r1, 80064ce <sbrk_aligned+0x12>
 80064c8:	f000 fbaa 	bl	8006c20 <_sbrk_r>
 80064cc:	6030      	str	r0, [r6, #0]
 80064ce:	4621      	mov	r1, r4
 80064d0:	4628      	mov	r0, r5
 80064d2:	f000 fba5 	bl	8006c20 <_sbrk_r>
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	d103      	bne.n	80064e2 <sbrk_aligned+0x26>
 80064da:	f04f 34ff 	mov.w	r4, #4294967295
 80064de:	4620      	mov	r0, r4
 80064e0:	bd70      	pop	{r4, r5, r6, pc}
 80064e2:	1cc4      	adds	r4, r0, #3
 80064e4:	f024 0403 	bic.w	r4, r4, #3
 80064e8:	42a0      	cmp	r0, r4
 80064ea:	d0f8      	beq.n	80064de <sbrk_aligned+0x22>
 80064ec:	1a21      	subs	r1, r4, r0
 80064ee:	4628      	mov	r0, r5
 80064f0:	f000 fb96 	bl	8006c20 <_sbrk_r>
 80064f4:	3001      	adds	r0, #1
 80064f6:	d1f2      	bne.n	80064de <sbrk_aligned+0x22>
 80064f8:	e7ef      	b.n	80064da <sbrk_aligned+0x1e>
 80064fa:	bf00      	nop
 80064fc:	2000087c 	.word	0x2000087c

08006500 <_malloc_r>:
 8006500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006504:	1ccd      	adds	r5, r1, #3
 8006506:	f025 0503 	bic.w	r5, r5, #3
 800650a:	3508      	adds	r5, #8
 800650c:	2d0c      	cmp	r5, #12
 800650e:	bf38      	it	cc
 8006510:	250c      	movcc	r5, #12
 8006512:	2d00      	cmp	r5, #0
 8006514:	4606      	mov	r6, r0
 8006516:	db01      	blt.n	800651c <_malloc_r+0x1c>
 8006518:	42a9      	cmp	r1, r5
 800651a:	d904      	bls.n	8006526 <_malloc_r+0x26>
 800651c:	230c      	movs	r3, #12
 800651e:	6033      	str	r3, [r6, #0]
 8006520:	2000      	movs	r0, #0
 8006522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006526:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065fc <_malloc_r+0xfc>
 800652a:	f000 f869 	bl	8006600 <__malloc_lock>
 800652e:	f8d8 3000 	ldr.w	r3, [r8]
 8006532:	461c      	mov	r4, r3
 8006534:	bb44      	cbnz	r4, 8006588 <_malloc_r+0x88>
 8006536:	4629      	mov	r1, r5
 8006538:	4630      	mov	r0, r6
 800653a:	f7ff ffbf 	bl	80064bc <sbrk_aligned>
 800653e:	1c43      	adds	r3, r0, #1
 8006540:	4604      	mov	r4, r0
 8006542:	d158      	bne.n	80065f6 <_malloc_r+0xf6>
 8006544:	f8d8 4000 	ldr.w	r4, [r8]
 8006548:	4627      	mov	r7, r4
 800654a:	2f00      	cmp	r7, #0
 800654c:	d143      	bne.n	80065d6 <_malloc_r+0xd6>
 800654e:	2c00      	cmp	r4, #0
 8006550:	d04b      	beq.n	80065ea <_malloc_r+0xea>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	4639      	mov	r1, r7
 8006556:	4630      	mov	r0, r6
 8006558:	eb04 0903 	add.w	r9, r4, r3
 800655c:	f000 fb60 	bl	8006c20 <_sbrk_r>
 8006560:	4581      	cmp	r9, r0
 8006562:	d142      	bne.n	80065ea <_malloc_r+0xea>
 8006564:	6821      	ldr	r1, [r4, #0]
 8006566:	4630      	mov	r0, r6
 8006568:	1a6d      	subs	r5, r5, r1
 800656a:	4629      	mov	r1, r5
 800656c:	f7ff ffa6 	bl	80064bc <sbrk_aligned>
 8006570:	3001      	adds	r0, #1
 8006572:	d03a      	beq.n	80065ea <_malloc_r+0xea>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	442b      	add	r3, r5
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	f8d8 3000 	ldr.w	r3, [r8]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	bb62      	cbnz	r2, 80065dc <_malloc_r+0xdc>
 8006582:	f8c8 7000 	str.w	r7, [r8]
 8006586:	e00f      	b.n	80065a8 <_malloc_r+0xa8>
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	1b52      	subs	r2, r2, r5
 800658c:	d420      	bmi.n	80065d0 <_malloc_r+0xd0>
 800658e:	2a0b      	cmp	r2, #11
 8006590:	d917      	bls.n	80065c2 <_malloc_r+0xc2>
 8006592:	1961      	adds	r1, r4, r5
 8006594:	42a3      	cmp	r3, r4
 8006596:	6025      	str	r5, [r4, #0]
 8006598:	bf18      	it	ne
 800659a:	6059      	strne	r1, [r3, #4]
 800659c:	6863      	ldr	r3, [r4, #4]
 800659e:	bf08      	it	eq
 80065a0:	f8c8 1000 	streq.w	r1, [r8]
 80065a4:	5162      	str	r2, [r4, r5]
 80065a6:	604b      	str	r3, [r1, #4]
 80065a8:	4630      	mov	r0, r6
 80065aa:	f000 f82f 	bl	800660c <__malloc_unlock>
 80065ae:	f104 000b 	add.w	r0, r4, #11
 80065b2:	1d23      	adds	r3, r4, #4
 80065b4:	f020 0007 	bic.w	r0, r0, #7
 80065b8:	1ac2      	subs	r2, r0, r3
 80065ba:	bf1c      	itt	ne
 80065bc:	1a1b      	subne	r3, r3, r0
 80065be:	50a3      	strne	r3, [r4, r2]
 80065c0:	e7af      	b.n	8006522 <_malloc_r+0x22>
 80065c2:	6862      	ldr	r2, [r4, #4]
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	bf0c      	ite	eq
 80065c8:	f8c8 2000 	streq.w	r2, [r8]
 80065cc:	605a      	strne	r2, [r3, #4]
 80065ce:	e7eb      	b.n	80065a8 <_malloc_r+0xa8>
 80065d0:	4623      	mov	r3, r4
 80065d2:	6864      	ldr	r4, [r4, #4]
 80065d4:	e7ae      	b.n	8006534 <_malloc_r+0x34>
 80065d6:	463c      	mov	r4, r7
 80065d8:	687f      	ldr	r7, [r7, #4]
 80065da:	e7b6      	b.n	800654a <_malloc_r+0x4a>
 80065dc:	461a      	mov	r2, r3
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	42a3      	cmp	r3, r4
 80065e2:	d1fb      	bne.n	80065dc <_malloc_r+0xdc>
 80065e4:	2300      	movs	r3, #0
 80065e6:	6053      	str	r3, [r2, #4]
 80065e8:	e7de      	b.n	80065a8 <_malloc_r+0xa8>
 80065ea:	230c      	movs	r3, #12
 80065ec:	4630      	mov	r0, r6
 80065ee:	6033      	str	r3, [r6, #0]
 80065f0:	f000 f80c 	bl	800660c <__malloc_unlock>
 80065f4:	e794      	b.n	8006520 <_malloc_r+0x20>
 80065f6:	6005      	str	r5, [r0, #0]
 80065f8:	e7d6      	b.n	80065a8 <_malloc_r+0xa8>
 80065fa:	bf00      	nop
 80065fc:	20000880 	.word	0x20000880

08006600 <__malloc_lock>:
 8006600:	4801      	ldr	r0, [pc, #4]	@ (8006608 <__malloc_lock+0x8>)
 8006602:	f7ff bf11 	b.w	8006428 <__retarget_lock_acquire_recursive>
 8006606:	bf00      	nop
 8006608:	20000878 	.word	0x20000878

0800660c <__malloc_unlock>:
 800660c:	4801      	ldr	r0, [pc, #4]	@ (8006614 <__malloc_unlock+0x8>)
 800660e:	f7ff bf0c 	b.w	800642a <__retarget_lock_release_recursive>
 8006612:	bf00      	nop
 8006614:	20000878 	.word	0x20000878

08006618 <__ssputs_r>:
 8006618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800661c:	461f      	mov	r7, r3
 800661e:	688e      	ldr	r6, [r1, #8]
 8006620:	4682      	mov	sl, r0
 8006622:	42be      	cmp	r6, r7
 8006624:	460c      	mov	r4, r1
 8006626:	4690      	mov	r8, r2
 8006628:	680b      	ldr	r3, [r1, #0]
 800662a:	d82d      	bhi.n	8006688 <__ssputs_r+0x70>
 800662c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006630:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006634:	d026      	beq.n	8006684 <__ssputs_r+0x6c>
 8006636:	6965      	ldr	r5, [r4, #20]
 8006638:	6909      	ldr	r1, [r1, #16]
 800663a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800663e:	eba3 0901 	sub.w	r9, r3, r1
 8006642:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006646:	1c7b      	adds	r3, r7, #1
 8006648:	444b      	add	r3, r9
 800664a:	106d      	asrs	r5, r5, #1
 800664c:	429d      	cmp	r5, r3
 800664e:	bf38      	it	cc
 8006650:	461d      	movcc	r5, r3
 8006652:	0553      	lsls	r3, r2, #21
 8006654:	d527      	bpl.n	80066a6 <__ssputs_r+0x8e>
 8006656:	4629      	mov	r1, r5
 8006658:	f7ff ff52 	bl	8006500 <_malloc_r>
 800665c:	4606      	mov	r6, r0
 800665e:	b360      	cbz	r0, 80066ba <__ssputs_r+0xa2>
 8006660:	464a      	mov	r2, r9
 8006662:	6921      	ldr	r1, [r4, #16]
 8006664:	f000 fafa 	bl	8006c5c <memcpy>
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800666e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006672:	81a3      	strh	r3, [r4, #12]
 8006674:	6126      	str	r6, [r4, #16]
 8006676:	444e      	add	r6, r9
 8006678:	6026      	str	r6, [r4, #0]
 800667a:	463e      	mov	r6, r7
 800667c:	6165      	str	r5, [r4, #20]
 800667e:	eba5 0509 	sub.w	r5, r5, r9
 8006682:	60a5      	str	r5, [r4, #8]
 8006684:	42be      	cmp	r6, r7
 8006686:	d900      	bls.n	800668a <__ssputs_r+0x72>
 8006688:	463e      	mov	r6, r7
 800668a:	4632      	mov	r2, r6
 800668c:	4641      	mov	r1, r8
 800668e:	6820      	ldr	r0, [r4, #0]
 8006690:	f000 faac 	bl	8006bec <memmove>
 8006694:	2000      	movs	r0, #0
 8006696:	68a3      	ldr	r3, [r4, #8]
 8006698:	1b9b      	subs	r3, r3, r6
 800669a:	60a3      	str	r3, [r4, #8]
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	4433      	add	r3, r6
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a6:	462a      	mov	r2, r5
 80066a8:	f000 fae6 	bl	8006c78 <_realloc_r>
 80066ac:	4606      	mov	r6, r0
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d1e0      	bne.n	8006674 <__ssputs_r+0x5c>
 80066b2:	4650      	mov	r0, sl
 80066b4:	6921      	ldr	r1, [r4, #16]
 80066b6:	f7ff feb9 	bl	800642c <_free_r>
 80066ba:	230c      	movs	r3, #12
 80066bc:	f8ca 3000 	str.w	r3, [sl]
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	f04f 30ff 	mov.w	r0, #4294967295
 80066c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ca:	81a3      	strh	r3, [r4, #12]
 80066cc:	e7e9      	b.n	80066a2 <__ssputs_r+0x8a>
	...

080066d0 <_svfiprintf_r>:
 80066d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d4:	4698      	mov	r8, r3
 80066d6:	898b      	ldrh	r3, [r1, #12]
 80066d8:	4607      	mov	r7, r0
 80066da:	061b      	lsls	r3, r3, #24
 80066dc:	460d      	mov	r5, r1
 80066de:	4614      	mov	r4, r2
 80066e0:	b09d      	sub	sp, #116	@ 0x74
 80066e2:	d510      	bpl.n	8006706 <_svfiprintf_r+0x36>
 80066e4:	690b      	ldr	r3, [r1, #16]
 80066e6:	b973      	cbnz	r3, 8006706 <_svfiprintf_r+0x36>
 80066e8:	2140      	movs	r1, #64	@ 0x40
 80066ea:	f7ff ff09 	bl	8006500 <_malloc_r>
 80066ee:	6028      	str	r0, [r5, #0]
 80066f0:	6128      	str	r0, [r5, #16]
 80066f2:	b930      	cbnz	r0, 8006702 <_svfiprintf_r+0x32>
 80066f4:	230c      	movs	r3, #12
 80066f6:	603b      	str	r3, [r7, #0]
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295
 80066fc:	b01d      	add	sp, #116	@ 0x74
 80066fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006702:	2340      	movs	r3, #64	@ 0x40
 8006704:	616b      	str	r3, [r5, #20]
 8006706:	2300      	movs	r3, #0
 8006708:	9309      	str	r3, [sp, #36]	@ 0x24
 800670a:	2320      	movs	r3, #32
 800670c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006710:	2330      	movs	r3, #48	@ 0x30
 8006712:	f04f 0901 	mov.w	r9, #1
 8006716:	f8cd 800c 	str.w	r8, [sp, #12]
 800671a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80068b4 <_svfiprintf_r+0x1e4>
 800671e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006722:	4623      	mov	r3, r4
 8006724:	469a      	mov	sl, r3
 8006726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800672a:	b10a      	cbz	r2, 8006730 <_svfiprintf_r+0x60>
 800672c:	2a25      	cmp	r2, #37	@ 0x25
 800672e:	d1f9      	bne.n	8006724 <_svfiprintf_r+0x54>
 8006730:	ebba 0b04 	subs.w	fp, sl, r4
 8006734:	d00b      	beq.n	800674e <_svfiprintf_r+0x7e>
 8006736:	465b      	mov	r3, fp
 8006738:	4622      	mov	r2, r4
 800673a:	4629      	mov	r1, r5
 800673c:	4638      	mov	r0, r7
 800673e:	f7ff ff6b 	bl	8006618 <__ssputs_r>
 8006742:	3001      	adds	r0, #1
 8006744:	f000 80a7 	beq.w	8006896 <_svfiprintf_r+0x1c6>
 8006748:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800674a:	445a      	add	r2, fp
 800674c:	9209      	str	r2, [sp, #36]	@ 0x24
 800674e:	f89a 3000 	ldrb.w	r3, [sl]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 809f 	beq.w	8006896 <_svfiprintf_r+0x1c6>
 8006758:	2300      	movs	r3, #0
 800675a:	f04f 32ff 	mov.w	r2, #4294967295
 800675e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006762:	f10a 0a01 	add.w	sl, sl, #1
 8006766:	9304      	str	r3, [sp, #16]
 8006768:	9307      	str	r3, [sp, #28]
 800676a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800676e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006770:	4654      	mov	r4, sl
 8006772:	2205      	movs	r2, #5
 8006774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006778:	484e      	ldr	r0, [pc, #312]	@ (80068b4 <_svfiprintf_r+0x1e4>)
 800677a:	f000 fa61 	bl	8006c40 <memchr>
 800677e:	9a04      	ldr	r2, [sp, #16]
 8006780:	b9d8      	cbnz	r0, 80067ba <_svfiprintf_r+0xea>
 8006782:	06d0      	lsls	r0, r2, #27
 8006784:	bf44      	itt	mi
 8006786:	2320      	movmi	r3, #32
 8006788:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800678c:	0711      	lsls	r1, r2, #28
 800678e:	bf44      	itt	mi
 8006790:	232b      	movmi	r3, #43	@ 0x2b
 8006792:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006796:	f89a 3000 	ldrb.w	r3, [sl]
 800679a:	2b2a      	cmp	r3, #42	@ 0x2a
 800679c:	d015      	beq.n	80067ca <_svfiprintf_r+0xfa>
 800679e:	4654      	mov	r4, sl
 80067a0:	2000      	movs	r0, #0
 80067a2:	f04f 0c0a 	mov.w	ip, #10
 80067a6:	9a07      	ldr	r2, [sp, #28]
 80067a8:	4621      	mov	r1, r4
 80067aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067ae:	3b30      	subs	r3, #48	@ 0x30
 80067b0:	2b09      	cmp	r3, #9
 80067b2:	d94b      	bls.n	800684c <_svfiprintf_r+0x17c>
 80067b4:	b1b0      	cbz	r0, 80067e4 <_svfiprintf_r+0x114>
 80067b6:	9207      	str	r2, [sp, #28]
 80067b8:	e014      	b.n	80067e4 <_svfiprintf_r+0x114>
 80067ba:	eba0 0308 	sub.w	r3, r0, r8
 80067be:	fa09 f303 	lsl.w	r3, r9, r3
 80067c2:	4313      	orrs	r3, r2
 80067c4:	46a2      	mov	sl, r4
 80067c6:	9304      	str	r3, [sp, #16]
 80067c8:	e7d2      	b.n	8006770 <_svfiprintf_r+0xa0>
 80067ca:	9b03      	ldr	r3, [sp, #12]
 80067cc:	1d19      	adds	r1, r3, #4
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	9103      	str	r1, [sp, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	bfbb      	ittet	lt
 80067d6:	425b      	neglt	r3, r3
 80067d8:	f042 0202 	orrlt.w	r2, r2, #2
 80067dc:	9307      	strge	r3, [sp, #28]
 80067de:	9307      	strlt	r3, [sp, #28]
 80067e0:	bfb8      	it	lt
 80067e2:	9204      	strlt	r2, [sp, #16]
 80067e4:	7823      	ldrb	r3, [r4, #0]
 80067e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80067e8:	d10a      	bne.n	8006800 <_svfiprintf_r+0x130>
 80067ea:	7863      	ldrb	r3, [r4, #1]
 80067ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80067ee:	d132      	bne.n	8006856 <_svfiprintf_r+0x186>
 80067f0:	9b03      	ldr	r3, [sp, #12]
 80067f2:	3402      	adds	r4, #2
 80067f4:	1d1a      	adds	r2, r3, #4
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	9203      	str	r2, [sp, #12]
 80067fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067fe:	9305      	str	r3, [sp, #20]
 8006800:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80068b8 <_svfiprintf_r+0x1e8>
 8006804:	2203      	movs	r2, #3
 8006806:	4650      	mov	r0, sl
 8006808:	7821      	ldrb	r1, [r4, #0]
 800680a:	f000 fa19 	bl	8006c40 <memchr>
 800680e:	b138      	cbz	r0, 8006820 <_svfiprintf_r+0x150>
 8006810:	2240      	movs	r2, #64	@ 0x40
 8006812:	9b04      	ldr	r3, [sp, #16]
 8006814:	eba0 000a 	sub.w	r0, r0, sl
 8006818:	4082      	lsls	r2, r0
 800681a:	4313      	orrs	r3, r2
 800681c:	3401      	adds	r4, #1
 800681e:	9304      	str	r3, [sp, #16]
 8006820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006824:	2206      	movs	r2, #6
 8006826:	4825      	ldr	r0, [pc, #148]	@ (80068bc <_svfiprintf_r+0x1ec>)
 8006828:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800682c:	f000 fa08 	bl	8006c40 <memchr>
 8006830:	2800      	cmp	r0, #0
 8006832:	d036      	beq.n	80068a2 <_svfiprintf_r+0x1d2>
 8006834:	4b22      	ldr	r3, [pc, #136]	@ (80068c0 <_svfiprintf_r+0x1f0>)
 8006836:	bb1b      	cbnz	r3, 8006880 <_svfiprintf_r+0x1b0>
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	3307      	adds	r3, #7
 800683c:	f023 0307 	bic.w	r3, r3, #7
 8006840:	3308      	adds	r3, #8
 8006842:	9303      	str	r3, [sp, #12]
 8006844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006846:	4433      	add	r3, r6
 8006848:	9309      	str	r3, [sp, #36]	@ 0x24
 800684a:	e76a      	b.n	8006722 <_svfiprintf_r+0x52>
 800684c:	460c      	mov	r4, r1
 800684e:	2001      	movs	r0, #1
 8006850:	fb0c 3202 	mla	r2, ip, r2, r3
 8006854:	e7a8      	b.n	80067a8 <_svfiprintf_r+0xd8>
 8006856:	2300      	movs	r3, #0
 8006858:	f04f 0c0a 	mov.w	ip, #10
 800685c:	4619      	mov	r1, r3
 800685e:	3401      	adds	r4, #1
 8006860:	9305      	str	r3, [sp, #20]
 8006862:	4620      	mov	r0, r4
 8006864:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006868:	3a30      	subs	r2, #48	@ 0x30
 800686a:	2a09      	cmp	r2, #9
 800686c:	d903      	bls.n	8006876 <_svfiprintf_r+0x1a6>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0c6      	beq.n	8006800 <_svfiprintf_r+0x130>
 8006872:	9105      	str	r1, [sp, #20]
 8006874:	e7c4      	b.n	8006800 <_svfiprintf_r+0x130>
 8006876:	4604      	mov	r4, r0
 8006878:	2301      	movs	r3, #1
 800687a:	fb0c 2101 	mla	r1, ip, r1, r2
 800687e:	e7f0      	b.n	8006862 <_svfiprintf_r+0x192>
 8006880:	ab03      	add	r3, sp, #12
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	462a      	mov	r2, r5
 8006886:	4638      	mov	r0, r7
 8006888:	4b0e      	ldr	r3, [pc, #56]	@ (80068c4 <_svfiprintf_r+0x1f4>)
 800688a:	a904      	add	r1, sp, #16
 800688c:	f3af 8000 	nop.w
 8006890:	1c42      	adds	r2, r0, #1
 8006892:	4606      	mov	r6, r0
 8006894:	d1d6      	bne.n	8006844 <_svfiprintf_r+0x174>
 8006896:	89ab      	ldrh	r3, [r5, #12]
 8006898:	065b      	lsls	r3, r3, #25
 800689a:	f53f af2d 	bmi.w	80066f8 <_svfiprintf_r+0x28>
 800689e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80068a0:	e72c      	b.n	80066fc <_svfiprintf_r+0x2c>
 80068a2:	ab03      	add	r3, sp, #12
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	462a      	mov	r2, r5
 80068a8:	4638      	mov	r0, r7
 80068aa:	4b06      	ldr	r3, [pc, #24]	@ (80068c4 <_svfiprintf_r+0x1f4>)
 80068ac:	a904      	add	r1, sp, #16
 80068ae:	f000 f87d 	bl	80069ac <_printf_i>
 80068b2:	e7ed      	b.n	8006890 <_svfiprintf_r+0x1c0>
 80068b4:	08007416 	.word	0x08007416
 80068b8:	0800741c 	.word	0x0800741c
 80068bc:	08007420 	.word	0x08007420
 80068c0:	00000000 	.word	0x00000000
 80068c4:	08006619 	.word	0x08006619

080068c8 <_printf_common>:
 80068c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068cc:	4616      	mov	r6, r2
 80068ce:	4698      	mov	r8, r3
 80068d0:	688a      	ldr	r2, [r1, #8]
 80068d2:	690b      	ldr	r3, [r1, #16]
 80068d4:	4607      	mov	r7, r0
 80068d6:	4293      	cmp	r3, r2
 80068d8:	bfb8      	it	lt
 80068da:	4613      	movlt	r3, r2
 80068dc:	6033      	str	r3, [r6, #0]
 80068de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068e2:	460c      	mov	r4, r1
 80068e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068e8:	b10a      	cbz	r2, 80068ee <_printf_common+0x26>
 80068ea:	3301      	adds	r3, #1
 80068ec:	6033      	str	r3, [r6, #0]
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	0699      	lsls	r1, r3, #26
 80068f2:	bf42      	ittt	mi
 80068f4:	6833      	ldrmi	r3, [r6, #0]
 80068f6:	3302      	addmi	r3, #2
 80068f8:	6033      	strmi	r3, [r6, #0]
 80068fa:	6825      	ldr	r5, [r4, #0]
 80068fc:	f015 0506 	ands.w	r5, r5, #6
 8006900:	d106      	bne.n	8006910 <_printf_common+0x48>
 8006902:	f104 0a19 	add.w	sl, r4, #25
 8006906:	68e3      	ldr	r3, [r4, #12]
 8006908:	6832      	ldr	r2, [r6, #0]
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	42ab      	cmp	r3, r5
 800690e:	dc2b      	bgt.n	8006968 <_printf_common+0xa0>
 8006910:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006914:	6822      	ldr	r2, [r4, #0]
 8006916:	3b00      	subs	r3, #0
 8006918:	bf18      	it	ne
 800691a:	2301      	movne	r3, #1
 800691c:	0692      	lsls	r2, r2, #26
 800691e:	d430      	bmi.n	8006982 <_printf_common+0xba>
 8006920:	4641      	mov	r1, r8
 8006922:	4638      	mov	r0, r7
 8006924:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006928:	47c8      	blx	r9
 800692a:	3001      	adds	r0, #1
 800692c:	d023      	beq.n	8006976 <_printf_common+0xae>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	6922      	ldr	r2, [r4, #16]
 8006932:	f003 0306 	and.w	r3, r3, #6
 8006936:	2b04      	cmp	r3, #4
 8006938:	bf14      	ite	ne
 800693a:	2500      	movne	r5, #0
 800693c:	6833      	ldreq	r3, [r6, #0]
 800693e:	f04f 0600 	mov.w	r6, #0
 8006942:	bf08      	it	eq
 8006944:	68e5      	ldreq	r5, [r4, #12]
 8006946:	f104 041a 	add.w	r4, r4, #26
 800694a:	bf08      	it	eq
 800694c:	1aed      	subeq	r5, r5, r3
 800694e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006952:	bf08      	it	eq
 8006954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006958:	4293      	cmp	r3, r2
 800695a:	bfc4      	itt	gt
 800695c:	1a9b      	subgt	r3, r3, r2
 800695e:	18ed      	addgt	r5, r5, r3
 8006960:	42b5      	cmp	r5, r6
 8006962:	d11a      	bne.n	800699a <_printf_common+0xd2>
 8006964:	2000      	movs	r0, #0
 8006966:	e008      	b.n	800697a <_printf_common+0xb2>
 8006968:	2301      	movs	r3, #1
 800696a:	4652      	mov	r2, sl
 800696c:	4641      	mov	r1, r8
 800696e:	4638      	mov	r0, r7
 8006970:	47c8      	blx	r9
 8006972:	3001      	adds	r0, #1
 8006974:	d103      	bne.n	800697e <_printf_common+0xb6>
 8006976:	f04f 30ff 	mov.w	r0, #4294967295
 800697a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697e:	3501      	adds	r5, #1
 8006980:	e7c1      	b.n	8006906 <_printf_common+0x3e>
 8006982:	2030      	movs	r0, #48	@ 0x30
 8006984:	18e1      	adds	r1, r4, r3
 8006986:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006990:	4422      	add	r2, r4
 8006992:	3302      	adds	r3, #2
 8006994:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006998:	e7c2      	b.n	8006920 <_printf_common+0x58>
 800699a:	2301      	movs	r3, #1
 800699c:	4622      	mov	r2, r4
 800699e:	4641      	mov	r1, r8
 80069a0:	4638      	mov	r0, r7
 80069a2:	47c8      	blx	r9
 80069a4:	3001      	adds	r0, #1
 80069a6:	d0e6      	beq.n	8006976 <_printf_common+0xae>
 80069a8:	3601      	adds	r6, #1
 80069aa:	e7d9      	b.n	8006960 <_printf_common+0x98>

080069ac <_printf_i>:
 80069ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069b0:	7e0f      	ldrb	r7, [r1, #24]
 80069b2:	4691      	mov	r9, r2
 80069b4:	2f78      	cmp	r7, #120	@ 0x78
 80069b6:	4680      	mov	r8, r0
 80069b8:	460c      	mov	r4, r1
 80069ba:	469a      	mov	sl, r3
 80069bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069c2:	d807      	bhi.n	80069d4 <_printf_i+0x28>
 80069c4:	2f62      	cmp	r7, #98	@ 0x62
 80069c6:	d80a      	bhi.n	80069de <_printf_i+0x32>
 80069c8:	2f00      	cmp	r7, #0
 80069ca:	f000 80d3 	beq.w	8006b74 <_printf_i+0x1c8>
 80069ce:	2f58      	cmp	r7, #88	@ 0x58
 80069d0:	f000 80ba 	beq.w	8006b48 <_printf_i+0x19c>
 80069d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069dc:	e03a      	b.n	8006a54 <_printf_i+0xa8>
 80069de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069e2:	2b15      	cmp	r3, #21
 80069e4:	d8f6      	bhi.n	80069d4 <_printf_i+0x28>
 80069e6:	a101      	add	r1, pc, #4	@ (adr r1, 80069ec <_printf_i+0x40>)
 80069e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069ec:	08006a45 	.word	0x08006a45
 80069f0:	08006a59 	.word	0x08006a59
 80069f4:	080069d5 	.word	0x080069d5
 80069f8:	080069d5 	.word	0x080069d5
 80069fc:	080069d5 	.word	0x080069d5
 8006a00:	080069d5 	.word	0x080069d5
 8006a04:	08006a59 	.word	0x08006a59
 8006a08:	080069d5 	.word	0x080069d5
 8006a0c:	080069d5 	.word	0x080069d5
 8006a10:	080069d5 	.word	0x080069d5
 8006a14:	080069d5 	.word	0x080069d5
 8006a18:	08006b5b 	.word	0x08006b5b
 8006a1c:	08006a83 	.word	0x08006a83
 8006a20:	08006b15 	.word	0x08006b15
 8006a24:	080069d5 	.word	0x080069d5
 8006a28:	080069d5 	.word	0x080069d5
 8006a2c:	08006b7d 	.word	0x08006b7d
 8006a30:	080069d5 	.word	0x080069d5
 8006a34:	08006a83 	.word	0x08006a83
 8006a38:	080069d5 	.word	0x080069d5
 8006a3c:	080069d5 	.word	0x080069d5
 8006a40:	08006b1d 	.word	0x08006b1d
 8006a44:	6833      	ldr	r3, [r6, #0]
 8006a46:	1d1a      	adds	r2, r3, #4
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6032      	str	r2, [r6, #0]
 8006a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a54:	2301      	movs	r3, #1
 8006a56:	e09e      	b.n	8006b96 <_printf_i+0x1ea>
 8006a58:	6833      	ldr	r3, [r6, #0]
 8006a5a:	6820      	ldr	r0, [r4, #0]
 8006a5c:	1d19      	adds	r1, r3, #4
 8006a5e:	6031      	str	r1, [r6, #0]
 8006a60:	0606      	lsls	r6, r0, #24
 8006a62:	d501      	bpl.n	8006a68 <_printf_i+0xbc>
 8006a64:	681d      	ldr	r5, [r3, #0]
 8006a66:	e003      	b.n	8006a70 <_printf_i+0xc4>
 8006a68:	0645      	lsls	r5, r0, #25
 8006a6a:	d5fb      	bpl.n	8006a64 <_printf_i+0xb8>
 8006a6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a70:	2d00      	cmp	r5, #0
 8006a72:	da03      	bge.n	8006a7c <_printf_i+0xd0>
 8006a74:	232d      	movs	r3, #45	@ 0x2d
 8006a76:	426d      	negs	r5, r5
 8006a78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a7c:	230a      	movs	r3, #10
 8006a7e:	4859      	ldr	r0, [pc, #356]	@ (8006be4 <_printf_i+0x238>)
 8006a80:	e011      	b.n	8006aa6 <_printf_i+0xfa>
 8006a82:	6821      	ldr	r1, [r4, #0]
 8006a84:	6833      	ldr	r3, [r6, #0]
 8006a86:	0608      	lsls	r0, r1, #24
 8006a88:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a8c:	d402      	bmi.n	8006a94 <_printf_i+0xe8>
 8006a8e:	0649      	lsls	r1, r1, #25
 8006a90:	bf48      	it	mi
 8006a92:	b2ad      	uxthmi	r5, r5
 8006a94:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a96:	6033      	str	r3, [r6, #0]
 8006a98:	bf14      	ite	ne
 8006a9a:	230a      	movne	r3, #10
 8006a9c:	2308      	moveq	r3, #8
 8006a9e:	4851      	ldr	r0, [pc, #324]	@ (8006be4 <_printf_i+0x238>)
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006aa6:	6866      	ldr	r6, [r4, #4]
 8006aa8:	2e00      	cmp	r6, #0
 8006aaa:	bfa8      	it	ge
 8006aac:	6821      	ldrge	r1, [r4, #0]
 8006aae:	60a6      	str	r6, [r4, #8]
 8006ab0:	bfa4      	itt	ge
 8006ab2:	f021 0104 	bicge.w	r1, r1, #4
 8006ab6:	6021      	strge	r1, [r4, #0]
 8006ab8:	b90d      	cbnz	r5, 8006abe <_printf_i+0x112>
 8006aba:	2e00      	cmp	r6, #0
 8006abc:	d04b      	beq.n	8006b56 <_printf_i+0x1aa>
 8006abe:	4616      	mov	r6, r2
 8006ac0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ac4:	fb03 5711 	mls	r7, r3, r1, r5
 8006ac8:	5dc7      	ldrb	r7, [r0, r7]
 8006aca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ace:	462f      	mov	r7, r5
 8006ad0:	42bb      	cmp	r3, r7
 8006ad2:	460d      	mov	r5, r1
 8006ad4:	d9f4      	bls.n	8006ac0 <_printf_i+0x114>
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	d10b      	bne.n	8006af2 <_printf_i+0x146>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	07df      	lsls	r7, r3, #31
 8006ade:	d508      	bpl.n	8006af2 <_printf_i+0x146>
 8006ae0:	6923      	ldr	r3, [r4, #16]
 8006ae2:	6861      	ldr	r1, [r4, #4]
 8006ae4:	4299      	cmp	r1, r3
 8006ae6:	bfde      	ittt	le
 8006ae8:	2330      	movle	r3, #48	@ 0x30
 8006aea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006aee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006af2:	1b92      	subs	r2, r2, r6
 8006af4:	6122      	str	r2, [r4, #16]
 8006af6:	464b      	mov	r3, r9
 8006af8:	4621      	mov	r1, r4
 8006afa:	4640      	mov	r0, r8
 8006afc:	f8cd a000 	str.w	sl, [sp]
 8006b00:	aa03      	add	r2, sp, #12
 8006b02:	f7ff fee1 	bl	80068c8 <_printf_common>
 8006b06:	3001      	adds	r0, #1
 8006b08:	d14a      	bne.n	8006ba0 <_printf_i+0x1f4>
 8006b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0e:	b004      	add	sp, #16
 8006b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	f043 0320 	orr.w	r3, r3, #32
 8006b1a:	6023      	str	r3, [r4, #0]
 8006b1c:	2778      	movs	r7, #120	@ 0x78
 8006b1e:	4832      	ldr	r0, [pc, #200]	@ (8006be8 <_printf_i+0x23c>)
 8006b20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	6831      	ldr	r1, [r6, #0]
 8006b28:	061f      	lsls	r7, r3, #24
 8006b2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b2e:	d402      	bmi.n	8006b36 <_printf_i+0x18a>
 8006b30:	065f      	lsls	r7, r3, #25
 8006b32:	bf48      	it	mi
 8006b34:	b2ad      	uxthmi	r5, r5
 8006b36:	6031      	str	r1, [r6, #0]
 8006b38:	07d9      	lsls	r1, r3, #31
 8006b3a:	bf44      	itt	mi
 8006b3c:	f043 0320 	orrmi.w	r3, r3, #32
 8006b40:	6023      	strmi	r3, [r4, #0]
 8006b42:	b11d      	cbz	r5, 8006b4c <_printf_i+0x1a0>
 8006b44:	2310      	movs	r3, #16
 8006b46:	e7ab      	b.n	8006aa0 <_printf_i+0xf4>
 8006b48:	4826      	ldr	r0, [pc, #152]	@ (8006be4 <_printf_i+0x238>)
 8006b4a:	e7e9      	b.n	8006b20 <_printf_i+0x174>
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	f023 0320 	bic.w	r3, r3, #32
 8006b52:	6023      	str	r3, [r4, #0]
 8006b54:	e7f6      	b.n	8006b44 <_printf_i+0x198>
 8006b56:	4616      	mov	r6, r2
 8006b58:	e7bd      	b.n	8006ad6 <_printf_i+0x12a>
 8006b5a:	6833      	ldr	r3, [r6, #0]
 8006b5c:	6825      	ldr	r5, [r4, #0]
 8006b5e:	1d18      	adds	r0, r3, #4
 8006b60:	6961      	ldr	r1, [r4, #20]
 8006b62:	6030      	str	r0, [r6, #0]
 8006b64:	062e      	lsls	r6, r5, #24
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	d501      	bpl.n	8006b6e <_printf_i+0x1c2>
 8006b6a:	6019      	str	r1, [r3, #0]
 8006b6c:	e002      	b.n	8006b74 <_printf_i+0x1c8>
 8006b6e:	0668      	lsls	r0, r5, #25
 8006b70:	d5fb      	bpl.n	8006b6a <_printf_i+0x1be>
 8006b72:	8019      	strh	r1, [r3, #0]
 8006b74:	2300      	movs	r3, #0
 8006b76:	4616      	mov	r6, r2
 8006b78:	6123      	str	r3, [r4, #16]
 8006b7a:	e7bc      	b.n	8006af6 <_printf_i+0x14a>
 8006b7c:	6833      	ldr	r3, [r6, #0]
 8006b7e:	2100      	movs	r1, #0
 8006b80:	1d1a      	adds	r2, r3, #4
 8006b82:	6032      	str	r2, [r6, #0]
 8006b84:	681e      	ldr	r6, [r3, #0]
 8006b86:	6862      	ldr	r2, [r4, #4]
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f000 f859 	bl	8006c40 <memchr>
 8006b8e:	b108      	cbz	r0, 8006b94 <_printf_i+0x1e8>
 8006b90:	1b80      	subs	r0, r0, r6
 8006b92:	6060      	str	r0, [r4, #4]
 8006b94:	6863      	ldr	r3, [r4, #4]
 8006b96:	6123      	str	r3, [r4, #16]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b9e:	e7aa      	b.n	8006af6 <_printf_i+0x14a>
 8006ba0:	4632      	mov	r2, r6
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	6923      	ldr	r3, [r4, #16]
 8006ba8:	47d0      	blx	sl
 8006baa:	3001      	adds	r0, #1
 8006bac:	d0ad      	beq.n	8006b0a <_printf_i+0x15e>
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	079b      	lsls	r3, r3, #30
 8006bb2:	d413      	bmi.n	8006bdc <_printf_i+0x230>
 8006bb4:	68e0      	ldr	r0, [r4, #12]
 8006bb6:	9b03      	ldr	r3, [sp, #12]
 8006bb8:	4298      	cmp	r0, r3
 8006bba:	bfb8      	it	lt
 8006bbc:	4618      	movlt	r0, r3
 8006bbe:	e7a6      	b.n	8006b0e <_printf_i+0x162>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	4632      	mov	r2, r6
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	47d0      	blx	sl
 8006bca:	3001      	adds	r0, #1
 8006bcc:	d09d      	beq.n	8006b0a <_printf_i+0x15e>
 8006bce:	3501      	adds	r5, #1
 8006bd0:	68e3      	ldr	r3, [r4, #12]
 8006bd2:	9903      	ldr	r1, [sp, #12]
 8006bd4:	1a5b      	subs	r3, r3, r1
 8006bd6:	42ab      	cmp	r3, r5
 8006bd8:	dcf2      	bgt.n	8006bc0 <_printf_i+0x214>
 8006bda:	e7eb      	b.n	8006bb4 <_printf_i+0x208>
 8006bdc:	2500      	movs	r5, #0
 8006bde:	f104 0619 	add.w	r6, r4, #25
 8006be2:	e7f5      	b.n	8006bd0 <_printf_i+0x224>
 8006be4:	08007427 	.word	0x08007427
 8006be8:	08007438 	.word	0x08007438

08006bec <memmove>:
 8006bec:	4288      	cmp	r0, r1
 8006bee:	b510      	push	{r4, lr}
 8006bf0:	eb01 0402 	add.w	r4, r1, r2
 8006bf4:	d902      	bls.n	8006bfc <memmove+0x10>
 8006bf6:	4284      	cmp	r4, r0
 8006bf8:	4623      	mov	r3, r4
 8006bfa:	d807      	bhi.n	8006c0c <memmove+0x20>
 8006bfc:	1e43      	subs	r3, r0, #1
 8006bfe:	42a1      	cmp	r1, r4
 8006c00:	d008      	beq.n	8006c14 <memmove+0x28>
 8006c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c0a:	e7f8      	b.n	8006bfe <memmove+0x12>
 8006c0c:	4601      	mov	r1, r0
 8006c0e:	4402      	add	r2, r0
 8006c10:	428a      	cmp	r2, r1
 8006c12:	d100      	bne.n	8006c16 <memmove+0x2a>
 8006c14:	bd10      	pop	{r4, pc}
 8006c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c1e:	e7f7      	b.n	8006c10 <memmove+0x24>

08006c20 <_sbrk_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	2300      	movs	r3, #0
 8006c24:	4d05      	ldr	r5, [pc, #20]	@ (8006c3c <_sbrk_r+0x1c>)
 8006c26:	4604      	mov	r4, r0
 8006c28:	4608      	mov	r0, r1
 8006c2a:	602b      	str	r3, [r5, #0]
 8006c2c:	f7fb ff48 	bl	8002ac0 <_sbrk>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d102      	bne.n	8006c3a <_sbrk_r+0x1a>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	b103      	cbz	r3, 8006c3a <_sbrk_r+0x1a>
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	20000874 	.word	0x20000874

08006c40 <memchr>:
 8006c40:	4603      	mov	r3, r0
 8006c42:	b510      	push	{r4, lr}
 8006c44:	b2c9      	uxtb	r1, r1
 8006c46:	4402      	add	r2, r0
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	d101      	bne.n	8006c52 <memchr+0x12>
 8006c4e:	2000      	movs	r0, #0
 8006c50:	e003      	b.n	8006c5a <memchr+0x1a>
 8006c52:	7804      	ldrb	r4, [r0, #0]
 8006c54:	3301      	adds	r3, #1
 8006c56:	428c      	cmp	r4, r1
 8006c58:	d1f6      	bne.n	8006c48 <memchr+0x8>
 8006c5a:	bd10      	pop	{r4, pc}

08006c5c <memcpy>:
 8006c5c:	440a      	add	r2, r1
 8006c5e:	4291      	cmp	r1, r2
 8006c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c64:	d100      	bne.n	8006c68 <memcpy+0xc>
 8006c66:	4770      	bx	lr
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c6e:	4291      	cmp	r1, r2
 8006c70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c74:	d1f9      	bne.n	8006c6a <memcpy+0xe>
 8006c76:	bd10      	pop	{r4, pc}

08006c78 <_realloc_r>:
 8006c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	4615      	mov	r5, r2
 8006c80:	460c      	mov	r4, r1
 8006c82:	b921      	cbnz	r1, 8006c8e <_realloc_r+0x16>
 8006c84:	4611      	mov	r1, r2
 8006c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c8a:	f7ff bc39 	b.w	8006500 <_malloc_r>
 8006c8e:	b92a      	cbnz	r2, 8006c9c <_realloc_r+0x24>
 8006c90:	f7ff fbcc 	bl	800642c <_free_r>
 8006c94:	2400      	movs	r4, #0
 8006c96:	4620      	mov	r0, r4
 8006c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c9c:	f000 f81a 	bl	8006cd4 <_malloc_usable_size_r>
 8006ca0:	4285      	cmp	r5, r0
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	d802      	bhi.n	8006cac <_realloc_r+0x34>
 8006ca6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006caa:	d8f4      	bhi.n	8006c96 <_realloc_r+0x1e>
 8006cac:	4629      	mov	r1, r5
 8006cae:	4640      	mov	r0, r8
 8006cb0:	f7ff fc26 	bl	8006500 <_malloc_r>
 8006cb4:	4607      	mov	r7, r0
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d0ec      	beq.n	8006c94 <_realloc_r+0x1c>
 8006cba:	42b5      	cmp	r5, r6
 8006cbc:	462a      	mov	r2, r5
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	bf28      	it	cs
 8006cc2:	4632      	movcs	r2, r6
 8006cc4:	f7ff ffca 	bl	8006c5c <memcpy>
 8006cc8:	4621      	mov	r1, r4
 8006cca:	4640      	mov	r0, r8
 8006ccc:	f7ff fbae 	bl	800642c <_free_r>
 8006cd0:	463c      	mov	r4, r7
 8006cd2:	e7e0      	b.n	8006c96 <_realloc_r+0x1e>

08006cd4 <_malloc_usable_size_r>:
 8006cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cd8:	1f18      	subs	r0, r3, #4
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bfbc      	itt	lt
 8006cde:	580b      	ldrlt	r3, [r1, r0]
 8006ce0:	18c0      	addlt	r0, r0, r3
 8006ce2:	4770      	bx	lr

08006ce4 <atan2>:
 8006ce4:	f000 b8fc 	b.w	8006ee0 <__ieee754_atan2>

08006ce8 <sqrt>:
 8006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cea:	4606      	mov	r6, r0
 8006cec:	460f      	mov	r7, r1
 8006cee:	f000 f81f 	bl	8006d30 <__ieee754_sqrt>
 8006cf2:	4632      	mov	r2, r6
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	460d      	mov	r5, r1
 8006cf8:	463b      	mov	r3, r7
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	f7f9 fe85 	bl	8000a0c <__aeabi_dcmpun>
 8006d02:	b990      	cbnz	r0, 8006d2a <sqrt+0x42>
 8006d04:	2200      	movs	r2, #0
 8006d06:	2300      	movs	r3, #0
 8006d08:	4630      	mov	r0, r6
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	f7f9 fe56 	bl	80009bc <__aeabi_dcmplt>
 8006d10:	b158      	cbz	r0, 8006d2a <sqrt+0x42>
 8006d12:	f7ff fb5f 	bl	80063d4 <__errno>
 8006d16:	2321      	movs	r3, #33	@ 0x21
 8006d18:	2200      	movs	r2, #0
 8006d1a:	6003      	str	r3, [r0, #0]
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4610      	mov	r0, r2
 8006d20:	4619      	mov	r1, r3
 8006d22:	f7f9 fd03 	bl	800072c <__aeabi_ddiv>
 8006d26:	4604      	mov	r4, r0
 8006d28:	460d      	mov	r5, r1
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d30 <__ieee754_sqrt>:
 8006d30:	4a67      	ldr	r2, [pc, #412]	@ (8006ed0 <__ieee754_sqrt+0x1a0>)
 8006d32:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d36:	438a      	bics	r2, r1
 8006d38:	4606      	mov	r6, r0
 8006d3a:	460f      	mov	r7, r1
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4604      	mov	r4, r0
 8006d40:	d10e      	bne.n	8006d60 <__ieee754_sqrt+0x30>
 8006d42:	4602      	mov	r2, r0
 8006d44:	f7f9 fbc8 	bl	80004d8 <__aeabi_dmul>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	4639      	mov	r1, r7
 8006d50:	f7f9 fa0c 	bl	800016c <__adddf3>
 8006d54:	4606      	mov	r6, r0
 8006d56:	460f      	mov	r7, r1
 8006d58:	4630      	mov	r0, r6
 8006d5a:	4639      	mov	r1, r7
 8006d5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d60:	2900      	cmp	r1, #0
 8006d62:	dc0c      	bgt.n	8006d7e <__ieee754_sqrt+0x4e>
 8006d64:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006d68:	4302      	orrs	r2, r0
 8006d6a:	d0f5      	beq.n	8006d58 <__ieee754_sqrt+0x28>
 8006d6c:	b189      	cbz	r1, 8006d92 <__ieee754_sqrt+0x62>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	f7f9 f9fa 	bl	8000168 <__aeabi_dsub>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	f7f9 fcd8 	bl	800072c <__aeabi_ddiv>
 8006d7c:	e7ea      	b.n	8006d54 <__ieee754_sqrt+0x24>
 8006d7e:	150a      	asrs	r2, r1, #20
 8006d80:	d115      	bne.n	8006dae <__ieee754_sqrt+0x7e>
 8006d82:	2100      	movs	r1, #0
 8006d84:	e009      	b.n	8006d9a <__ieee754_sqrt+0x6a>
 8006d86:	0ae3      	lsrs	r3, r4, #11
 8006d88:	3a15      	subs	r2, #21
 8006d8a:	0564      	lsls	r4, r4, #21
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0fa      	beq.n	8006d86 <__ieee754_sqrt+0x56>
 8006d90:	e7f7      	b.n	8006d82 <__ieee754_sqrt+0x52>
 8006d92:	460a      	mov	r2, r1
 8006d94:	e7fa      	b.n	8006d8c <__ieee754_sqrt+0x5c>
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	3101      	adds	r1, #1
 8006d9a:	02d8      	lsls	r0, r3, #11
 8006d9c:	d5fb      	bpl.n	8006d96 <__ieee754_sqrt+0x66>
 8006d9e:	1e48      	subs	r0, r1, #1
 8006da0:	1a12      	subs	r2, r2, r0
 8006da2:	f1c1 0020 	rsb	r0, r1, #32
 8006da6:	fa24 f000 	lsr.w	r0, r4, r0
 8006daa:	4303      	orrs	r3, r0
 8006dac:	408c      	lsls	r4, r1
 8006dae:	2600      	movs	r6, #0
 8006db0:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006db4:	2116      	movs	r1, #22
 8006db6:	07d2      	lsls	r2, r2, #31
 8006db8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dc6:	bf5c      	itt	pl
 8006dc8:	005b      	lslpl	r3, r3, #1
 8006dca:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006dce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006dd2:	bf58      	it	pl
 8006dd4:	0064      	lslpl	r4, r4, #1
 8006dd6:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006dda:	107f      	asrs	r7, r7, #1
 8006ddc:	0064      	lsls	r4, r4, #1
 8006dde:	1815      	adds	r5, r2, r0
 8006de0:	429d      	cmp	r5, r3
 8006de2:	bfde      	ittt	le
 8006de4:	182a      	addle	r2, r5, r0
 8006de6:	1b5b      	suble	r3, r3, r5
 8006de8:	1836      	addle	r6, r6, r0
 8006dea:	0fe5      	lsrs	r5, r4, #31
 8006dec:	3901      	subs	r1, #1
 8006dee:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006df2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006df6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006dfa:	d1f0      	bne.n	8006dde <__ieee754_sqrt+0xae>
 8006dfc:	460d      	mov	r5, r1
 8006dfe:	f04f 0a20 	mov.w	sl, #32
 8006e02:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006e06:	429a      	cmp	r2, r3
 8006e08:	eb01 0c00 	add.w	ip, r1, r0
 8006e0c:	db02      	blt.n	8006e14 <__ieee754_sqrt+0xe4>
 8006e0e:	d113      	bne.n	8006e38 <__ieee754_sqrt+0x108>
 8006e10:	45a4      	cmp	ip, r4
 8006e12:	d811      	bhi.n	8006e38 <__ieee754_sqrt+0x108>
 8006e14:	f1bc 0f00 	cmp.w	ip, #0
 8006e18:	eb0c 0100 	add.w	r1, ip, r0
 8006e1c:	da42      	bge.n	8006ea4 <__ieee754_sqrt+0x174>
 8006e1e:	2900      	cmp	r1, #0
 8006e20:	db40      	blt.n	8006ea4 <__ieee754_sqrt+0x174>
 8006e22:	f102 0e01 	add.w	lr, r2, #1
 8006e26:	1a9b      	subs	r3, r3, r2
 8006e28:	4672      	mov	r2, lr
 8006e2a:	45a4      	cmp	ip, r4
 8006e2c:	bf88      	it	hi
 8006e2e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006e32:	eba4 040c 	sub.w	r4, r4, ip
 8006e36:	4405      	add	r5, r0
 8006e38:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006e3c:	f1ba 0a01 	subs.w	sl, sl, #1
 8006e40:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006e44:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006e48:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006e4c:	d1db      	bne.n	8006e06 <__ieee754_sqrt+0xd6>
 8006e4e:	431c      	orrs	r4, r3
 8006e50:	d01a      	beq.n	8006e88 <__ieee754_sqrt+0x158>
 8006e52:	4c20      	ldr	r4, [pc, #128]	@ (8006ed4 <__ieee754_sqrt+0x1a4>)
 8006e54:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8006ed8 <__ieee754_sqrt+0x1a8>
 8006e58:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006e5c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006e60:	f7f9 f982 	bl	8000168 <__aeabi_dsub>
 8006e64:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	4649      	mov	r1, r9
 8006e70:	f7f9 fdae 	bl	80009d0 <__aeabi_dcmple>
 8006e74:	b140      	cbz	r0, 8006e88 <__ieee754_sqrt+0x158>
 8006e76:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006e7a:	e9db 2300 	ldrd	r2, r3, [fp]
 8006e7e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006e82:	d111      	bne.n	8006ea8 <__ieee754_sqrt+0x178>
 8006e84:	4655      	mov	r5, sl
 8006e86:	3601      	adds	r6, #1
 8006e88:	1072      	asrs	r2, r6, #1
 8006e8a:	086b      	lsrs	r3, r5, #1
 8006e8c:	07f1      	lsls	r1, r6, #31
 8006e8e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006e92:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006e96:	bf48      	it	mi
 8006e98:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8006ea2:	e757      	b.n	8006d54 <__ieee754_sqrt+0x24>
 8006ea4:	4696      	mov	lr, r2
 8006ea6:	e7be      	b.n	8006e26 <__ieee754_sqrt+0xf6>
 8006ea8:	f7f9 f960 	bl	800016c <__adddf3>
 8006eac:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	f7f9 fd80 	bl	80009bc <__aeabi_dcmplt>
 8006ebc:	b120      	cbz	r0, 8006ec8 <__ieee754_sqrt+0x198>
 8006ebe:	1ca8      	adds	r0, r5, #2
 8006ec0:	bf08      	it	eq
 8006ec2:	3601      	addeq	r6, #1
 8006ec4:	3502      	adds	r5, #2
 8006ec6:	e7df      	b.n	8006e88 <__ieee754_sqrt+0x158>
 8006ec8:	1c6b      	adds	r3, r5, #1
 8006eca:	f023 0501 	bic.w	r5, r3, #1
 8006ece:	e7db      	b.n	8006e88 <__ieee754_sqrt+0x158>
 8006ed0:	7ff00000 	.word	0x7ff00000
 8006ed4:	20000090 	.word	0x20000090
 8006ed8:	20000088 	.word	0x20000088
 8006edc:	00000000 	.word	0x00000000

08006ee0 <__ieee754_atan2>:
 8006ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee4:	4617      	mov	r7, r2
 8006ee6:	4690      	mov	r8, r2
 8006ee8:	4699      	mov	r9, r3
 8006eea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006eee:	427b      	negs	r3, r7
 8006ef0:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8007078 <__ieee754_atan2+0x198>
 8006ef4:	433b      	orrs	r3, r7
 8006ef6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006efa:	4553      	cmp	r3, sl
 8006efc:	4604      	mov	r4, r0
 8006efe:	460d      	mov	r5, r1
 8006f00:	d809      	bhi.n	8006f16 <__ieee754_atan2+0x36>
 8006f02:	4246      	negs	r6, r0
 8006f04:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006f08:	4306      	orrs	r6, r0
 8006f0a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006f0e:	4556      	cmp	r6, sl
 8006f10:	468e      	mov	lr, r1
 8006f12:	4683      	mov	fp, r0
 8006f14:	d908      	bls.n	8006f28 <__ieee754_atan2+0x48>
 8006f16:	4642      	mov	r2, r8
 8006f18:	464b      	mov	r3, r9
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	f7f9 f925 	bl	800016c <__adddf3>
 8006f22:	4604      	mov	r4, r0
 8006f24:	460d      	mov	r5, r1
 8006f26:	e016      	b.n	8006f56 <__ieee754_atan2+0x76>
 8006f28:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8006f2c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8006f30:	433e      	orrs	r6, r7
 8006f32:	d103      	bne.n	8006f3c <__ieee754_atan2+0x5c>
 8006f34:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f38:	f000 b8a6 	b.w	8007088 <atan>
 8006f3c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8006f40:	f006 0602 	and.w	r6, r6, #2
 8006f44:	ea53 0b0b 	orrs.w	fp, r3, fp
 8006f48:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006f4c:	d107      	bne.n	8006f5e <__ieee754_atan2+0x7e>
 8006f4e:	2e02      	cmp	r6, #2
 8006f50:	d064      	beq.n	800701c <__ieee754_atan2+0x13c>
 8006f52:	2e03      	cmp	r6, #3
 8006f54:	d066      	beq.n	8007024 <__ieee754_atan2+0x144>
 8006f56:	4620      	mov	r0, r4
 8006f58:	4629      	mov	r1, r5
 8006f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5e:	4317      	orrs	r7, r2
 8006f60:	d106      	bne.n	8006f70 <__ieee754_atan2+0x90>
 8006f62:	f1be 0f00 	cmp.w	lr, #0
 8006f66:	da68      	bge.n	800703a <__ieee754_atan2+0x15a>
 8006f68:	a537      	add	r5, pc, #220	@ (adr r5, 8007048 <__ieee754_atan2+0x168>)
 8006f6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f6e:	e7f2      	b.n	8006f56 <__ieee754_atan2+0x76>
 8006f70:	4552      	cmp	r2, sl
 8006f72:	d10f      	bne.n	8006f94 <__ieee754_atan2+0xb4>
 8006f74:	4293      	cmp	r3, r2
 8006f76:	f106 36ff 	add.w	r6, r6, #4294967295
 8006f7a:	d107      	bne.n	8006f8c <__ieee754_atan2+0xac>
 8006f7c:	2e02      	cmp	r6, #2
 8006f7e:	d855      	bhi.n	800702c <__ieee754_atan2+0x14c>
 8006f80:	4b3e      	ldr	r3, [pc, #248]	@ (800707c <__ieee754_atan2+0x19c>)
 8006f82:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006f8a:	e7e4      	b.n	8006f56 <__ieee754_atan2+0x76>
 8006f8c:	2e02      	cmp	r6, #2
 8006f8e:	d851      	bhi.n	8007034 <__ieee754_atan2+0x154>
 8006f90:	4b3b      	ldr	r3, [pc, #236]	@ (8007080 <__ieee754_atan2+0x1a0>)
 8006f92:	e7f6      	b.n	8006f82 <__ieee754_atan2+0xa2>
 8006f94:	4553      	cmp	r3, sl
 8006f96:	d0e4      	beq.n	8006f62 <__ieee754_atan2+0x82>
 8006f98:	1a9b      	subs	r3, r3, r2
 8006f9a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8006f9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006fa2:	da21      	bge.n	8006fe8 <__ieee754_atan2+0x108>
 8006fa4:	f1b9 0f00 	cmp.w	r9, #0
 8006fa8:	da01      	bge.n	8006fae <__ieee754_atan2+0xce>
 8006faa:	323c      	adds	r2, #60	@ 0x3c
 8006fac:	db20      	blt.n	8006ff0 <__ieee754_atan2+0x110>
 8006fae:	4642      	mov	r2, r8
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	4629      	mov	r1, r5
 8006fb6:	f7f9 fbb9 	bl	800072c <__aeabi_ddiv>
 8006fba:	f000 f9f5 	bl	80073a8 <fabs>
 8006fbe:	f000 f863 	bl	8007088 <atan>
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	460d      	mov	r5, r1
 8006fc6:	2e01      	cmp	r6, #1
 8006fc8:	d015      	beq.n	8006ff6 <__ieee754_atan2+0x116>
 8006fca:	2e02      	cmp	r6, #2
 8006fcc:	d017      	beq.n	8006ffe <__ieee754_atan2+0x11e>
 8006fce:	2e00      	cmp	r6, #0
 8006fd0:	d0c1      	beq.n	8006f56 <__ieee754_atan2+0x76>
 8006fd2:	a31f      	add	r3, pc, #124	@ (adr r3, 8007050 <__ieee754_atan2+0x170>)
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	4620      	mov	r0, r4
 8006fda:	4629      	mov	r1, r5
 8006fdc:	f7f9 f8c4 	bl	8000168 <__aeabi_dsub>
 8006fe0:	a31d      	add	r3, pc, #116	@ (adr r3, 8007058 <__ieee754_atan2+0x178>)
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	e016      	b.n	8007016 <__ieee754_atan2+0x136>
 8006fe8:	a51d      	add	r5, pc, #116	@ (adr r5, 8007060 <__ieee754_atan2+0x180>)
 8006fea:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006fee:	e7ea      	b.n	8006fc6 <__ieee754_atan2+0xe6>
 8006ff0:	2400      	movs	r4, #0
 8006ff2:	2500      	movs	r5, #0
 8006ff4:	e7e7      	b.n	8006fc6 <__ieee754_atan2+0xe6>
 8006ff6:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8006ffa:	461d      	mov	r5, r3
 8006ffc:	e7ab      	b.n	8006f56 <__ieee754_atan2+0x76>
 8006ffe:	a314      	add	r3, pc, #80	@ (adr r3, 8007050 <__ieee754_atan2+0x170>)
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	4620      	mov	r0, r4
 8007006:	4629      	mov	r1, r5
 8007008:	f7f9 f8ae 	bl	8000168 <__aeabi_dsub>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	a111      	add	r1, pc, #68	@ (adr r1, 8007058 <__ieee754_atan2+0x178>)
 8007012:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007016:	f7f9 f8a7 	bl	8000168 <__aeabi_dsub>
 800701a:	e782      	b.n	8006f22 <__ieee754_atan2+0x42>
 800701c:	a50e      	add	r5, pc, #56	@ (adr r5, 8007058 <__ieee754_atan2+0x178>)
 800701e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007022:	e798      	b.n	8006f56 <__ieee754_atan2+0x76>
 8007024:	a510      	add	r5, pc, #64	@ (adr r5, 8007068 <__ieee754_atan2+0x188>)
 8007026:	e9d5 4500 	ldrd	r4, r5, [r5]
 800702a:	e794      	b.n	8006f56 <__ieee754_atan2+0x76>
 800702c:	a510      	add	r5, pc, #64	@ (adr r5, 8007070 <__ieee754_atan2+0x190>)
 800702e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007032:	e790      	b.n	8006f56 <__ieee754_atan2+0x76>
 8007034:	2400      	movs	r4, #0
 8007036:	2500      	movs	r5, #0
 8007038:	e78d      	b.n	8006f56 <__ieee754_atan2+0x76>
 800703a:	a509      	add	r5, pc, #36	@ (adr r5, 8007060 <__ieee754_atan2+0x180>)
 800703c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007040:	e789      	b.n	8006f56 <__ieee754_atan2+0x76>
 8007042:	bf00      	nop
 8007044:	f3af 8000 	nop.w
 8007048:	54442d18 	.word	0x54442d18
 800704c:	bff921fb 	.word	0xbff921fb
 8007050:	33145c07 	.word	0x33145c07
 8007054:	3ca1a626 	.word	0x3ca1a626
 8007058:	54442d18 	.word	0x54442d18
 800705c:	400921fb 	.word	0x400921fb
 8007060:	54442d18 	.word	0x54442d18
 8007064:	3ff921fb 	.word	0x3ff921fb
 8007068:	54442d18 	.word	0x54442d18
 800706c:	c00921fb 	.word	0xc00921fb
 8007070:	54442d18 	.word	0x54442d18
 8007074:	3fe921fb 	.word	0x3fe921fb
 8007078:	7ff00000 	.word	0x7ff00000
 800707c:	08007468 	.word	0x08007468
 8007080:	08007450 	.word	0x08007450
 8007084:	00000000 	.word	0x00000000

08007088 <atan>:
 8007088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	4bbc      	ldr	r3, [pc, #752]	@ (8007380 <atan+0x2f8>)
 800708e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8007092:	429e      	cmp	r6, r3
 8007094:	4604      	mov	r4, r0
 8007096:	460d      	mov	r5, r1
 8007098:	468b      	mov	fp, r1
 800709a:	d918      	bls.n	80070ce <atan+0x46>
 800709c:	4bb9      	ldr	r3, [pc, #740]	@ (8007384 <atan+0x2fc>)
 800709e:	429e      	cmp	r6, r3
 80070a0:	d801      	bhi.n	80070a6 <atan+0x1e>
 80070a2:	d109      	bne.n	80070b8 <atan+0x30>
 80070a4:	b140      	cbz	r0, 80070b8 <atan+0x30>
 80070a6:	4622      	mov	r2, r4
 80070a8:	462b      	mov	r3, r5
 80070aa:	4620      	mov	r0, r4
 80070ac:	4629      	mov	r1, r5
 80070ae:	f7f9 f85d 	bl	800016c <__adddf3>
 80070b2:	4604      	mov	r4, r0
 80070b4:	460d      	mov	r5, r1
 80070b6:	e006      	b.n	80070c6 <atan+0x3e>
 80070b8:	f1bb 0f00 	cmp.w	fp, #0
 80070bc:	f340 8123 	ble.w	8007306 <atan+0x27e>
 80070c0:	a593      	add	r5, pc, #588	@ (adr r5, 8007310 <atan+0x288>)
 80070c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80070c6:	4620      	mov	r0, r4
 80070c8:	4629      	mov	r1, r5
 80070ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ce:	4bae      	ldr	r3, [pc, #696]	@ (8007388 <atan+0x300>)
 80070d0:	429e      	cmp	r6, r3
 80070d2:	d811      	bhi.n	80070f8 <atan+0x70>
 80070d4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80070d8:	429e      	cmp	r6, r3
 80070da:	d80a      	bhi.n	80070f2 <atan+0x6a>
 80070dc:	a38e      	add	r3, pc, #568	@ (adr r3, 8007318 <atan+0x290>)
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f7f9 f843 	bl	800016c <__adddf3>
 80070e6:	2200      	movs	r2, #0
 80070e8:	4ba8      	ldr	r3, [pc, #672]	@ (800738c <atan+0x304>)
 80070ea:	f7f9 fc85 	bl	80009f8 <__aeabi_dcmpgt>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d1e9      	bne.n	80070c6 <atan+0x3e>
 80070f2:	f04f 3aff 	mov.w	sl, #4294967295
 80070f6:	e027      	b.n	8007148 <atan+0xc0>
 80070f8:	f000 f956 	bl	80073a8 <fabs>
 80070fc:	4ba4      	ldr	r3, [pc, #656]	@ (8007390 <atan+0x308>)
 80070fe:	4604      	mov	r4, r0
 8007100:	429e      	cmp	r6, r3
 8007102:	460d      	mov	r5, r1
 8007104:	f200 80b8 	bhi.w	8007278 <atan+0x1f0>
 8007108:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800710c:	429e      	cmp	r6, r3
 800710e:	f200 809c 	bhi.w	800724a <atan+0x1c2>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	f7f9 f829 	bl	800016c <__adddf3>
 800711a:	2200      	movs	r2, #0
 800711c:	4b9b      	ldr	r3, [pc, #620]	@ (800738c <atan+0x304>)
 800711e:	f7f9 f823 	bl	8000168 <__aeabi_dsub>
 8007122:	2200      	movs	r2, #0
 8007124:	4606      	mov	r6, r0
 8007126:	460f      	mov	r7, r1
 8007128:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800712c:	4620      	mov	r0, r4
 800712e:	4629      	mov	r1, r5
 8007130:	f7f9 f81c 	bl	800016c <__adddf3>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4630      	mov	r0, r6
 800713a:	4639      	mov	r1, r7
 800713c:	f7f9 faf6 	bl	800072c <__aeabi_ddiv>
 8007140:	f04f 0a00 	mov.w	sl, #0
 8007144:	4604      	mov	r4, r0
 8007146:	460d      	mov	r5, r1
 8007148:	4622      	mov	r2, r4
 800714a:	462b      	mov	r3, r5
 800714c:	4620      	mov	r0, r4
 800714e:	4629      	mov	r1, r5
 8007150:	f7f9 f9c2 	bl	80004d8 <__aeabi_dmul>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4680      	mov	r8, r0
 800715a:	4689      	mov	r9, r1
 800715c:	f7f9 f9bc 	bl	80004d8 <__aeabi_dmul>
 8007160:	a36f      	add	r3, pc, #444	@ (adr r3, 8007320 <atan+0x298>)
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	4606      	mov	r6, r0
 8007168:	460f      	mov	r7, r1
 800716a:	f7f9 f9b5 	bl	80004d8 <__aeabi_dmul>
 800716e:	a36e      	add	r3, pc, #440	@ (adr r3, 8007328 <atan+0x2a0>)
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f7f8 fffa 	bl	800016c <__adddf3>
 8007178:	4632      	mov	r2, r6
 800717a:	463b      	mov	r3, r7
 800717c:	f7f9 f9ac 	bl	80004d8 <__aeabi_dmul>
 8007180:	a36b      	add	r3, pc, #428	@ (adr r3, 8007330 <atan+0x2a8>)
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f7f8 fff1 	bl	800016c <__adddf3>
 800718a:	4632      	mov	r2, r6
 800718c:	463b      	mov	r3, r7
 800718e:	f7f9 f9a3 	bl	80004d8 <__aeabi_dmul>
 8007192:	a369      	add	r3, pc, #420	@ (adr r3, 8007338 <atan+0x2b0>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	f7f8 ffe8 	bl	800016c <__adddf3>
 800719c:	4632      	mov	r2, r6
 800719e:	463b      	mov	r3, r7
 80071a0:	f7f9 f99a 	bl	80004d8 <__aeabi_dmul>
 80071a4:	a366      	add	r3, pc, #408	@ (adr r3, 8007340 <atan+0x2b8>)
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f7f8 ffdf 	bl	800016c <__adddf3>
 80071ae:	4632      	mov	r2, r6
 80071b0:	463b      	mov	r3, r7
 80071b2:	f7f9 f991 	bl	80004d8 <__aeabi_dmul>
 80071b6:	a364      	add	r3, pc, #400	@ (adr r3, 8007348 <atan+0x2c0>)
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	f7f8 ffd6 	bl	800016c <__adddf3>
 80071c0:	4642      	mov	r2, r8
 80071c2:	464b      	mov	r3, r9
 80071c4:	f7f9 f988 	bl	80004d8 <__aeabi_dmul>
 80071c8:	a361      	add	r3, pc, #388	@ (adr r3, 8007350 <atan+0x2c8>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	4680      	mov	r8, r0
 80071d0:	4689      	mov	r9, r1
 80071d2:	4630      	mov	r0, r6
 80071d4:	4639      	mov	r1, r7
 80071d6:	f7f9 f97f 	bl	80004d8 <__aeabi_dmul>
 80071da:	a35f      	add	r3, pc, #380	@ (adr r3, 8007358 <atan+0x2d0>)
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f7f8 ffc2 	bl	8000168 <__aeabi_dsub>
 80071e4:	4632      	mov	r2, r6
 80071e6:	463b      	mov	r3, r7
 80071e8:	f7f9 f976 	bl	80004d8 <__aeabi_dmul>
 80071ec:	a35c      	add	r3, pc, #368	@ (adr r3, 8007360 <atan+0x2d8>)
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f7f8 ffb9 	bl	8000168 <__aeabi_dsub>
 80071f6:	4632      	mov	r2, r6
 80071f8:	463b      	mov	r3, r7
 80071fa:	f7f9 f96d 	bl	80004d8 <__aeabi_dmul>
 80071fe:	a35a      	add	r3, pc, #360	@ (adr r3, 8007368 <atan+0x2e0>)
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f7f8 ffb0 	bl	8000168 <__aeabi_dsub>
 8007208:	4632      	mov	r2, r6
 800720a:	463b      	mov	r3, r7
 800720c:	f7f9 f964 	bl	80004d8 <__aeabi_dmul>
 8007210:	a357      	add	r3, pc, #348	@ (adr r3, 8007370 <atan+0x2e8>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f7f8 ffa7 	bl	8000168 <__aeabi_dsub>
 800721a:	4632      	mov	r2, r6
 800721c:	463b      	mov	r3, r7
 800721e:	f7f9 f95b 	bl	80004d8 <__aeabi_dmul>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4640      	mov	r0, r8
 8007228:	4649      	mov	r1, r9
 800722a:	f7f8 ff9f 	bl	800016c <__adddf3>
 800722e:	4622      	mov	r2, r4
 8007230:	462b      	mov	r3, r5
 8007232:	f7f9 f951 	bl	80004d8 <__aeabi_dmul>
 8007236:	f1ba 3fff 	cmp.w	sl, #4294967295
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	d144      	bne.n	80072ca <atan+0x242>
 8007240:	4620      	mov	r0, r4
 8007242:	4629      	mov	r1, r5
 8007244:	f7f8 ff90 	bl	8000168 <__aeabi_dsub>
 8007248:	e733      	b.n	80070b2 <atan+0x2a>
 800724a:	2200      	movs	r2, #0
 800724c:	4b4f      	ldr	r3, [pc, #316]	@ (800738c <atan+0x304>)
 800724e:	f7f8 ff8b 	bl	8000168 <__aeabi_dsub>
 8007252:	2200      	movs	r2, #0
 8007254:	4606      	mov	r6, r0
 8007256:	460f      	mov	r7, r1
 8007258:	4620      	mov	r0, r4
 800725a:	4629      	mov	r1, r5
 800725c:	4b4b      	ldr	r3, [pc, #300]	@ (800738c <atan+0x304>)
 800725e:	f7f8 ff85 	bl	800016c <__adddf3>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	4630      	mov	r0, r6
 8007268:	4639      	mov	r1, r7
 800726a:	f7f9 fa5f 	bl	800072c <__aeabi_ddiv>
 800726e:	f04f 0a01 	mov.w	sl, #1
 8007272:	4604      	mov	r4, r0
 8007274:	460d      	mov	r5, r1
 8007276:	e767      	b.n	8007148 <atan+0xc0>
 8007278:	4b46      	ldr	r3, [pc, #280]	@ (8007394 <atan+0x30c>)
 800727a:	429e      	cmp	r6, r3
 800727c:	d21a      	bcs.n	80072b4 <atan+0x22c>
 800727e:	2200      	movs	r2, #0
 8007280:	4b45      	ldr	r3, [pc, #276]	@ (8007398 <atan+0x310>)
 8007282:	f7f8 ff71 	bl	8000168 <__aeabi_dsub>
 8007286:	2200      	movs	r2, #0
 8007288:	4606      	mov	r6, r0
 800728a:	460f      	mov	r7, r1
 800728c:	4620      	mov	r0, r4
 800728e:	4629      	mov	r1, r5
 8007290:	4b41      	ldr	r3, [pc, #260]	@ (8007398 <atan+0x310>)
 8007292:	f7f9 f921 	bl	80004d8 <__aeabi_dmul>
 8007296:	2200      	movs	r2, #0
 8007298:	4b3c      	ldr	r3, [pc, #240]	@ (800738c <atan+0x304>)
 800729a:	f7f8 ff67 	bl	800016c <__adddf3>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4630      	mov	r0, r6
 80072a4:	4639      	mov	r1, r7
 80072a6:	f7f9 fa41 	bl	800072c <__aeabi_ddiv>
 80072aa:	f04f 0a02 	mov.w	sl, #2
 80072ae:	4604      	mov	r4, r0
 80072b0:	460d      	mov	r5, r1
 80072b2:	e749      	b.n	8007148 <atan+0xc0>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	2000      	movs	r0, #0
 80072ba:	4938      	ldr	r1, [pc, #224]	@ (800739c <atan+0x314>)
 80072bc:	f7f9 fa36 	bl	800072c <__aeabi_ddiv>
 80072c0:	f04f 0a03 	mov.w	sl, #3
 80072c4:	4604      	mov	r4, r0
 80072c6:	460d      	mov	r5, r1
 80072c8:	e73e      	b.n	8007148 <atan+0xc0>
 80072ca:	4b35      	ldr	r3, [pc, #212]	@ (80073a0 <atan+0x318>)
 80072cc:	4e35      	ldr	r6, [pc, #212]	@ (80073a4 <atan+0x31c>)
 80072ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80072d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d6:	f7f8 ff47 	bl	8000168 <__aeabi_dsub>
 80072da:	4622      	mov	r2, r4
 80072dc:	462b      	mov	r3, r5
 80072de:	f7f8 ff43 	bl	8000168 <__aeabi_dsub>
 80072e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	e9d6 0100 	ldrd	r0, r1, [r6]
 80072ee:	f7f8 ff3b 	bl	8000168 <__aeabi_dsub>
 80072f2:	f1bb 0f00 	cmp.w	fp, #0
 80072f6:	4604      	mov	r4, r0
 80072f8:	460d      	mov	r5, r1
 80072fa:	f6bf aee4 	bge.w	80070c6 <atan+0x3e>
 80072fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007302:	461d      	mov	r5, r3
 8007304:	e6df      	b.n	80070c6 <atan+0x3e>
 8007306:	a51c      	add	r5, pc, #112	@ (adr r5, 8007378 <atan+0x2f0>)
 8007308:	e9d5 4500 	ldrd	r4, r5, [r5]
 800730c:	e6db      	b.n	80070c6 <atan+0x3e>
 800730e:	bf00      	nop
 8007310:	54442d18 	.word	0x54442d18
 8007314:	3ff921fb 	.word	0x3ff921fb
 8007318:	8800759c 	.word	0x8800759c
 800731c:	7e37e43c 	.word	0x7e37e43c
 8007320:	e322da11 	.word	0xe322da11
 8007324:	3f90ad3a 	.word	0x3f90ad3a
 8007328:	24760deb 	.word	0x24760deb
 800732c:	3fa97b4b 	.word	0x3fa97b4b
 8007330:	a0d03d51 	.word	0xa0d03d51
 8007334:	3fb10d66 	.word	0x3fb10d66
 8007338:	c54c206e 	.word	0xc54c206e
 800733c:	3fb745cd 	.word	0x3fb745cd
 8007340:	920083ff 	.word	0x920083ff
 8007344:	3fc24924 	.word	0x3fc24924
 8007348:	5555550d 	.word	0x5555550d
 800734c:	3fd55555 	.word	0x3fd55555
 8007350:	2c6a6c2f 	.word	0x2c6a6c2f
 8007354:	bfa2b444 	.word	0xbfa2b444
 8007358:	52defd9a 	.word	0x52defd9a
 800735c:	3fadde2d 	.word	0x3fadde2d
 8007360:	af749a6d 	.word	0xaf749a6d
 8007364:	3fb3b0f2 	.word	0x3fb3b0f2
 8007368:	fe231671 	.word	0xfe231671
 800736c:	3fbc71c6 	.word	0x3fbc71c6
 8007370:	9998ebc4 	.word	0x9998ebc4
 8007374:	3fc99999 	.word	0x3fc99999
 8007378:	54442d18 	.word	0x54442d18
 800737c:	bff921fb 	.word	0xbff921fb
 8007380:	440fffff 	.word	0x440fffff
 8007384:	7ff00000 	.word	0x7ff00000
 8007388:	3fdbffff 	.word	0x3fdbffff
 800738c:	3ff00000 	.word	0x3ff00000
 8007390:	3ff2ffff 	.word	0x3ff2ffff
 8007394:	40038000 	.word	0x40038000
 8007398:	3ff80000 	.word	0x3ff80000
 800739c:	bff00000 	.word	0xbff00000
 80073a0:	08007480 	.word	0x08007480
 80073a4:	080074a0 	.word	0x080074a0

080073a8 <fabs>:
 80073a8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80073ac:	4619      	mov	r1, r3
 80073ae:	4770      	bx	lr

080073b0 <_init>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr

080073bc <_fini>:
 80073bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073be:	bf00      	nop
 80073c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073c2:	bc08      	pop	{r3}
 80073c4:	469e      	mov	lr, r3
 80073c6:	4770      	bx	lr
